/*	NBasicTypesN105.h - #defines and typedefs for Nightingale's basic datatypes - version
for the 'N105' file format. NB: Many of these appear in Nightingale score files, so
changing them may be a problem for backward compatibility. In fact, in format 'N105'
files (as well as in-memory data structures of earlier versions of Nightingale), our
objects and subobjects as well as file headers are jammed with bit fields. In the words
of Harbison & Steele's _C: A Reference Manual_, bit fields are "likely to be nonportable".
Indeed, handling of bit fields in code generated by the C compiler in Xcode 2.5 for Intel
CPUs vs. PowerPCs is not compatible. Nightingale has always run on PowerPCs, so we need
to get bit fields out of files to let Nightingale on Intel read older files. */

/*
 * THIS FILE IS PART OF THE NIGHTINGALE™ PROGRAM AND IS PROPERTY OF AVIAN MUSIC
 * NOTATION FOUNDATION. Nightingale is an open-source project, hosted at
 * github.com/AMNS/Nightingale .
 *
 * Copyright © 2018 by Avian Music Notation Foundation. All Rights Reserved.
 */

#ifndef TypesN105Included
#define TypesN105Included

#pragma options align=mac68k

/* -------------------------------- Data-structure Things ------------------------------- */

/* We assume already-included headers (on the Macintosh, Types.h) say:
	typedef unsigned char Byte;
	typedef signed char SignedByte;
*/

/* ------------------------------------------------------------------------- TEXTSTYLE -- */

typedef struct xTEXTSTYLEN105 {
	unsigned char	fontName[32];	/* default font name: Pascal string */
	unsigned short	filler2:5;
	unsigned short	lyric:1;		/* True means lyric spacing */
	unsigned short	enclosure:2;
	unsigned short	relFSize:1;		/* True if size is relative to staff size */ 
	unsigned short	fontSize:7;		/* if relFSize, small..large code, else point size */
	short			fontStyle;
} TEXTSTYLEN105, *PTEXTSTYLEN105;


/* ------------------------------------------------------------------------- VOICEINFO -- */

typedef struct {
	Byte		partn;				/* No. of part using voice, or 0 if voice is unused */
	Byte		voiceRole:3;		/* upper, lower, single, or cross-stf voice */
	Byte		relVoice:5;			/* Voice no. within the part, >=1 */
} VOICEINFON105;


/* --------------------------------------------------------------------------- PARTINFO -- */

#pragma options align=reset

#endif /* TypesIncluded */
