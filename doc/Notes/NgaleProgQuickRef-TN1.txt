NIGHTINGALE PROGRAMMER'S QUICK REFERENCE (as of v. 5.8.10)
Nightingale Technical Note #1
Don Byrd, rev. early February 2021

A general note:

Working on Nightingale is considerably more difficult than you might expect, and more
difficult than it should be, for several reasons, mostly related to its age. It was
designed in the mid- and late-1980's to run on some of the first Macintosh computers,
e.g., the Macintosh Plus and SE. Those machines were hundreds, perhaps thousands, of
times slower than modern (say, 2010 and later) computers: their processors were Motorola
68000s, 16-bit CPUs running at 8 MHz. They also had a thousand or more times less memory
than modern computers: typically one or two megabytes, four at the most. As a result:

* For speed, Nightingale's main data structure, the object list, has cross links on
	multiple levels. Of course the cross links can become inconsistent.
* For speed, Nightingale tries pretty hard not to redraw more than necessary. Of
	course it can redraw _less_ than necesssary.
* Nightingale's data structures -- in particular, the object list (see below) -- were
	designed with heavy emphasis on saving memory.
* Nightingale's file format closely resembles its in-memory data structures, making it
	much harder to add functionality that requires keeping information around while
	retaining backwards compatability.
* Nightingale has its own mid-level memory management routines, involving structures
	called _heaps_. These must be "locked" at times to keep the Mac OS's own memory
	manager, with its fixed _handles_, from moving things around and leaving pointers
	behind. (This problem can be avoided to a great extent by using the macros in
	MemMacros.h, but a large amount of Nightingale code doesn't use them where it
	could. However, all new code should use them!)
* The Macintosh toolkit of the time -- later dubbed "Carbon" -- was designed primarily
	for use from Pascal, and it expects strings in Pascal's format of a length byte
	followed by at most 255 characters. Thus Nightingale frequently converts strings
	from C to Pascal format and vice-versa.

NB: Everything in this document except the description of source-code header files
applies to versions of Nightingale at least as far back as v. 2000.

Also see the important source-code header files themselves:

	precomp includes
		NDocAndCnfgTypes.h: major structs including DOCUMENTHEADER, SCOREHEADER,
					Document, Configuration
		NBasicTypes.h & NMiscTypes.h: structs and defines for our basic data types plus
					important constants, enums, and macros
		NObjTypes.h: structs and defines for most of the data structures in the object list
					(objects and subobjects)
		NLimits.h: most limits, i.e., maximum and minimum values
		defs.h: important #defines other than memory mgmt and the above, plus a few limits
	
	application includes
		MemMacros.h: macros for the memory-management layer
		vars.h: global variables and tables including the symbol table (symtable), the
					object-properties table (objTable), staff sizes, and subObjLength[].

Tech Note #4, "Nightingale Files and Troubleshooting Files Nightingale Can’t Open",
describes the file format in detail.
 
The voice-mapping table -- for the Document _*doc_, _doc->voiceTab[]_ -- is described in
comments at the beginning of VoiceTable.c.

---------------------------------------------------------------------------------------

About Nightingale File Structure

Every Nightingale file begins with a Document header and a Score header, followed by
the content. Files in “N105” format begin (offset and length are in bytes in base 10):

Offset	Length	Item
------	------	----
0		4		“N105”
4		4		Date/time file was written
8		72		Document header
80		2148	Score header
2228	2		LASTtype (always 25) (offset 2228 = 0x8B4)
2230	4		String pool length (in bytes) = SL
2234	SL		String pool, containing all the character strings
2234+SL var.	Heaps, containing the content of the score

As of this writing, an “N106” format is under development. In terms of the details above,
it’s identical except bytes 0 to 3 are "N106", and the length of the Score header is
2492. Thus LASTtype has offset 2572 = 0xA0C, and the string pool has offset 2578 = 0xA12.

The score header contains many, many fields; here's a kind of overview.

							(..."N106" format...)
Offset			Length		Offset			Length	Item
------			------		------			------	----
80 = 0x50		12			80 = 0x50		12		various: <headL>, etc.
92 = 0x5C		256			92 = 0x5C		256		<comment>
348 = 0x15C		42			348 = 0x15C		60		various: <noteInsFeedback>, etc.
390 = 0x186		540			408 = 0x198		660		15 TEXTSTYLE records of 36/44 bytes each
930 = 0x3A2		714			1068 = 0x42C	714		<nfontsUsed>, <fontTable>, <musFontName>
1644 = 0x66C	32			1782 = 0x6F6	36		various: <magnify>, etc.
1676 = 0x68C	472			1818 = 0x71A	674		<spaceMap>
2148 = 0x864				2492 = 0x9BC			just after the end (total length)

---------------------------------------------------------------------------------------

About Nightingale Data Structures

Nightingale's main data structure is what is called an _object list_. For each open
file, there's a "main" object list and one for the score’s Master Page. In addition,
there's one for the Undo command and one for the clipboard. An object list is a
doubly-linked list of Nightingale objects. Most object types, e.g., HEAD, MEASURE, and
SYNC, have singly-linked lists of subobjects attached to them; a few, e.g., TAIL and
PAGE, have no subobjects. For SYNCs, by far the most important and complex objects, the
subobjects are notes and rests. There’s also one type of subobject, MODNRs (note/rest
modifiers), that doesn’t have its own object type: instead, a list of MODNRs can be
attached to a SYNC subobject. Every Nightingale file contains exactly two object lists:
one for the score proper, and a very short one for the score’s Master Page.

Not surprisingly, every object list must begin with a HEAD and end with a TAIL, but
there are many other rules about the order in which objects can appear. For one thing,
PAGEs, SYSTEMs, STAFFs, and MEASUREs have a heirarchic relationship, and each of them
must follow whatever contains them. And every DYNAMIC, GRAPHIC, and SLUR affecting a
note must precede the SYNC containing the note. Unfortunately, as far as I know, there's
no explicit statement anywhere of all the rules, but many of them are implemented in or
discussed in the comments on the debugging functions DCheckHeirarchy() and
DCheckJDOrder(). See also Tech Note #4, "Nightingale Files and Troubleshooting Files
Nightingale Can’t Open".

---------------------------------------------------------------------------------------

Object Types (from NTypes.h). The sizes correspond to Nightingale versions up to and
including 5.8.x, and file format 'N105'.

Type	Name			Object size in files (it's always 46 in RAM) (- = type has no objs)
							Subobject size  (- = type has no subobjs)
									Contents/comment
----  -----------			---	----------------
0		HEADERtype		24	62		part info
1		TAILtype		24	-
2		SYNCtype		26	30		note, rest
3		RPTENDtype		32	6		D.C., D.S., etc.
4		PAGEtype		38	-

5		SYSTEMtype		44	-
6		STAFFtype		30	50		staff
7		MEASUREtype		46	40		measure
8		CLEFtype		24	10		clef
9		KEYSIGtype		24	24		key signature

10		TIMESIGtype		24	12		time signature
11		BEAMSETtype		26	6		Sync
12		CONNECTtype		26	12		brace, bracket, line
13		DYNAMtype		30	12		dynamic (only 1 subobj/object)
14		MODNRtype		-	6		note/rest modifier

15		GRAPHICtype		44	6		text, lyric, rehearsal mark, line (only 1 subobj/object)
16		OTTAVAtype		40	4		Sync
17		SLURtype		30	42		slur, tie (if a slur, only 1 subobj/object)
18		TUPLETtype		40	4		Sync
19		GRSYNCtype		24	30		grace note

20		TEMPOtype		38	-
21		SPACERtype		28	-
22		ENDINGtype		32	-
23		PSMEAStype		24	6		pseudo-measure: dotted barline, repeat bar that isn't
									a barline
24		OBJtype			46	46		size in RAM = sizeof(SUPEROBJECT); in a file, usually
									less, depending on type

---------------------------------------------------------------------------------------

Basic Data Structures (from NTypes.h)

typedef unsigned INT16 LINK;

typedef struct {
	Handle block;					/* Handle to floating array of objects */
	INT16 objSize;					/* Size in bytes of each object in array */
	INT16 type;						/* Type of object for this heap */
	LINK firstFree;					/* Index of head of free list */
	unsigned INT16 nObjs;			/* Maximum number of objects in heap block */
	unsigned INT16 nFree;			/* Size of the free list */
	INT16 lockLevel;				/* Nesting lock level: >0 ==> locked */
} HEAP;								/* sizeof HEAP = 16 bytes */

/* Macros in MemMacros.h depend on the positions of the first five fields of the
object header, which must not be re-positioned. In the future, this may apply to
other fields as well. */

#define OBJECTHEADER \
	LINK		right, left;		/* links to left and right objects */					\
	LINK		firstSubObj;		/* link to first subObject */							\
	DDIST		xd, yd;				/* position of object */								\
	SignedByte	type;				/* (.+#10) object type */								\
	Boolean		selected:1;			/* True if any part of object selected */				\
	Boolean		visible:1;			/* True if any part of object is visible */				\
	Boolean		soft:1;				/* True if object is program-generated */				\
	Boolean		valid:1;			/* True if objRect (for Measures, measureBBox also) valid. */ \
	Boolean		tweaked:1;			/* True if object dragged or position edited with Get Info */ \
	Boolean		spareFlag:1;		/* available for general use */							\
	char		ohdrFiller1:2;		/* unused; could use for specific "tweak" flags */		\
	Rect		objRect;			/* (.+#12) enclosing rectangle of object (paper-rel.pixels) */ 	\
	SignedByte	relSize;			/* (unused) size rel. to normal for object & context */	\
	SignedByte	ohdrFiller2;		/* unused */											\
	Byte		nEntries;			/* (.+#22) number of subobjects in object */
	
#define SUBOBJHEADER \
	LINK		next;				/* index of next subobj */								\
	SignedByte	staffn;				/* staff number. For cross-stf objs, top stf (Slur,Beamset) or 1st stf (Tuplet) */									\
	SignedByte	subType;			/* subobject subtype. N.B. Signed--see ANOTE. */		\
	Boolean		selected:1;			/* True if subobject is selected */						\
	Boolean		visible:1;			/* True if subobject is visible */						\
	Boolean		soft:1;				/* True if subobject is program-generated */

#define EXTOBJHEADER \
	SignedByte	staffn;				/* staff number: for cross-staff objs, of top staff FIXME: except tuplets! */

---------------------------------------------------------------------------------------

Object table (from vars.h)

OBJDATA objTable[] = {
	/*	objtype  justType	minEnt	maxEnt	objRectOrd */
	HEADERtype,	0,			2,			MAXSTAVES+1,False,
	TAILtype,	J_IT,		0,			0,			False,
	SYNCtype,	J_IT,		1,			255,		True,
	RPTENDtype,	J_IT,		1,			MAXSTAVES,	True,
	PAGEtype,	J_STRUC,	0,			0,			False,

	SYSTEMtype,	J_STRUC,	0,			0,			False,
	STAFFtype,	J_STRUC,	1,			MAXSTAVES,	False,
	MEASUREtype,J_IT,		1,			MAXSTAVES,	True,
	CLEFtype,	J_IP,		1,			MAXSTAVES,	True,
	KEYSIGtype,	J_IP,		1,			MAXSTAVES,	True,

	TIMESIGtype,J_IP,		1,			MAXSTAVES,	True,
	BEAMSETtype,J_D,		2,			127,		False,
	CONNECTtype,J_D,		1,			MAXSTAVES,	True,
	DYNAMtype,	J_D,		1,			MAXSTAVES,	False,
	MODNRtype,	0,			0,			0,			False,

	GRAPHICtype,J_D,		1,			255,		False,
	OTTAVAtype,	J_D,		1,			MAXINOTTAVA,True,
	SLURtype,	J_D,		1,			MAXCHORD,	False,
	TUPLETtype,	J_D,		2,			127,		False,
	GRSYNCtype,	J_IP,		1,			255,		True,
	TEMPOtype,	J_D,		0,			0,			False,
	SPACERtype,	J_IT,		0,			0,			True,	
	ENDINGtype,	J_D,		0,			0,			False,
	PSMEAStype, J_IT,		1,			MAXSTAVES,	True,	
	OBJtype,	J_STRUC,	0,			0,			False
};

---------------------------------------------------------------------------------------

Debugging Functions

/* Browser displays and handles interaction with a small window that lets the
user (a Nightingale programmer, presumably) prowl around in an object list.
tailL may be NILINK; in this case, the "go to tail" button will be inoperative,
but everything else will work as usual. */

void Browser(doc, headL, tailL)
Document *doc;  LINK headL, tailL;


/* Ask user what info they want and display/check it.  Returns False normally,
True if things are so badly screwed up that quitting immediately is desirable. */

Boolean DoDebug(label, showWind)
char	*label;						/* Identifying string to display */
Boolean	showWind;					/* Bring info display window to front? */


/* Dump the specified area as bytes in hexadecimal into the log file. NB: If <nPerLine> is
unreasonably large, this function can overflow <strBuf>!  */

void NHexDump(short logLevel,
				char *label,
				unsigned char *pBuffer,
				long nBytes,
				short nPerGroup,		/* Number of items to print in a group */
				short nPerLine			/* Number of items to print in a line */
				)


----------------------------------------------------------------------------------------

Results of "Display memory usage" on a New score in Nightingale 5.8.9:

  HEAD Heap: 4 in use (346 bytes each)
  SYNC Heap: 0 in use (30 bytes each)
  REPEATEND Heap: 0 in use (6 bytes each)
  STAFF Heap: 4 in use (50 bytes each)
  MEASURE Heap: 2 in use (40 bytes each)
  CLEF Heap: 2 in use (10 bytes each)
  KEYSIG Heap: 2 in use (24 bytes each)
  TIMESIG Heap: 2 in use (12 bytes each)
  BEAMSET Heap: 0 in use (6 bytes each)
  CONNECT Heap: 4 in use (12 bytes each)
  DYNAMIC Heap: 0 in use (14 bytes each)
  MODNR Heap: 0 in use (6 bytes each)
  GRAPHIC Heap: 0 in use (6 bytes each)
  OCTAVE Heap: 0 in use (4 bytes each)
  SLUR Heap: 0 in use (42 bytes each)
  TUPLET Heap: 0 in use (4 bytes each)
  GRSYNC Heap: 0 in use (30 bytes each)
  PSEUDOMEAS Heap: 0 in use (6 bytes each)
  OBJECT Heap: 0 in use (46 bytes each)
Size of *=8 DOCHDR=72 SCOREHDR=2148 *=2 strPool=306
		*=4 { heapHdrs=468 HeapsMem/File=2540/2294 } 
 TOTAL Mem/File=5552/5306

"Mem/File=xxx/yyy" means size in memory is xxx, in a file yyy.

NB: According to Finder on OS 10.5.8, the file size is actually 5984, about 600
bytes larger than the number given above.


-----------------------------------------------------------------------------------------

A Typical Heap Header, byte-by-byte

This is a Sync (note/rest) heap with room for 2313 = 0x0909 notes/rests.

This header, like all heap headers, takes 16 bytes. In hexadecimal:
01C3 3CA0 001E 0002 0894 0909 0607 0000

Offset
	Contents
0	01C3 3CA0	Handle block;					/* Handle to floating array of objects */
4	001E		INT16 objSize;					/* Size in bytes of each object in array */
6	0002		INT16 type;						/* Type of object for this heap */
8	0894		LINK firstFree;					/* Index of head of free list */
10	0909		unsigned INT16 nObjs;			/* Maximum number of objects in heap block */
12	0607		unsigned INT16 nFree;			/* Size of the free list */
14	0000		INT16 lockLevel;				/* Nesting lock level: >0 ==> locked */


A Typical Simple Note, byte-by-byte

This is an 8th-note F#5 (treble clef top line, MIDI notenum=78=0x4E); not in a chord,
beam, tie, slur, tuplet, or octave sign; no modifiers; play duration=228=0xE4 ticks;
On Velocity=75=0x4B; Off Velocity=64=0x40.

Every Sync subobject, whether note or rest, takes 30 bytes. In hexadecimal:
0000 0105 40EC 0000 0000 0150 0000 00E4 0000 4E4B 4010 0140 280B 0000 0000 

Offset
	Contents
	(SUBOBJHEADER:)
0	0000	LINK		next;			/* index of next subobj */
2	01		SignedByte	staffn;			/* staff number */
3	05		SignedByte	subType;		/* subType (l_dur): LG: <0=n measure rest, 0=unknown, >0=Logical (CMN) dur. code */
4	40		Boolean		selected:1;		/* (.+4) True if subobject is selected */
			Boolean		visible:1;		/* True if subobject is visible */
			Boolean		soft:1;			/* True if subobject is program-generated */
	(Everything else:)
			Boolean		inChord:1;		/* True if note is part of a chord */
			Boolean		rest:1;			/* LGP: True=rest (=> ignore accident, ystem, etc.) */
			Boolean		unpitched:1;	/* LGP: True=unpitched note */
			Boolean		beamed:1;		/* True if beamed */
			Boolean		otherStemSide:1;	/* G: True if note goes on "wrong" side of stem */
	    
5	EC		SHORTQD		yqpit;			/* LG: clef-independent dist. below middle C ("pitch") (unused for rests) */
6	0000	DDIST		xd, yd;			/* G: head position */
8	0000
10	0150	DDIST		ystem;			/* (.+10) G: endpoint of stem (unused for rests) */
12	0000	INT16		playTimeDelta;	/* P: PDURticks before/after timeStamp when note starts */
14	00E4	INT16		playDur;		/* P: PDURticks that note plays for */
16	0000	INT16		pTime;			/* P: PDURticks play time; for internal use by Tuplet routines */
18	4E		Byte		noteNum;		/* P: MIDI note number (unused for rests) */
19	4B		Byte		onVelocity;		/* P: MIDI note-on velocity, normally loudness (unused for rests) */
20	40		Byte		offVelocity;	/* (.+20) P: MIDI note-off (release) velocity (unused for rests) */
21	10		Boolean		tiedL:1;		/* True if tied to left */
			Boolean		tiedR:1;		/* True if tied to right */
			Byte		ymovedots:2;	/* G: Y-offset on dot pos. (halflines, 2=same as note, except 0=invisible) */
			Byte		ndots:4;		/* LG: No. of dots */
22	01		SignedByte	voice;			/* L: Voice number */
23	40		Byte		accident:4;		/* LG: 0=none, 1--5=dbl. flat--dbl. sharp (unused for rests) */
			Boolean		accSoft : 1;	/* L: Was accidental generated by Nightingale? */
			Byte		micropitch:3;	/* LP: Microtonal pitch modifier */
24	28		Byte		xmoveAcc:5;		/* G: X-offset to left on accidental position */
			Byte		merged:1;		/* temporary flag for Merge functions */
			Byte		filler:1;
			Byte		doubleDur:1;	/* G: Draw as if double the actual duration */
25	0B		Byte		headShape:5;	/* G: Special notehead or rest shape; see list below */
			Byte		xmovedots:3;	/* G: x-offset on dot position (4=normal??) */
26	0000	LINK		firstMod;		/* LG: Note-related symbols (articulation, fingering, etc.) */
28	00		Byte		slurredL:2;		/* True if endpoint of slur to left (extra bit for future use) */
			Byte		slurredR:2;		/* True if endpoint of slur to right (extra bit for future use) */
			Byte		inTuplet:1;		/* True if in a tuplet */
			Byte		inOctava:1;		/* True if in an octava */
			Byte		small:1;		/* True if a small (cue, etc.) note */
			Byte		tempFlag:1;		/* temporary flag for benefit of functions that need it */
29	00		SignedByte	fillerN;

