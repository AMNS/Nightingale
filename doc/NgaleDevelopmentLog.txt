DAB'S NIGHTINGALE DEVELOPMENT LOG for March 2013 and after

(Most of the files in my Ngale Carbon code base have last modification dates of April or
May 2012; a few files are 2 June 2012, and it looks like that's the last source code I
share with David Gottlieb. This document describes all changes to my own code base since
then, the earliest of which are dated 4 March 2013. It also describes initial work on the
"new" Cocoa Ngale -- I think.)

* CoreMidiUtils.cp: make DebugPrintf output more readable.
* Debug output is overwhelmed by messages of the form
      pL=1461: rect.l=288,r=294 paper.l=-20860,r=-20248
	...for every note (Sync?) played. Those messages shouldn't be written by default!! 
	Affects MIDIPlay.cp: #define PLDEBUG as 0.
* Fix horrible and dangerously confusing kludge for turning notehead graphs off/on:
	add #define for NOTEHEAD_GRAPH_WIDTH; make doNoteheadGraphs a global. Affects
	defs.h, vars.h, DrawNRGR, InitNightingale, SpaceTime.
* Initialize.cp: display all CNFG field values & errors detected in them in log file;
	if config.whichMIDI is illegal, set it to a legal value (like all other fields).
* SpaceHighLevel.cp: improve debug print stmts.
* Added "Set tempo to visible/invisible" to QuickChange. Affects Set.h, SetCommand.cp,
	Nightingale.rsrc.
* Increased the minimum legal value of config.lineLW from 1 to 5.
* Added back into the declaration of the Configuration struct the _noteScanEpsXD_ field,
	which had somehow been deleted, resulting in misalignment of fields read in,
	nonsensical complaints about illegal CNFG values, ledger lines too long, etc.
	Affects applicationTypes.h .
* Debug output for playback is excessive; disable some. Affects MIDIPlay.cp: #define
	CMDEBUG as 0.
* Remove code to check expiration date. Affects InitNightingale

===================================================================================

* Have Xcode 3.2 running on my MacBook (OS 10.6.x); Xcode 2.5 on my G5 (OS 10.5.x).
	What version was used for recent release versions? David G. says Xcode 2.5!

With a 2008 copy of code I had lying around:

* On MacBook: choose 10.5 Release as Active SDK & Configuration. Active Architecture is set
to ppc, & it looks like there's no way to change it. ??  Anyway, Clean (w/ both options
checked), Build => tries to compile 175 files; fails with:
	10,327 warnings
		99% for deprecated stuff, plus a few malformed '#pragma options', etc.
	149 fatal errors
		all are "Jump to case label", "Crosses initialization of" ...

Redo: Build (w/o clean) => tries to compile 15 files; fails with 1703 warnings, 149 errors.

/Developer/usr/bin/gcc-4.2 -x c++ -arch ppc -fmessage-length=0 -pipe -Wno-trigraphs -fpascal-strings
	-Os -mdynamic-no-pic -isysroot /Developer/SDKs/MacOSX10.5.sdk -mtune=G4 -fvisibility=hidden
	-fvisibility-inlines-hidden -mmacosx-version-min=10.5 -gdwarf-2
	-I/Users/donbyrd/NgaleDev/ngale2xcodeSummer08/build/Nightingale.build/Release/Nightingale.build/Nightingale.hmap
	-F/Users/donbyrd/NgaleDev/ngale2xcodeSummer08/build/Release -I/Users/donbyrd/NgaleDev/ngale2xcodeSummer08/build/Release/include
	-I/Users/donbyrd/NgaleDev/ngale2xcodeSummer08/build/Nightingale.build/Release/Nightingale.build/DerivedSources/ppc
	-I/Users/donbyrd/NgaleDev/ngale2xcodeSummer08/build/Nightingale.build/Release/Nightingale.build/DerivedSources
	-c /Users/donbyrd/NgaleDev/NgaleXcodeApril2012/src/CFilesBothEd/EssentialTools.cp
	-o /Users/donbyrd/NgaleDev/ngale2xcodeSummer08/build/Nightingale.build/Release/Nightingale.build/Objects-normal/ppc/EssentialTools.o


* On G5: choose Release as Active Configuration, Build => fails with 8256 warnings,
1 error ("pbxcp: EndianUtils.h: No such file or directory")

To get started, I just want to get thru compilation quickly; maybe set compiler options
to be less picky? But _how_ do I set them? I don't see any such thing in Xcode! ??
Another idea: get a version of the code that's known to compile -- hey, maybe even the
latest from David or Charlie Rose! -- and compiler settings for it. Obviously the way to
go, but see what I can do in the meantime w/ code I have.

-----------------------------------------------------------------------------

24 April

For the moment, try to handle the only compile error on G5. Start with a different 2008
copy of code, Ngale19Oct2008: it has changes to 34 files in both, plus 4 new files,
incl. EndianUtils.h. Most of its differing files are dated May 2008, a few (e.g.
CoreMidiUtils.cp) August 2008. Code changes include what looks like remembering the
MIDI device setting :-) and adding to QuickChange setting beam thickness & dynamic size.

Clean Nightingale (w/ options), build => nope; now it gets 2 errors in File.cp. ??

-----------------------------------------------------------------------------

25 April

David sez:

> I have lately been compiling ngale with xcode 2.5 on a Macbook Pro running Leopard.
> Ngale runs fine on Snow Leopard, which will only run on intel macs.

Obviously we need to compile with Xcode 3.x soon, so all 149 errors of those need to be
dealt with, but we can get off the ground first! Concern about the Architecture option is
premature; generating PPC code is fine for now.

Back to compiling on my G5.
Have 2 compilation errors in File.cp: lines 136 & 1127. Both involve calls to
fix_end(param); one or both error messages (I can't tell!) are " 'fix_end' was not
declared in this scope".  In EndianUtils.h (NB by Michel) are two #defines for
fix_end(v), and numerous other calls to fix_end in File.cp are OK. What's wrong with
these??

Uh-oh: it looks like it stopped _trying_ to compile w/ File.cp (unlike Xcode 3.2 on my
MacBook)! Yep: there's a Preference "Continue building after errors", and it's not
checked, so maybe a lot more errors to be found  @#%&(#)%$$#% .  Check that Preference,
Build (132 files to go)...

Let's redo the whole thing. Quit & relaunch Xcode; Clean (w/ both options checked); 
compiling 175 files => "Build failed (6 errors, 8278 warnings)"

The errors are all " 'fix_end' was not declared in this scope":
1 in File.cp
3 in HeapFileIO.cp
1 in StringPool.cp

??

The Xcode C compiler is gcc. I still don't see any way to set compiler options (to make
it less picky, etc.) in Xcode, either 2.5 or 3.2; maybe directly via settings of gcc's,
maybe in a dot file it looks at -- should say in the GCC manual, at least! But CER should
know.

-----------------------------------------------------------------------------

Install Git & GitHub on G5... Following the instructions at http://help.github.com/mac-set-up-git/ :

First: Download and Install Git.
Git Installer 1.6.5 - OS X - Leopard - Universal Binary appears to be the most recent version
that runs on a PPC. On my G5, download it (checksum de241004d35a9ef96e1339b78107d12b1c1fbd79).
Unpack & run it => claims to have worked OK.

(NB: At Michel S.' behest, I installed Git 1.5.x on one of my computers in Feb. 2008 --
probably the G5: on it, /opt/local/bin contains ca. 140 files of form "git*, all created
on 15 Feb. 2008 :) , while on the MacBook, there's not even a /opt directory. BUT most or
all of those files are binaries of utilities, and most or all are Intel, not PowerPC! ??
Cf. NgalePort_Feb2008.txt)

Next: Set Up SSH Keys.
1. Check for SSH keys. I have some, but only in file known_hosts; I don't have any id_rsa*
	files.
2. Backup and remove existing SSH keys. ??They only want you to do this for id_rsa* files,
	so it seems I don't have anything to do here.
3. Generate a new SSH key. ??I can't do it: 
	DonDualG5:.ssh donbyrd$ ssh-keygen -t rsa -C "donbyrd@indiana.edu"
	-bash: /opt/local/bin/ssh-keygen: Bad CPU type in executable

I suspect I could find ssh-keygen for PPC on the Web, but is that really what I should do?

etc. etc...  I give up.

Install Git & GitHub on MacBook: all OK!

-----------------------------------------------------------------------------

- (NDAB, "") Respacing bug: in some situations, Respace leaves way too much space after
a dotted note/chord. E.g., w/ long note on downbeat on one voice on a staff, adding
note/rest to a 2nd voice on a staff, maybe as if the new note/rest follows the long note
(I think). E.g., open respaceBug_5LTC.ngl; in m. 2, insert note in voice 2 on bottom
staff => adds lots of space before it. ?? I can't reproduce this starting w/ New score.
But compare FanfareRESPACE_BUG.ngl (dotted chords get way too much space) to the very
similar FanfareRESPACE_NOBUG.ngl (dotted chords get a reasonable amount of space)! Could
it somehow just be caused by the magnified view? No.

(18 June)

Cf. FanfareRespaceBug.ngl (has the bug) to the apparently-identical FRBNew_NoBug.ngl (no bug)!
It looks like it's an issue for _old files_ only. ?!?

(26 March 2013)

SpaceHighLevel.c looks like where this is happening. If I #define SPACEBUG, then hold down
shift & option while respacing, routines there (ConsidIPWidths, ConsiderWidths, Respace1Bar,
etc.) will show copious debug info!

(1 April 2013)

The difference between the newly-simplified FanfareRESPACE_BUG.ngl and FanfareRESPACE_NOBUG.ngl
is obvious: the former has Graphics (strings) and dynamics, and the latter doesn't -- BUT the
difference between the _really_ simple FanfareRespaceBug.ngl & FRBNew_NoBug.ngl isn't at all
obvious: neither has Graphics or dynamics. Each consists of the same 3 notes (dotted qtr,
dotted qtr, qtr; none have accidentals) barline. ?? @#$%#$%$()_%#%

Open FanfareRespaceBug; Respace m. 1 at 44%:
(see RespaceBug.txt for lotsa details)

(4 April 2013)

Sigh. The bug resulted from my kludge to test notehead graphs, invoked when Show Duration
Problems was selected! Oh well. Fixed, and notehead-graphs code cleaned up.

-----------------------------------------------------------------------------

- (New in "", BUT an early OS X version had a _very_ similar problem!) Launch built
Ngale on MacBook => computer seems to be hung for a very long time -- several minutes;
then all is fine! Launching Apple's Rosetta PowerPC simulator alone couldn't possibly
make things _that_ bad, but could it be partly due to launching Rosetta? Even that seems
unlikely, since I literally haven't seen it in years; for info about earlier problems of
this kind, see comment of Dec. 2007 in NgaleXUserProblems+Annoyances2008.txt, of July
2008 in Ngale_XcodeProblems.txt.

Test on my MacBook, 6 May: Launch at 9:18:00; menubar clock stopped (with arrow cursor)
at 9:18:17; at (actual) 9:21:40, beachball appeared, disappeared, reappeared several
times;  at 9:24:10, _started_ to get back to normal (menubar clock updated erratically,
could switch apps); at 9:27, dot appeared in dock next to Ngale icon & could see palette
frame); at 9:28, could open New score. On my G5: Ngale launches & is ready to use instantly.

Re-test on MacBook: Launch at 14:29:00; splash screen appears at ca. 14:32:50; dot in
dock at 14:33:40; at 14:35, ??  Well, it's not at all clear this is worthwhile,
debugging problems with a PPC build on an Intel machine, when we pretty much want to
forget the PPC anyway -- but PPC is the only choice for Active Architecture in Xcode 3.2
on my MacBook. ?!?

-----------------------------------------------------------------------------

9 May 2012

Set SDK to 10.5, Clean, build => OK, w/ 7152 warnings. Launch at 20:33:25 => computer
seems hung w/ menubar clock frozen; splash screen appears at 20:35:20, disappears again;
palette appears at 20:36:25; at 20:37:xx, can try to use the Open command -- but it takes
a couple of min. to open a tiny score. ?!?

-----------------------------------------------------------------------------

Date:  	Sat, 12 May 2012 23:20:38 -0400 [05/12/2012 11:20:38 PM EDT]
To:  	charles.e.rose@comcast.net...
Subject:  	Re: [launching Ngale freezes the computer]

I just tested this after rebooting, and Ngale launched in a reasonable amount of time. I
don't know why it's so bad under other circumstances, but it looks like this is probably
not a serious problem after all!... 

-----------------------------------------------------------------------------

15 May

Date:  	Tue, 15 May 2012 11:24:34 -0400 [11:24:34 AM EDT]
From:  	"Byrd, Donald A." <donbyrd@indiana.edu>
To:  	Geoff Chirgwin <geoff@chirgwin.com>
Cc:  	"Gottlieb, David" <ngale109@comcast.net>
Subject:  	Re: [Have] Xcode 4.x for Snow Leopard, but...

Downloaded and installed... However, when I open the project, it says "1 target, missing
base SDK" (of course it was pointing to the 10.4 SDK), then says it has no files. Well,
I assumed the project would be in the GitHub repository, so I threw away the project
file. Then -- in Terminal -- I went to my root directory, Nightingale, and did "git
pull"; that deleted 12 files, I think the ones you removed last week, but didn't give me
a project file. Next, I'd kept 3.2.6 around by moving it from Developer > Applications
to Developer > Xcode3p2p6, so it seems I ought to be able to use that to change the base
SDK, but 3.2.6 wouldn't run from that location and I'd rather not screw around any more.
Can you send me a 4.2-compatible project? Or, shouldn't it be in the repository? Put it
there and I'll git it.

-----------------------------------------------------------------------------

22 May

Set up Xcode ala RestorePPC+10p4+p5_SDKSupport2Xcode4.html, so 4.2 supports targeting OS 10.4
& 10.5, GCC 4.0, etc.:

+ Uninstall Xcode
+ Step 1: Install Xcode 3.2 in new top-level directory Xcode3
+ Step 2: Install Xcode 4.2 in default location
+ Step 3: Restoring 10.4/10.5 SDK Support
- Step 4: Restoring GCC 4.0 Support
	?? "cd: /Developer/usr/libexec/gcc/powerpc-apple-darwin10: No such file or directory". ??
- Step 5: Restoring PPC Support for GCC 4.2

-----------------------------------------------------------------------------

Early June

Nightingale_Prefix.pch currently #define's: TARGET_API_MAC_CARBON,
	TARGET_API_MAC_CARBON_FILEIO, TARGET_API_MAC_CARBON_MIDI, TARGET_API_MAC_CARBON_MACHO ?? .
	For the time being, assume they're always #define'd.
USE_GRAFPORT, USE_PROFILER, COPY_PROTECT, LIGHT_VERSION are currently _not_ #define'd; for
	now, assume they're never #define'd.

Code review status:
* Done with all thru the last of 30 May. (Assume "Merge branch 'RemoveMidiCruft'" is okay
w/o reviewing.)
* Done with 7 June
* Done with 10 June

-----------------------------------------------------------------------------

March-April 2013

NB: Unless otherwise mentioned, all development below was done with Xcode 2.5 on my G5,
running OS 10.5.8.

Running Ngale inside Xcode, I can again see (and copy/save) DebugPrintf output
via Xcode's Run Log! Hooray!

+ Change max. tempo from 600 to 1200 BPM. Affects defs.h

+ Print status of reading Prefs file, checking CNFG, etc. Affects Initialize.cp

+ Advance expiration date by a year. Affects InitNightingale.cp

+ Don't print info on every Sync as it's played. Affects MIDIPlay.cp

+ Display values of all CNFG fields in log; if any are bad, list all bad ones in error message.
Affects Initialize.cp

+ Fix "Respace sometimes leaves way too much space, especially after a dotted
note/chord" bug. Affects vars.h; DrawNRGR.c, InitNightingale.c, SpaceTime.c: add global
<doNoteheadGraphs> to say whether to display noteheads as tiny graphs; defs.h:
declaration of <NOTEHEAD_GRAPH_WIDTH>.

+ Minor cleanup. Affects SpaceHighLevel.c

-----------------------------------------------------------------------------

20 April - 13 Aug.

+ (G5B) Ledger lines (both above & below staff) are always the length for chords
w/ 2nds, i.e., they go much too far on the "wrong" side of the stem if there aren't
2nds. I don't think I'd seen this bug until the last month or two, i.e., it's not in
NightingaleDAB or the "official" versions, but only in versions built recently on my G5.
The CNFG ledgerLLen value is 48; could that be the cause? No: ledgerLOtherLen controls
this. Besides, 48 isn't just a legal value, it's the value Ngale sets to replace illegal
values -- e.g., the value of 20 in the default Nightingale Devel Prefs! 32 is the min.
legal value; it's in 32nds of space between staff lines, so 48 = 1+1/2 spaces is about
what it _should_ be. ??

!! ledgerLOtherLen = 48, the same as ledgerLLen: that's almost certainly the problem! --
in fact, 20 might be about right for this. What has it always been?? It looks about 1/2
space => ledgerLOtherLen = 16 -- or maybe 20 :-) . RESOLUTION: This is caused by the
default Devel Prefs (in ~/Library/Preferences/Nightingale\ Devel\ Prefs), which has
ledgerLLen = 20 and ledgerLOtherLen = 48; it should be the other way around. It also has
illegal values for whichMIDI (=4) and courtesyAccSize (=8). NEED TO FIX. Specifically
("In rsrc" = Nightingale.rsrc of e.g. 30 Apr. 2012):

ofst	Item		Now	In		Should
						rsrc	be
---------------------------------------------
??	ledgerLLen		20	48		48
??	ledgerLOtherLen	48	12		20
??	whichMIDI		4	??		0 -- MIDISYS_NONE; prob. want 1 ??IS THIS MIDISYS OR MIDIDR?
??	courtesyAccSize	8	??		>=20; prob. want 100	??Rezilla doesn't seem to list!

Ah-hah! Resorcerer shows a field at offset 173, just after octaveNumSize, as "Open
NoteScan File tolerance for combining subobjects"; it's followed by lineLW. But Ngale's
config struct has nothing about NoteScan tolerance -- it goes directly from octaveNumSize
to lineLW. Result: every field after that is off by one byte!!

-----------------------------------------------------------------------------

Early Aug.

??For CNFG #128, Rezilla shows about 159 fields; Initialize.cp checks only 100, and
comments claim there are only a few uncheckable ones! What about the other 50+ fields?
They include:
	slashGraceStems
	bracketsForBraces
	paperRect
	toolsPosition
	origin
	powerUser
	dblBarsBarlines
	disableUndo, assumeTie, delRedundantAccs, strictContin, turnPagesInPlay
	earlyMusic
	chordSymDrawPar, endingHeight, drawStemlets, noTripletBias
	ignoreRecVel
	tempoMarkHGap
	trebleVOffset, cClefVOffset, bassVOffset
	...and lots more
	
Many of these, probably most, could be checked -- and ALL of their values could be
displayed, of course.

-----------------------------------------------------------------------------

8-10 June

- Both Sonata and BlueNotz on both my MacBook and G5 fail to display the "ff" dynamic on
screen; change the font or double-click the "ff" and change to another dynamic => it
appears. Exception: "ff" _is_ visible with Sonata in some very small displayed sizes,
e.g., staff size 5 at magnifications 38% & 50% only! (It's never visible with BlueNotz,
as far as I can see.) In every other respect including PostScript printing, "ff" behaves
fine! It's no problem in Briard. All other dynamics display OK in all
fonts/sizes/magnifications. David G. sez: "It works as it should in v.5.2.6, i.e. pre
5.3.x. I went as far  back in 5.3 as 5.3.0b4 of September 2008, and the bug was there."
So, what changed between 5.2.6 and 5.3? If the complete source code for both is available
this might not be hard to fix!

Non-hairpin dynamics are drawn in DrawObject.c/DrawDYNAMIC; it has helper function
DrawUtils.c/GetDynamicDrawInfo.

Add to DrawDYNAMIC		DebugPrintf("DrawDYNAMIC: glyph=%c\n", glyph);
Invisible_ff_bug.ngl contains:
	LINK	CHARCODE	WHAT
	10		112			"p" attached to...
	11		207			quarter note
	12		196			"ff" attached to...
	13		207			quarter note

in staff size 1, using Sonata. Open it and draw several times at diferent sizes/magnifs. =>

	DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=\304\304DrawDYNAMIC: glyph=p
	DrawDYNAMIC: glyph=

Why is \304 repeated and w/o newline? I dunno. Anyway,
Change to		DebugPrintf("DrawDYNAMIC: glyph=%c pL=%d\n", glyph, pL);
output for Invisible_ff_bug.ngl now, drawing it twice:

	DrawDYNAMIC: glyph=p pL=10
	DrawDYNAMIC: glyph=\304 pL=12
	DrawDYNAMIC: glyph=p pL=10
	DrawDYNAMIC: glyph=\304 pL=12
	
Output for DynamVisibleTest.ngl is:
	DrawDYNAMIC: glyph=\354 pL=11
	DrawDYNAMIC: glyph=\304 pL=13
	DrawDYNAMIC: glyph=f pL=15
	DrawDYNAMIC: glyph=F pL=17
	DrawDYNAMIC: glyph=\270 pL=20
	DrawDYNAMIC: glyph=\271 pL=22
	DrawDYNAMIC: glyph=p pL=24
	DrawDYNAMIC: glyph=P pL=26
	DrawDYNAMIC: glyph=S pL=29

Add more to the DebugPrintf. Output for Invisible_ff_bug.ngl at 100%:
	DrawDYNAMIC: glyph=p pL=10 xp=153 yp=114 size=24 reallyDraw=1
	DrawDYNAMIC: glyph=\304 pL=12 xp=182 yp=115 size=24 reallyDraw=1

...at 75%:
	DrawDYNAMIC: glyph=p pL=10 xp=115 yp=85 size=16 reallyDraw=1
	DrawDYNAMIC: glyph=\304 pL=12 xp=136 yp=87 size=16 reallyDraw=1

...at 50%:
	DrawDYNAMIC: glyph=p pL=10 xp=77 yp=57 size=12 reallyDraw=1
	DrawDYNAMIC: glyph=\304 pL=12 xp=91 yp=58 size=12 reallyDraw=1

Nothing suspicious there! Change to staff size 5, still at 50%:
	DrawDYNAMIC: glyph=p pL=10 xp=69 yp=44 size=7 reallyDraw=1
	DrawDYNAMIC: glyph=\304 pL=12 xp=78 yp=44 size=7 reallyDraw=1

Still nothing suspicious (and ff is now visible, as expected). Revert file; switch font
to Briard, at 100% =>
	DrawDYNAMIC: glyph=p pL=10 xp=153 yp=114 size=24 reallyDraw=1
	DrawDYNAMIC: glyph=\304 pL=12 xp=182 yp=115 size=24 reallyDraw=1

Exactly the same as with Sonata (and ff is now visible, as expected). @#%&(*)$%${?!?

DrawDYNAMIC uses DrawUtils/DrawMChar to actually draw the char.  DrawMChar is pretty
messy, e.g., it sometimes uses an offscreen bitmap, so it's not hard to believe it's the
culprit... But apparently not. ????

The inconsistency across staff sizes is most likely because the problem occurs
with some screen font sizes and not others -- assuming "screen fonts" are still being
used!


-------------------------------------------------------------------------------

3 July

- Files often seem to forget their MIDI playback setting, so when I try to play, it
either gives the "unable to play score, because a MIDI device isn't selected" error
message, or (much more often) acts as if it's playing for a split second but plays
nothing. Setting DLS_MIDI Controller for all parts fixes; but saving and re-opening
the file after that changes nothing. This is a well-known, long-standing bug. I
think it happens much more (or only?) with files created years ago, regardless of
how much they've been edited recently.

First, what does setting DLS_MIDI Controller actually do? The "Part MIDI Settings"
dialog is handled by Menu.c/EditPartMIDI, which calls InstrDialog>PartMIDIDialog or
CMPartMIDIDialog (which does almost nothing but call PartMIDIDialog).

Playing is handled by MIDIPlay.c/PlaySequence

-------------------------------------------------------------------------------

9 Aug. ff.

It's time to add to QuickChange "Set tempo M.M. visibility to visible/invisible"!
...Done. Affects .rsrc: add "M.M. visibility" to Tempo popup; SetUtils.c: add
SetSelTempoVisible; SetCommand.c: improve description of how to add features :- ) ;
various.

-------------------------------------------------------------------------------

29 Aug.

Want to make windows for newly-opened files wider: at least full page width instead
of the current annoying width of ca. 560 pixels -- at 100% for US Letter pages,
about 9/10 the width! Where is this set? Doesn't seem to be in the config.

OpenFile() is called only from BuildDocument (in Documents.cp).  BuildDocument()
declares

	WindowPtr w = doc->theWindow

and does

	GetWindowPortBounds(w,&r);

BuildDocument is called from DoOpenDocument (in Documents.cp). ??

(21 July 2015

Got it! In WIND resource 2000, just change right bound from 620 to 690.)
 
-------------------------------------------------------------------------------

1-2 Nov. *** 2014 *** ;  11 Aug.- 15 Sept. *** 2015 ***

Tempo changes in exported MIDI files are often ignored -- e.g., 6End1stMvmt.ngl of my
violin concerto has 13 tempo marks. The first 6 or so seem to be there; the others,
starting at m. 5-6 (ca. 10-12 sec. in) not. In 1LentoTheme, they're OK until about m.
101 (4 min. in), i.e., the first 5 or so! Playing inside Ngale, all tempo changes are
always followed. ?? Evidence of the bug: playback via QuickTime Player; confirmed by
Importing the MIDI file back into Ngale. Output from DebugPrintf's for 6End1stMvmt.ngl
starts:

MThd len=6 format=1 nTracks=5 timeBase=480
lastEvent=50353
mergeTabSize=32767 oneTrackTabSize=32767
 track=1 time=0 METAEVENT type=0x51
 track=1 time=0 METAEVENT type=0x58
 track=1 time=1914 METAEVENT type=0x51
 track=1 time=5754 METAEVENT type=0x51
 track=1 time=6714 METAEVENT type=0x51
 track=1 time=7674 METAEVENT type=0x51
 track=1 time=12432 METAEVENT type=0x51
 track=1 time=12432 METAEVENT type=0x51
 track=1 time=15360 METAEVENT type=0x58
 track=1 time=16800 METAEVENT type=0x58
 track=1 time=33137 METAEVENT type=0x3
cStart/StopTime=0/50400 quantum=120 tripBias=-100 tryLev=21 leastSq=0 timeOff=0

There are 7 tempo metaevents (type=0x51). The first 5 are each at 6 less than the
expected times; the 6th and 7th are at the identical time, much too late. Cause: In
MIDIFSave.cp, WriteTiming() gives a Tempo change the latest end time of any note
preceding the one the Tempo is attached to (via LastEndTime() ); in this case, a
preceding note is tied forward for a couple of measures! What to do? Why did we ever
write the code this way instead of just using the onset time of the note the Tempo is
attached to?? NB that playback inside Ngale seems to work perfectly!; how about making
Export MIDI File do things the same way? Cf. MIDIPlay.cp > PlaySequence(). It uses a
table built by MIDIUtils.cp: MakeTConvertTable(); try using that in Export MIDI File?
Probably not, but use its logic for finding the Tempo's time => seems to still have
problems. Output from DebugPrintf's for importing the MIDI file of 6End1stMvmt.ngl now
starts:

MThd len=6 format=1 nTracks=5 timeBase=480 (qtrNTicks=480)
lastEvent=50353
mergeTabSize=32767 oneTrackTabSize=32767
 track=1 time=0 METAEVENT type=0x51 (TEMPO)
 track=1 time=0 METAEVENT type=0x58
 track=1 time=1920 METAEVENT type=0x51 (TEMPO)
 track=1 time=5760 METAEVENT type=0x51 (TEMPO)
 track=1 time=6720 METAEVENT type=0x51 (TEMPO)
 track=1 time=7680 METAEVENT type=0x51 (TEMPO)
 track=1 time=8640 METAEVENT type=0x51 (TEMPO)
 track=1 time=9600 METAEVENT type=0x51 (TEMPO)
 track=1 time=15360 METAEVENT type=0x58
 track=1 time=16800 METAEVENT type=0x58
 track=1 time=16800 METAEVENT type=0x51 (TEMPO)
 track=1 time=19200 METAEVENT type=0x58
 track=1 time=21120 METAEVENT type=0x58
 track=1 time=23520 METAEVENT type=0x58
 track=1 time=26400 METAEVENT type=0x58
 track=1 time=27360 METAEVENT type=0x51 (TEMPO)
 track=1 time=28800 METAEVENT type=0x51 (TEMPO)
 track=1 time=30240 METAEVENT type=0x51 (TEMPO)
 track=1 time=30720 METAEVENT type=0x51 (TEMPO)
 track=1 time=31200 METAEVENT type=0x51 (TEMPO)
 track=1 time=31200 METAEVENT type=0x58
 track=1 time=50352 METAEVENT type=0x2f
cStart/StopTime=0/50400 quantum=120 tripBias=-100 tryLev=21 leastSq=0 timeOff=0

This shows all 13 tempo metaevents, and the times are all correct! Play the MIDI file
back via QuickTime => it sounds correct; duration = 54.58 sec. Play the original back in
Ngale => duration = ca. 54.45 sec. Looks like MIDI file export finally handles tempo
changes properly!

-------------------------------

Early code changes for the above:
MIDIPlay.cp: reword DebugPrintfs; disable some
MIDIFSave.cp: WriteTiming(): add DebugPrintf
MIDIFOpen.cp: comment out PUBLIC_VERSION_1 to enable debug prints; do debug prints
if shift & control keys are down instead of shift & option (to make it possible to
get debug prints from this module but avoid the voluminous output from rhythm
conversion)

-------------------------------------------------------------------------------

23 Mar. *** 2015 ***

Get rid of the nonsensical statement about duration problems Score Info always gives
following its correct statement about duration problems.

ScoreInfo.c: ScoreInfo(): remove two redundant lines of code just before call to
HasMidiMap().

-------------------------------------------------------------------------------

31 Mar.-3 Apr.

Changes to Nightingale.rsrc:
*	Change "Midi" to "MIDI" in the "Midi Map" menu command, the MIDI Map dialog, and
	several error messages
* Reduce size of the "MIDI Modifier Effects" dialog
* Reduce size of the "Change Dynamic To" dialog
* Remove phony politeness -- the word "Please" -- from various dialogs

Increase max. play duration allowed in Set Duration dialog from 300% to 500%, mostly to
handle the "logical 8th note with half-note head" situation (as in Brahms piano music).
Affects .rsrc: STR# 240; DialogsEditor.cp.

-------------------------------------------------------------------------------

4-5 Apr.

Initial Keysigs of systems with no sharps/flats usually (always?) have objRects of (0,
0, 0, 0); that's fine, but Debug Check complains that they're "GARBAGE (UNSELECTABLE)".
Fixed this. Affects DebugUtils.c: DCheckNode.

-------------------------------------------------------------------------------

11-17 May

In various situations -- e.g., to facilitate working on my violin concerto with a
violinist -- it'd be very useful to override tempo marks in the score, say slowing down
by 25% or cutting the tempi in half. To do this, assuming we're changing the marked
tempi by a constant factor, and leaving the user interface out, it looks like the only
code changes it'd take would be to MIDIUtils.cp/PDur2RealTime(). It looks very low
impact, too!

Done => it works! But the factor is compiled in to MIDIUtils.cp; move it to vars.h and
initialize it in InitNightingale: InitNightGlobals => done. To let user control it, need
a new command in Play/Rec menu and either (1) a very simple dialog to set value to be
used by all Play commands, or (2) a fairly simple one to set value _and_ play, with a
choice of play command. I'll go with #1, "Change Playback Speed...", w/ feedback in
message area in form "T80%" (e.g.) if speed isn't 100%. Affects .rsrc: STR# 240;
NightTemplates.h, NResourceID.h, vars.h, InitNightingale, Menu, MIDIDialogs, MIDIPlay.

Everything seems OK now, except the keyboard shortcut for the "Instrument MIDI Settings"
command in the Play/Rec menu (option-cmd-M) has lost its modifier key #(#%_^&!:* -- I'm
almost certain because of a bug/oversight in Resorcerer. General Edit Lite is useless for
anything like this (actually, for almost anything, I think :-( ). For the moment, use
Resorcerer to set the _command_ to option-M! This works fine on my G5 except it displays
in the menu as option- command-mu instead of command-M with the "option" icon. But on my
OS 10.6 MacBook, it doesn't work! I'm sure I've run into this before, & I think I found
an ugly workaround involving copying another menu resource & (hex?) editing it; but how
to do that or otherwise avoid the problem? One difficulty with that workaround:
Resorcerer's hex editor seems to be completely disabled! -- at least for menu resources.

-------------------------------------------------------------------------------

19 May

Change the default type for Save PostScript from EPSF for one page to PostScript
text for entire file. Easy, & obviously very low impact.  Affects CarbonPrinting.cp .

-------------------------------------------------------------------------------

3-10 June

Set keyboard shortcut for Change Playback Speed to command-8. (All letters and all
other digits are already taken.)

Another attempt to set the shortcut for Instrument MIDI Settings to option-command-M
again:
	With Resorcerer, change MDEF for MENU 8 (Play/Rec) from 19999 to 0.
	With Rezilla, change shortcut for MIDI M?? from command-M to option-command-M.
	(M = key 77.)
	With Resorcerer, change MDEF for MENU 8 (Play/Rec) back to 19999.
It works on my G5 inside Xcode; on my G5 as a normal app; and on my OS 10.6 MacBook!

Change "Change Playback Speed" to "Relative Playback Speed".

-------------------------------------------------------------------------------

12-14 June

Work on getting the instrument settings dialog (from Master Page) initialized with the
instrument's current channel and patch number. Code is in InstrDialog.cp > InstrDialog().
Balance velocity _is_ initialized; what's the difference? Ah, there's no PutDlgWord()
to set CHANNEL_DI or PATCH_DI. How could this ever have worked!? Add PutDlgWord()s for
them -> it works now!

Also, PATCH_DI isn't checked for legality -- or its new value picked up => Fixed; a
rough edge is the alert for illegal values is blank. !?  Oh well, good enough for now.

-------------------------------------------------------------------------------

21-24 June

Feature to add: a way to mute a part, to facilitate working w/ a soloist (e.g.,
violinist for my concerto). (Setting balance velocity to -127 already does it, but only
in polyphonic mode; also, it's clumsy & unintuitive.) Simple solution:

(1) add a command to Play/Rec menu to mute the (or the first) selected part, and
unmute previous muted part; also need a way to unmute all.

(2a) Store part no. of muted part in (a) an initialized but unused byte in a
score-wide data structure, or (b) a global variable.

(3) Of course have MIDIPlay() ignore notes in muted part. What about exporting MIDI files?

For step 2, implementing 2b would be simpler than 2a, but would mean switching from one
score to another would apply the muted part no. of the first score to the other; that's
likely to be very confusing! So go with 2a.  Should it be saved with the score? Unclear.
It might be ??

In NIGHTSCOREHEADER (Ntypes.h), is expansion[] initialized? Looks like not! How
about roomToGrow[] to MIDIPreferences (applicationTypes.h)?

-------------------------------------------------------------------------------

22 July

The default window size is ridiculously narrow on a typical modern display, e.g., my
20-in. monitor. Fix: in the resource WIND 2000, just change 620 to, say, 690. NB:
Resorcerer on my G5 shows an empty window for the content of WIND 2000!?  Make the
change on my old MacBook  => it works.

-------------------------------------------------------------------------------

9-10 Sept.

I'm getting an awful lot of meaningless complaints from Debug these days, e.g., with the
current LentoThemeCounterpoint.ngl:

	DCheckNode: MEASURE AT 1088 BBOX DISAGREES WITH NEXT MEASURE BY 567.
	DCheckNode: MEASURE AT 1109 HAS A GARBAGE BBOX.
	DCheckNode: MEASURE AT 1109 BBOX DISAGREES WITH PREVIOUS MEASURE BY -567.

...always in sets of three as above. And with the current TransitionTo+BACH+End.ngl:

	*DCheckNode: SYSTEM AT 68 RECT PAST RIGHT MARGIN.

Could the changes to DebugUtils.c: DCheckNode of 5 April to reduce meaningless
complaints have actually made things worse? Compare old to current version of DebugUtils
on LentoThemeCounterpoint.ngl & TransitionTo+BACH+End.ngl => nope; in both, the newer
version of DebugUtils eliminated some complaints without adding any new ones.

The "SYSTEM AT 68 RECT PAST RIGHT MARGIN" messages for TransitionTo+BACH+End.ngl never
apply to the 1st system of a page... ??  Go into Master Page; decrease right margin a bit;
save changes; back into Master Page; set right margin back to what it was => no more
complaints! This is probably a good enough workaround :-| .

For the "MEASURE BBOX" messages for LentoThemeCounterpoint.ngl, Go into Master Page;
decrease right margin a bit; save changes => no more complaints! This is also probably
a good enough workaround.

-------------------------------------------------------------------------------

12-16 Sept.

MIDIFSave.cp: Clarify DebugPrintf's; minor cleanup.

MIDIPlay.cp, MIDIFSave.cp: Change most instances of "Midi" in function names to "MIDI".

MIDIFOpen.cp: In Debug prints for TEMPO metaevents, add "(TEMPO)"; rename the two
versions of GetRelObj (with different calling sequences: this assumes a C++ compiler,
a bad idea in a program that's virtually all straight C) to GetTempoRelObj and
GetCtrlRelObj; clean up code.

-------------------------------------------------------------------------------

17-30 Sept.

Text strings need an "extended" option. Easy UI implementation: in the text dialog,
replace the hidden "Underline" check box and code to support it with "Extended", and
make it visible. Easy functionality implementation: before drawing the string or
computing its length, insert a blank between each pair of chars. :-) . This isn't _that_
easy, partly because of our memory mgmt., partly becauase we have to give the ancient
Mac toolbox Pascal strings, which have a max. length of 255 chars.; probably warn in the
dialog if it's exceeded.

In DrawObject.cp > DrawGRAPHIC(), see case GRString. Probably need to use Pstrcpy()
to make a copy of *q to manipulate, i.e.: Str255 tempStr; Pstrcpy(q, tempStr);

?? #ifdef TARGET_API_MAC_CARBON, DrawNChar() and DrawNString() seem to always use the
system font! Huh? And it _is_ defined -- but DrawNChar() and DrawNString() are never
called. It was already this way in 2006. Yeeech! Remove this junk... done.

Add function ExtendString() => 1st 10 versions crash instantly & horribly; why? It
looks like doing _anything_ with aGraphic->string directly is a disaster; _must_
use PCopy() on it.

To compute objRect, cf. GetNPtStringBBox(), called from GetGraphicDBox()... the
functionality works both on screen and PostScript output!

The UI changes now work in both TextDialog and the Define Text Styles dialog. But normal
extended text is only a bit (25%?) wider than normal, but want to stretch a lot more
than that! Let's call this "Expand" instead of "Extend". Must check for strings too
long for Expand'ing (because of the Pascal string 255-char. limitation :-( )

All seems to be okay! Affects .rsrc; defs.h; DrawObject, StringUtils, TextDialog.

-------------------------------------------------------------------------------

I'm now seeing consistent failures just trying to compress NightingaleG5Ver! I get the
error message "An error occurred while adding “” [empty filename] to the archive".
Experiments show the problem is in build/Nightingale.build/Release. Remove that
directory, rebuild => all OK.

-------------------------------------------------------------------------------

2 Oct. - 3 Oct.

I'm _finally_ ready to use a version control system for Ngale!! A GitHub repository
already has the last "AMNS" codebase (from David Gottlieb, ca. 2012) with voluminous
changes, mostly superficial and mostly by Geoff C. The vast majority of the changes
appear to be replacing thousands of occurrences of "INT16" to "short"; to facilitate
merging, change all instances of "INT16" in files I've changed since 2013 to "short".

CarbonPrinting.cp: Geoff made loads of changes; I changed only one char., so use his
version with my change.

DrawUtils.cp: I'd made no non-trivial changes.

OK, everything is integrated! Try to build => 9 errors. Looks like #defines are
missing for NOTEHEAD_GRAPH_WIDTH and EXPAND_WIDER .

Both should be in defs.h; why aren't they? Because I overlooked defs.h when integrating
all the changes. Correct that, rebuild => 1 error: OhioSlurs.cp is missing -- the ref.
to it needs to be removed from the project file. Do that => it builds & runs!! Yippee!

Call this version 5.5.

-------------------------------------------------------------------------------

27 Sept. - 12 Oct.

Implement muting a part: at most one part at a time, per Document; not saved bcs when a
file is opened, no part should ever be muted. To keep track, add a field (MAXSTAVES =
64, so max. no. of parts = 64, so >=6 bits) _mutedPartNum_ to the Document declaration
in applicationTypes.h ; 0 = no part, else the no. of the muted part. Add it where? The
comments say fields both at the beginning and the end don't need to be saved; the end
seems safer :-) . Test by opening a couple of good-size scores => seems OK! Initialize
it where? Probably Documents.cp > InitDocFields().

Write functions AnyNoteToPlay() and NoteToBePlayed(), to be called from MIDIPlay >
PlaySequence() and MIDIFSave > WriteMFNotes().

Add to .rsrc a "Mute Part" dialog, and add menu item "Mute Part..." to the Play/Rec
menu; add a name for it to NResourceID.h; add code to handle it to Menu.c. Write
handler for the Mute Part dialog => it works! Last details:
+ Put smthg in the "Playing" display to indicate muting. There's very little room,
	so probably just boldface "M"
+ For Save MIDI File, could ask user if they want to omit the muted part, but it's
	easier to always omit it (and warn user it'll be omitted). (If the muted part is
	the only part, don't bother saving the file.)
+ If no file is open, need to disable Mute Part and Relative Playback Speed cmds!

Clean up code a bit: remove last VIEWER_VERSION code; update comments in compilerFlags.h.

-------------------------------------------------------------------------------

13-14 Oct.

With two voices on a staff, Ngale computes space needed based on the merged voices
even if one is so far above the other that they don't interact, resulting in it
sometimes allocating way too much space for a Sync. Cf. violin concerto, II,
3VCBVariation, m. 9. A solution: add a flag to the ANote struct that says "when
respacing, ignore this note", or, better, "ignore the chord this note belongs to"; add
it to the note Get Info dialog.  Est. fix impact: low: there's a byte available to put
this flag in, and it looks like it's been initialized to 0 for many years. ??The byte is
fillerN. Could also take the top bit of ndots:4 -- supporting up to 7 aug. dots is
probably enough :-) . 

Code changes would be in SpaceTime.cp > SymWidthLeft(). However, that function calls
ChordNoteToLeft() with staff nos., while ChordNoteToLeft() expects voice nos.! This is a
mess; it may not be low-impact after all, and may not be worth the effort :-( .

In code to display CNFG fields: add _musicFontID_; rearrange to come closer to the order
of declarations in applicationTypes.h; minor cleanup.

-------------------------------------------------------------------------------

18-28 Oct.

Minor changes to Initialize, DebugUtils.

.rsrc: tweak the Sync Info and General Info dialogs (DLOGs 596 & 598) for readability.

Make the "extended" option for text strings an option independent of the style instead
of part of the style definition. So a flag needs to be stored in the GRAPHIC struct;
the _info2_ field looks like a good place, not used for GRStrings. Is it always
initialized? It looks like it: cf. InitGraphic().

It works! Do the same for tempo marks => that works!

-------------------------------------------------------------------------------

3-10 Nov.

Resume work on "ignore the chord this note belongs to" feature (cf. 13-14 Oct.).
Change SymWidthLeft() to properly use voice nos. in calls to ChordNoteToLeft() (gasp).
Add <noAutospace> flag to the ANOTE struct; in SymWidthLeft(), if main note has
<noAutospace>, ignore the note's chord.; in BrowseSync(), display <noAutospace>.
??

Test:
	SymWidthLeftTest.ngl: m.1, OK; m.2 both tests OK.
	Spacing2VPerStaff2.ngl: m.1, to left OK, to right not; m.2, neither is OK.

Part of the problem is we need more context in SymWidthLeft(), and, no doubt,
SymWidthRight(). But the code is just too messy as it is! Let's precompute an
<ignoreChord> matrix in SpaceHighLevel... done. But now Ngale crashes if I simply
open a test file and try to respace one measure #%^&#)%#)% . Let's go back to the
last known good version, the code in the Ngale 5.5 of 28 Oct. => yep, that still
works :-) . Move towards the latest version. !! When I call SymWidthLeft() with
measNode = -1, i.e., no <ignoreChord> info available, no problem. But when I call
it with the correct values but setting measNode = -99 as the 1st stmt in
SymWidthLeft(), it crashes :-( . In this excerpt from ConsidITWidths():

			/*
			 * We need more space here. Move this object to the right, and
			 * increase the space available on all staves by the same amount.
			 */
**0 DebugPrintf("(Q) i=%d stf=%d gNeedLeft=%d needLeft=%d\n", i, s, gNeedLeft, needLeft);
**1			fSpBefore[i] += fSpNeeded;
			for (t = 1;t<=doc->nstaves; t++)
				fAvailSp[t] += fSpNeeded;
		}
		
		/*
		 *	Re-initialize for the next J_IT object on this staff.
		 */
**2		prevNeedRight[s] = SymWidthRight(doc, spaceTimeInfo[i].link, s, FALSE);	/* Incl. stuff fllwng notehead */
		if (prevNeedRight[s]<gNeedRight) prevNeedRight[s] = gNeedRight;

Before adding line **0, it crashes w/ "EXC_BAD_ACCESS" at **1. After adding **0.
it crashes at **2. ?!?

Something very suspicious: The code has many instances of loops like this:

	for (k = 0; k<=nInMeasure; k++)

But that stmt covers nInMeasure+1 values of <k>! Is that correct?? ...Unfortunately,
yes. <nInMeasure> is a misleading name; it's really <nLast>. OK, I give up! -- at
least for the time being.

-------------------------------------------------------------------------------

11-18 Nov.

Various fields in various Info dialogs are too narrow, truncating labels or even values.
Make the fields and, in some cases, the dialogs wider.

-------------------------------------------------------------------------------

18 Nov.

In the current 1stMovement_Part3.ngl, mm. 52-61, adding whole-measure rests to the
solo violin part results in Ngale thinking mm. 57 & 59 are suddenly longer! Weird;
don't think I've seen this before. Starting in m. 57, it's 4/4 => each measure dur.
should be 1920 ticks. Onset times:

m. 57: 111360
m. 58: 114600 => dur. of m. 57 = 3240 = 1320 (5 eighths + 1 16th) too big
m. 59: 116520 => dur. of m. 58 = 1920
m. 60: 119160 => dur. of m. 59 = 2640 = 720 (3 eighths) too big
m. 61: 121080 => dur. of m. 60 = 1920

!! Deleting the whole-measure rests in the offending bars, then re-inserting them,
fixes the problem. Oh well; it's not worth pursuing this now.

-------------------------------------------------------------------------------

26-27 Nov.

- With a score of very many pages, you can't zoom in very far. E.g., with
1stMovement_Part1FS.ngl's 37 pages, 200% is the limit before Ngale complains the score
won't fit at the new magnification. This makes tweaking details very difficult. Changing
to a larger "paper" size via Page Setup seems to do nothing at all. Changing Screen Page
Layout to accomodate more pages works in that it's recorded in the file, but doesn't
stop Ngale from complaining; cf. Sheet>SheetMagnify(). Either or both are probably worth
fixing.

Where do we check for screen layout overflowing? The complaint for score not fitting
at new magnification is
	#define SCREENOVERFLOW_DLOG 806
But where is it referenced?? In Sheet>WarnScreenPagesOverflow(). Anyway, checking is
done in Sheet>ScreenPagesCanOverflow()... which seems to check _separately_ for
<numSheets> exceeding the layout's no. of rows or its no. of columns -- but I nearly
always have no. of rows as 1, so why don't I have problems w/ any score of more than a
page?? W/ my 37-page score, going from 150% to
200% => 	magnify = 2, numSheets = 37, scale = 2.0;
			doc->numRows = 1, maxRows = 66;
			doc->numRCols = 86, maxCols = 86

Trying to go from 300% to 300% =>
		 	magnify = 3, numSheets = 37, scale = 3.0;
			doc->numRows = 1, maxRows = 66??;
			doc->numRCols = 86, maxCols = 86??
		
!! The problem really is exceeding the width or height of the available space, so
just reducing the no. of columns from 86 to, say, 20 should do it... and it does!
It'd be good to clarify the "score won't fit" error message, but maybe not worth the
time now.

-------------------------------------------------------------------------------

28 Nov.

- With reasonable spacing, only about 25 staves fit on a letter-size page even at staff
size 8, so with a largish number -- e.g., 15 in my violin concerto -- you can get only
one system on a page, Trying to change to a larger "paper" size seems to do absolutely
nothing. More precissely, after changing from default (U.S. letter) to U.S. legal, in CarbonPrinting>
NPageSetupDoneProc(), it looks like

	if (!EqualRect(&doc->origPaperRect,&rPaper)) ...

isn't satisfied, i.e., doc->origPaperRect and rPaper are identical. Well, pmRPaper
is still 612 x 792 points, i.e., 9-1/2 x 11 in. ?? Apple's PMGetAdjustedPaperRect()
must be returning pmRPaper unchanged; I dunno what can I do about that.

Changing from portrait to landscape format _does_ ??

-------------------------------------------------------------------------------

29 Nov. - 7 Dec.

DebugPrintf messages seem to go to /dev/null unless we're running inside Xcode, and
chances to run inside Xcode (2.5!) are very likely to gradually fade away. Solution:
DebugPrintf is #define'd simply as printf. It should be trivial to #define it instead as
the BSD function syslog(3) ...though it'd be nicer to continue to have messages go to
Xcode _and_ send 'em to the log.

Solution: call openlog(p1, LOG_PERROR, LOG_USER) before calls to syslog()!

?? Does this work? I saw some Nightingale messages in the system log, but then nothing
seemed to be there! Maybe it's just scrolled out of the viewable area... Where _is_
the system log file? In /var/log . Try again => nope, nothing there!; anyway, what I
see in Console brackets the time the message was issued. Try w/o calling
openlog() => nope. I've been using level LOG_INFO; try w/ a higher level, LOG_ERR =>
it works! So, contrary to documentation, it looks like the default doesn't send
messages of all levels through. Add back call to openlog() => it still works.
Change level filtering via setlogmask() => it _seemed_ to work... but now it's only
accepting levels LOG_NOTICE and above, i.e., not LOG_INFO or LOG_DEBUG. OK, I can
live with that.

Add VLogPrint(), LogPrint(), InitLogPrint() to Utility; call InitLogPrint() from
initialization code; change COMPLAINx macros in DebugUtils.h from using DebugPrintf()
to LogPrint(LOG_NOTICE, ...) => it works! But probably should use priority level
LOG_ERR.

This has all been on my G5 running OS 10.5. Test on my old MacBook running OS 10.6 =>
OK, and even levels LOG_INFO and LOG_DEBUG appear in the log.

OK, but we often call DebugPrintf() with partial lines or occasionally with multiple
lines. Add support for the former only, & rename xxxPrint functions to xxxPrintf =>
?!? hangs/crashes! -- apparently in strlen(). Run log contains:

1------inStr='A simple one-line LogPrintf.' fullLine=1 &inStr=184f78 pch=184f78 len=28
Ngale: A simple one-line LogPrintf.
1------inStr='Another one-line LogPrintf.' fullLine=1 &inStr=184f78 pch=184f78 len=27
Ngale: Another one-line LogPrintf.
1------inStr='This line is ' fullLine=0 &inStr=184f78 pch=184f78 len=13
1------inStr='built from 2 pieces.' fullLine=1 &inStr=184f78 pch=184f78 len=20
Ngale: This line is built from 2 pieces.
1------inStr='This line was ' fullLine=0 &inStr=184f78 pch=184f78 len=14
1------inStr='built from 3' fullLine=0 &inStr=184f78 pch=184f78 len=12
1------inStr='pieces.' fullLine=1 &inStr=184f78 pch=184f78 len=7
Ngale: This line was built from 3pieces.
1------inStr='DEBUG 'M'-Std: ' fullLine=0 &inStr=184f78 pch=184f78 len=15
1------inStr='CHK MAIN:' fullLine=0 &inStr=184f78 pch=184f78 len=9
1------inStr='Discont. sel, 0 objs in range, 0 sel, 10 total.  0 voices.' fullLine=1 &inStr=184f78 pch=184f78 len=58
Ngale: DEBUG 'M'-Std: CHK MAIN:Discont. sel, 0 objs in range, 0 sel, 10 total.  0 voices.
1------inStr='    CHK MASTER: ' fullLine=0 &inStr=184f78 pch=184f78 len=16
1------inStr=' Done.' fullLine=0 &inStr=184f78 pch=184f78 len=6
1------inStr='    CHK CLIP: ' fullLine=0 &inStr=184f78 pch=184f78 len=14
1------inStr=' Done.' fullLine=0 &inStr=184f78 pch=184f78 len=6
 
!! It looks like strlen() and strcat() both crash if src is the null string, at least
on my G5. It's really hard to believe such a horrendous bug exists _and_ I didn't know
about it, but e.g. putting "if (pch!='\0')" in front of
    	strcat(outStr, pch);
definitely seems to make the problem go away.

Replace ca. 300 instances of "" to "LogPrintf(LOG_NOTICE, "... done.

-------------------------------------------------------------------------------

16-17 Dec.

- Explicit courtesy accidentals are unusable: the parens are always way too low on the
page. I was thinking most of the displacement was because they're off by one staff, and
the rest because the tops are where the bottoms should be. But actually it seems to be
just because _courtesyAccYD_ -- read from the Prefs file -- on my G5 & my old MacBook is
way too large: it's 100, but should be more like the config default of 8. But where _is_
the #%&#)%$%=$)# Prefs file, "Nightingale Devel Prefs"?? It doesn't seem to be anywhere
on the startup disk, and I can't tell from the code where we're looking, but we
certainly seem to be finding it!

Try changing the name to, e.g., "Nightingale 5-AMNF Prefs"? That's probably a good
idea anyway.

??UNFINISHED!

-------------------------------------------------------------------------------

17-19 Dec.

- On MIDI playback, if multiple notes are simultaneously playing the same note number on
the same channel but end at different times, Ngale stops playing that note when the
first one ends. It should at least hold it till the last one ends. It might be better to
re-attack the note at a possibly different velocity, but that'd be more complicated and
it's not clear it'd actually sound better.

This is handled by an eventList; PlaySequence() calls EndNoteLater() which calls
InsertEvent(). So should just check before calling EndNoteLater() (or in EndNoteLater()?),
and if there's already an event w/ that note no. and channel w/ a later ending time,
ignore the Note Off.

Cf. MIDIUtils.cp/InsertEvent(), and, the equivalent for writing MIDI files,
MIDIFSave.cp/MFCheckEventList().

Add Boolean param. _playMaxDur_ to xxInsertEvent; if TRUE and we already have ??,
ignore the call to xxInsertEvent. Add FALSE as actual parameter to calls (in xxEndNoteLater)
value, so MIDI playback should behave the same as always => !#$^%&@$@# results in no
Note Offs being sent at all! How?

The 4th formal param. to CMEndNoteLater is now _long_ in the declaration, _short_ in
the prototype, & _UniqueMIDIID_(?) as the actual parameter -- very suspicious. Change
that to long in the prototype & declaraion of CMInsertEvent() => OK!! 

It's OK now _if_ the longer note is encountered first. If a shorter duration is followed
by a longer, it's not enough to add the longer one to the cmEventList: I have to remove
the shorter one! ...best implemented simply by replacing it (duration and Off velocity).
Do that => all OK!

-------------------------------------------------------------------------------

22-30 Dec.

- Ngale doesn't handle unisons, even perfect unisons, at all well. It'd be helpful
if user could say "unisons are OK". Then, (a) when they create a unison, (a) Ngale
should automatically put the new note on "the other side of the stem", and (b) Debug
Check shouldn't warn about perfect unisons. Fix est.impact: very low.

!! CAVEAT: aking _any_ change to Double.cp is likely to turn it into "ill-formed UTF"
(according to BBEdit); this is really nasty because Xcode doesn't complain, it just
gives compilation errors. I'm sure this has happened before, probably with a different
file. Sigh.

-------------------------------------------------------------------------------

2 - 3 Jan. *** 2016 ***

Change name of the Preferences file from "Nightingale Devel Prefs" to "Nightingale AMNF
Prefs" (see entry for 16-17 Dec.) => gives the "Creating a new one" progress message,
but where is it? Finder's Search sez no "Nightingale AMNF Prefs" anywhere... Ah, unless
it's in a hidden folder!! Check w/ Terminal => success! Specifically:

  DonDualG5:~ donbyrd$ find . -name 'Nightingale A*' -print
  ./Library/Preferences/Nightingale AMNF Prefs

..right where it should be :-| .

Also, after creating (and using) a new Nightingale AMNF Prefs, Ngale complains that
field 69 (whichMIDI) is illegal; its value is 4. I.e., the prototype in the .rsrc (CNFG
resource) has it as 4, but the only legal values now are 0 and 1. Change that field in
.rsrc to 0 => OK.

-------------------------------------------------------------------------------

11 - 15 Jan.

Convert files encoded in Mac OS Roman to UTF-8; replace "sustain on" char. in code
with 0xA1 (its codepoint in Sonata). Affects DrawObject, Menu, DebugUtils.

Convert file with CRLF line endings to Unix. Affects defs.h.

The pedal mark (SUSTAINON) is now displayed as a digit "5"! It was OK in Ngale 5.5.
Cause: converting DrawObject.cp from Mac Roman to UTF8 screwed up the char. code;
in Sonata, it's 0xA1. Replace the char. in source code with 0xA1 => all OK again.

The standard "header" on Ngale .cp files says

 * THIS FILE IS PART OF THE NIGHTINGALE™ PROGRAM AND IS CONFIDENTIAL PROP-
 * ERTY OF ADVANCED MUSIC NOTATION SYSTEMS, INC.  IT IS CONSIDERED A TRADE
 * SECRET AND IS NOT TO BE DIVULGED OR USED BY PARTIES WHO HAVE NOT RECEIVED
 * WRITTEN AUTHORIZATION FROM THE OWNER.
 * Copyright © 1988-99 by Advanced Music Notation Systems, Inc. All Rights Reserved.

According to SourceTree's display of changes, the update to Double.cp I'm ready to
commit changes the char. after "NIGHTINGALE" from E-grave to TM, while the updates to
DrawObject, Menu, & DebugUtils change it from TM to comma / N-tilde / cent sign, and
add something like a "~" in front of the copyright symbol! Huh? Clearly related to
encoding. Encodings (according to BBEdit; ** = "Incorrectly formed") and chars. displayed
(BBEdit on my G5, default font; D-? = black diamond enclosing question mark):

file		old enc.		new enc.		char. after "NIGHTINGALE": ST	:BBE
Double		UTF8**			ISO Latin 1		E-grave => TM					D-? => super-a-underline
DrawObject	Mac OS Roman	UTF-8			TM => comma/N-tilde/cent sign	TM => TM
Menu		Mac OS Roman	UTF-8			TM => comma/N-tilde/cent sign	TM => TM
DebugUtils	Mac OS Roman	UTF-8			TM => comma/N-tilde/cent sign	TM => TM

It looks like BBEdit on Mac doesn't display Latin-1 properly (no surprise) and
SourceTree on Mac doesn't display UTR-8 properly (weird). Anyway, almost certainly not
evidence of a serious problem!

-------------------------------------------------------------------------------

21 Jan.

Showing attaching point(s) of symbols isn't as good as it used to be. I'm pretty sure
that formerly, double-click various symbols (at least dynamics, slurs, & GRString &
GRLyric Graphics) & hold mouse button formerly => showed attachment point(s) (via
vertical dotted lines, with call to UIFUtils.cp > HiliteAttPoints (or possibly
HiliteInsertNode?)); anyway, I want it to! Currently, it does so only for Graphics and
tempo marks, and only _after_ you release button on double-click, while the resulting
dialog is on screen: that's OK -- and quite possibly what it's always done for Graphics.
But it doesn't do it for dynamics and slurs at all. In fact, now that double-clicking
dynamics brings up an edit dialog, it could behave the same as for Graphics and tempi.

CheckDYNAMIC(), case SMDblClick, calls HiliteAttPoints():

	if (IsHairpin(pL))
		HiliteAttPoints(doc, firstSync, lastSync, staffn);
	else
		HiliteAttPoints(doc, firstSync, NILINK, staffn);

It looks like this should work. But CheckGRAPHIC(), case SMDblClick, for text, calls
HiliteInsertNode():

	HiliteInsertNode(doc, p->firstObj, staffn, TRUE);		/* Hiliting on */

...and so does CheckTEMPO(), case SMDblClick! It looks like HiliteInsertNode() works and
HiliteAttPoints() doesn't.

Change CheckDYNAMIC(), case SMDblClick, to use HiliteInsertNode => it works!

-------------------------------------------------------------------------------

2-31 Jan.

Can I make spacers more useful, e.g., for my projected double-stop crossing tremolo glissandi
w/ multiple open strings? Maybe.

Want to make the "Can't find Prefs file: creating a new one" message stay on the screen
longer, say for 5 sec. It _should_ just be a matter of increasing the argument to
SleepTicks() in Initialize.cp/OpenSetupFile, but that doesn't seem to have any effect?!?
Well, Initialize.cp is a mess, anyway; clean it up => now the message _does_ stay for
the time I specify! Weird, but not worth worrying about.

-------------------------------------------------------------------------------

8 Feb. - 1 March

- In some very recent scores -- my SpacerTest_InvisibleNotesBug.ngl &
3rdMovementFS_??.ngl and something of Glenn Gass' -- inserted notes aren't drawn at
all! With SpacerTest_InvisibleNotesBug, I tried redrawing, changing system spacing and
staff size (in Master Page); nothing makes the notes appear, and Debug has no
complaints. The invisible notes can't be selected graphically, but Select All highlights
what look like their correct positions. Save, re-Open it => no change. Strip it down to
InvisibleNotesBug.ngl => no change. ?!? Play => the invisible notes are played.

Dump InvisibleNotesBug.ngl => objRect.left is 0 iff note is invisible! Why? DrawSYNC()
is never called for the invisible notes. Why? Ihe Syncs' _visible_ flags are set, but
their _valid_ flags aren't! Why? Notes currently are invisible iff they're on the 2nd or
4th system; inserting new notes => the same thing. Insert a barline on sytem 2 or 4 =>
all notes on the system suddenly appear! Ah, in DrawScoreRange(), _drawAll_ is FALSE
for the invisible notes! For Measure objects, 

	if (SectRect(&pMeasure->measureBBox, &paperUpdate, &result)
											|| outputTo!=toScreen)

...then drawAll is set to FALSE. Clearly  outputTo==toScreen, so the problem is Ngale
thinks the intersetion of the measureBBox and the update area is empty. Why? Because the
measureBBox.left = measureBBox.right = 850, which I'm pretty sure is the right end of
the System! Why? I dunno, but let's add to Debug Check a check for Measures with
zero-width bbox that aren't immediately followed by a Page or System, or that have
something other than a Page before the next System. Add code to DCheckMBBox() => done.

On my G5, just adding a barline in the offending systems fixes everything in all test
scores, and in Glenn's score (filename _stems_), only the 2nd system is a problem
anyway. On Glenn's system, _none_ of the noteheads are drawn in either system, and
adding a barline does nothing! The apparent cause: he's using Sonata, and it doesn't
show up in Font Book, so it's evidently not installed properly -- and he doesn't have
Briard or Blue Notz. ??


-------------------------------------------------------------------------------

11 Feb.

Changing to a larger "paper" size via Page Setup seems to do nothing at all. I don't see
anything in Ngale code that explains this; info returned from the Page Setup dialog indicates
the paper size is unchanged !*(!*@&(. Changing from portrait to landscape format _does_
work. This is with Ngale 5.5 or 5.6b2 on my G5. But Opus says it works for him!; he's
running Ngale 5.3.0 b10m on OS 10.6.8. Try Ngale 5.5 on my old MacBook => changing paper
size works! So it looks like this is OS dependent.

-------------------------------------------------------------------------------

4-5 Mar.

- Piano pedal up and down symbols don't come out in a music font. However, the same
chars. as part of a text Graphic _are_ rendered in a music font.  Cf.
PedalSymbolsFontBug.ps to PedalSymbolsFontKludge.ps: the former, using Ngale's official
pedal symbols, switches to Helvetica for them! The latter, using text with the proper
chars. in the Sonata font, does _not_ switch. Why does Ngale switch to Helvetica instead
of using the music font? Because the calls to PS_FontString() in DrawGRAPHIC() for
GRMIDISustainOn and GRMIDISustainOff specify as the font
doc->fontTable[p->fontInd].fontName ; it should be just  doc->musFontName :-) .

-------------------------------------------------------------------------------

25-28 Mar.

Rename the _string_ field of the Graphic object to _strOffset_.

Getting the string stored in a Graphic object is extremely error prone! Does the
FirstGraphicSTRING macro handle this?

Rename the Tempo object fields containing STRINGOFFSETs to _xxxOffset_.

-------------------------------------------------------------------------------

28-29 Mar.

Check Range complains about double-bass notes that are indeed below its specified range
_if_ sounding pitch is interpreted as an octave below written -- but I'm using sounding
= written, and it plays back that way. Does it depend on if "Play from parts' settings"
is in effect? No. Cf. UseMIDINoteNum(), which is called from GetNotePlayInfo().

Want to support pure C scores (e.g., my violin concerto  and conventional
transposed scores and play either w/ specified patches (multi-channel) or all on one
channel =>  Ngale needs an explicit indication of whether it's a C score or not! Oops: 
it already has one!!: the "Transpose" MIDI command. Maybe rename it to "C Score"?
Anyway, the problem with Check Range results from it not paying attenion to that
setting. Cause: for transposing instruments, the parts' _hiKeyNum_ and _loKeyNum_ are
the MIDI note numbers of the written pitches, not the sounding pitches! Ugh. So, leave
that as is and change the Check Range code, or make them the note nos. of the sounding
pitches? The latter is obviously the correct fix; it's also obviously harder, and will
make the existing UI a bit clumsier (in terms of clefs displayed).. Need to
change the instrument descriptions, in STR# 130. That won't help existing scores!, but
they can be fixed one part at a time, and it won't make things any worse if they
aren't fixed.

Edit STR# 130... the format is obscure, and Ngale is very picky! Cf. MPImportExport >
SDInstrDialog(). But where is it read in? Ah, in InstrDialog, which also documents
the format.

-------------------------------------------------------------------------------

12 April - 23 June

Paste Merge, Set Duration, and Remove Rhythmic Gaps/Resynchronize sometimes give a
strange error message. E.g., Paste Merge a chord for piano in 3rdMovementFS.ngl, m. 32
=> "FixGRDrawLinks: for 1155, firstObj=1157 or lastObj=1161 isn't a Sync or a GRSync."
True, while 1157 is a Sync, 1161 is a Measure. Still, this makes no sense! Typically the
GRDraw Graphic in question is nowhere near the where I'm Paste Merging. In this case,
GRDraw Graphic w/ LINK 1155 is in m. 89. ?? Reconstruct/FixGRDrawLinks() is called only
from FixNBJDLinks(). ??

A similar case: "FixGRDrawLinks: for 1248, firstObj=1251 or lastObj=1255 isn't a Sync or
a GRSync."  1255 is a Measure. Ah, FixGRDrawLinks() is called from FixNBJDLinks() from
FixCrossPtrs(), and the latter has it work on the entire score! -- huge overkill. More
important, is there really a problem with these GRDraw objects? The only GRDraw objs we
have are lines, and they can be inserted only w/ Syncs or GRSyncs on both ends -- but if
one crosses a barline, Reformat can truncate it and attach the right end to a Measure! I
don't think this causes any problems, but maybe Debug Check should complain about it;
anyway, Paste Merge etc. probably shouldn't.

-------------------------------------------------------------------------------

20-21 April

We want extracted parts to have a different staff size from the score; staves in parts
should usually be larger! UI could be a new Config field, or -- probably better and
definitely lower impact -- entered in the Extract dialog. (Having both would be useful,
but low priority.) Re functionality, cf. Extract > CopyDocFields(); is it just a matter
of setting part->srastral to a different value? Nope! That doesn't result in updating
the actual size of each staff, H and V coords. of everything, etc. Ah, MasterPage >
DoMasterStfSize() seems to do everything needed. To be continued.

-------------------------------------------------------------------------------

10 - 26 June

This is utterly bizarre, but for a long time, Xcode 2.5 on my G5 has been unable to save
about three source-code files: Browser.cp, Dragging.cp, DebugUtils.cp; maybe others?
They're not locked. I've been opening them in BBEdit (not copying and pasting,
though that'd surely work as well) and editing and saving them with it for months, with
no problems at all.

I haven't tried on another machine or with Xcode 3.2 yet. Maybe it's a problem with the
Xcode project, and removing them from the project and re-adding them would fix this? No,
it doesn't help... but when you a file, Xcode asks what the encoding is. Maybe it's
confused about that? Yes!! -- Re-add them and specify correct encoding => all OK!

-------------------------------------------------------------------------------

14 June

For adding cues to parts, I need a way to change the number of measures on a multibar
rest... Oops, it can already be done via Get Info; not too obvious, but if Dur is
negative, it's the no. of measures!

-------------------------------------------------------------------------------

15 June

During MIDI playback, I recall Ngale draws the "next" page only if virtually none of
that page is in view yet; if even a tiny sliver of the page is already on the screen, it
doesn't "turn the page". This seems to be backwards! That might have made sense 15 years
ago when screens were much smaller and computers much slower, but now, Ngale should turn
the page if more than a tiny sliver is _not_ on the screen. This _should_ just be a
matter of changing the test, presumably in MIDIPlay.cp>PlaySequence(). The variables
_pageTurnTOffset_, _tBeforeTurn_, _newPage_ must have something to do with it. Ah,
_doScroll_ is the key! Scrolling is actually in HiliteSyncRect(). To be continued.

-------------------------------------------------------------------------------

28 June - 5 July

The cadenza of my Violin Concerto has two staves for the soloist, one for the viola
obbligato. I now have all the violin notes on one staff, so want to delete the 2nd staff
of the violin -- but I can't, because the only way to do that is to Split Part, then
delete the new part that contains the 2nd staff, and I can't Split Part because (the
error message says) there are notes in the default voice for the 2nd staff on the 1st
staff. Huh??

Make Ngale allow Split Part in that situation => the voice table changes from

   iVoice 1 in part 1 Role=L relVoice=1
   iVoice 2 in part 1 Role=U relVoice=2
   iVoice 3 in part 2 Role=. relVoice=1

to

   iVoice 1 in part 1 Role=. relVoice=1
   iVoice 2 in part 2 Role=. relVoice=1
   iVoice 3 in part 3 Role=. relVoice=1

This looks correct, but it's not: iVoice 2 still belongs to part 1! ...Ah, I see.

If a multistaff part has default voice(s) in use -- with notes, rests, or grace notes --
on staves other than their "native" staves, splitting requires creating a new voice for
each such voice. But if a multistaff part has _any_ voice in use on two or more staves,
splitting it would be very messy; not worth supporting, at least for the near future.
OK, but if the part doesn't have that feature and it's split, should we (1) change the
internal voice no. of the default voice in use on a non-native staff and keep iVoice
always = staff no., or (2) keep the iVoice of the voice in use and accept iVoice may not
= staff no.? Either way could be difficult. Ah, comments in VoiceTable.cp make it clear
iVoice must always = staff no.!

So the voice table for the Cadenza _must_ end up (except for the roles)

   iVoice 1 in part 1 Role=. relVoice=1
   iVoice 2 in part 2 Role=. relVoice=1
   iVoice 3 in part 3 Role=. relVoice=1
   iVoice 4 in part 1 Role=U relVoice=2

...and everything in iVoice 2 must change to iVoice 4.

But experiments aren't encouraging. This still might take a lot of work to get right --
and actually it shouldn't take long to move everything in violin voice 2 to voice 3
(after removing slurs/ties & beams); Split; and move everything in violin voice 3 back
to 2!  To be continued.

-------------------------------------------------------------------------------

9 July - 15 August

For Issue #98, it'd be great if the Tempo/Metronome Mark dialog could handle return
chars. the way the text-entry (for Graphics) dialog does.  Cf. TextDialog.cp/MyFilter
to DialogsEditor.cp/TempoFilter.

Pull a new function DrawStringBlock() out of DrawGRAPHIC().

One (of many!) problems along the way: To draw on screen, DrawStringBlock() needs the
font ID, but to draw PostScript, it needs the font name. How to get one from the other?
I don't think we have a routine to do that; how can it be done? Ah, doc->fontTable lets
you convert from one to the other, and I think _every_ font used in a score has an entry
in it! So implement FontID2Name() => OK.

OK, for Tempo objects, DrawTextBlock() now divides the tempo string at occurrences of the
"start new line" code and draws each separately -- but we also need to subdivide the string
to compute the Tempo's bounding box, and to know how far to the right to position the
M.M.! It's probably best to have DrawTEMPO() immediately convert the tempo string into
an array of single-line strings.  NB we're not doing anything like that w/ Graphics!
But they don't need such attention because (1) their embedded CRs automatically move to
the next line, and (2) they're simpler, i.e., they have nothing like the Tempo's M.M.
component.

No, that's way too messy. Instead, have TempoDialog() convert the "new line" char. to CH_CR
when it's OK'd, and vice-versa when it's opened w/ an existing tempo string => it works!

-------------------------------------------------------------------------------

28 Aug. - 1 Sept.

Laurie Spiegel got Ngale to compile w/ Xcode 7.3!! To do that, she had to change a bunch of
goto's and cases in switches; why? As http://www.cplusplus.com/forum/general/168196/ says:
"A jump to a labelled statement (case xxx and default are labelled statements) is not
permitted to bypass the initialisation of an object a variable." Files needing changes:
About.cp, CheckMerge.cp, DrawObject.cp, DurationPopUp.cp, FileInput.cp, NavServices.cp. (The
change she made in Menu.cp was commenting out code for a different reason.)

-------------------------------------------------------------------------------

23 - 24 Sept.

Doug McK. reports that he can't open his old files w/ Ngale 5.6, files that don't have
the proper Ngale document icon, via the Open command -- no surprise. But trying to
open them by dropping on the Ngale program icon gives

	Nightingale can't open the file.
	The file version is '

Not too helpful! It looks like this is from StopInform(370); 370 is READ_ALRT. The 2nd
line must be STR# 241 string 7, 8, or 9: all begin with "The file version is '", then
go on to say more; it's not clear why that's all StopInform() sends out. Where is that
StopInform()?

Test w/ my file "Things th MaUs Sing full p.ngl copy": sure enough, it behaves the way
Doug says. Add a LogPrintf at start of OpenError() => never prints anything! ?? Ah,
dropping files on the program icon calls FSpecOpenDocument(); it notices the file has
the wrong document type, but gives the wrong error message!

-------------------------------------------------------------------------------

12 - 13 Oct.

I want to change my violin concerto from _absolute_ C score (not even octave
transposition) to normal C score (piccolo sounds 8va above written, bass sounds 8va
below). Ngale doesn't have a "normal C score" option, but using the octave-transposed
clefs works OK for piccolo, which plays only briefly a couple of times anyway. But for
bass, while it gets rid of ledger lines below the staff for very low notes, it adds
even more ledger lines _above_ the staff for very high notes! #^)@&$*)#%1=  Of course
the standard solution for bass is to switch to tenor clef for very high notes, but Ngale
doesn't have an octave-transposed tenor clef, sigh. How hard would it be to add?

The enum for clef types, excluding PERC_CLEF, goes from highest (TREBLE8_CLEF) to lowest
(BASS8B_CLEF) in order. Want to keep the order, but adding TENOR8_CLEF would change
the code(s) for clefs after that. What about co-opting the code for baritone clef,
which is almost never used?

-------------------------------------------------------------------------------

17 - 20 Oct.

Implement Nudge (move a single selected symbol of some types with command-arrowkey) =>
wonderful when it works! But, while it works well (A) for some symbol types, it works
less well or not at all (F) for others.

* A	Text graphics
* A	Notes/rests			+ Should affect just selected notes/rests, not the entire Sync!
* A	Dynamics			+ Up/down has no effect whatever!?
						+ For hairpins, affects only the left end
* A	Tempo/metro marks
* F	Tuplets				- None of the keys has any effect
* F	Ottavas				- "  "
* F	Slurs/ties			- "  "

It'd be nice to be able to nudge tuplets, ottavas, but not worth doing now. Slurs are
more important, but we really need to nudge individual endpoints and control points -- which
is a different proposition.

-------------------------------------------------------------------------------

24-25 Oct.

Apparently the Print command sometimes -- for Doug McKenna, consistently -- generates
PostScript output instead of bitmap! How is that possible? Actually, it's not obvious
how the Print command ever prints anything! NDoPrintScore() doesn't actually print
anything, and all the Print command does explicitly is to call NDoPrintScore().

Somehow we get to DrawScoreRange(), which is called only from DrawRange(), which (for
the score proper, as opposed to Master Page) is called only from DrawPageContent().
??

-------------------------------------------------------------------------------

1 Nov.

It's worth some time on supporting tweaking slur position _somehow_, either with Get
Info or nudging. The object xd is currently always set to 0 but ignored, so I could just
make slur-drawing and -dragging code use it as an offset! -- well, not so easy; there's
also the code to drag anchor & control points. Much safer: change coordinates in each of
the anchord & control points; UI-wise and more user-friendly, this fits nudging better.

-------------------------------------------------------------------------------

14 Nov.

How about making (normal, 1-octave) ottava signs display "8va" or "8vab"? Definitely
preferable a lot of the time -- probably most of the time -- but there are cases where
just "8" is better. How hard would it be to offer a choice? It'd be very nice to have "8va"
on the "Questionable Symbols" OMR test page, anyway; just kludge it for that?

-------------------------------------------------------------------------------

15-20 Nov.

I'd like to look for differences two versions of the violin solo part of the concerto,
1st mvmt part 1, by doing text comparison of their notelists; but that's useless because
the start times are all different by 3840 bcs in one of the original files,
1stMovement_Part1-VnSolo.ngl, the 1st visible barline has time 1920, while in the other
it's the correct value 5760 bcs of the preceding multibar rest, so have 1444 diffs. in
the notelists!  Logical times are computed by SpaceTime.cp>GetSpTimeInfo(), which calls
CalcNoteLDur() ?!? -- whose comment says "for multibar rests of ANY number of
measures..., return one measure's duration"; but why?? And a vn part extracted from
1stMovement_Part1.ngl w/ Ngale 5.7b6 gives the rest the proper duration, obviously bcs
Extract() does the right thing; 1stMovement_Part1-VnSolo.ngl could have ended up w/ the
wrong value bcs of my fiddling w/ the initial multibar rest after extracting the part!

Fixing CalcNoteLDur() to handle multibar rests shouldn't be hard, but impact? Well,
multibar rests almost never occur outside of extracted parts, and changing the
calculated duration of one can't affect syncing, etc., so realllly shouldn't be a
significant problem.

OK, done; but there are still 137 differences in the notelists! *#$@$)(!#  A fair no. are
because of initial clefs on systems (since the system breaks are different). Why should
notelists include initial clefs? Surely most of the time users wouldn't care anyway, &
should be easy to skip them. Initial keysigs are already skipped, thanks to Tim C.

OK, done => down to 123 differences.

There's a 4-bar rest just before the 1st cues that should be 5 bars! => fixed.

Make tempo marks omit metronome mark when _noMM_ is set, keep multiline tempo marks on one
notelist line, etc. => down to 109 differences.

Other changes... => down to 62 differences! A lot of these are bcs of cues I added to
1stMovement_Part1-VnSolo.ngl; some due to reformatting affecting text (extensions, etc.).

More changes => down to 59 differences. !! The main problem now is starting w/ m. 137, which
-- thanks to cues in the tweaked part -- Ngale thinks has a duration of 2400 when it should
be 1920. Clearly a bug resulting from the clef change in the cues. Kludge around that =>
Ngale has the correct duration for m. 137 => only 28 differences!, and they all seem to be
legitimate.

-------------------------------------------------------------------------------

21-22 Nov.

I want to find measures that are incomplete on a given staff (as opposed to measures that are
incomplete or overfull across all staves, ala Show Duration Problems). The nicest UI by far
seems to be doing roughly what Show Duration Problems, but just shading the measure on the
relevant staff. Might as well have Show Duration Problems turn this on/off also!

Cf. DrawObject/ShadeProblemMeasure().

-------------------------------------------------------------------------------

8 Dec.

With the latest Ngale (5.7b8), Extracting the bassoon part of 3rdMovement.ngl crashes, at
the call to InitMeasure() at the end of MakeMeasure(). This looks like the same bug I ran
into in May (Issue #58).

-------------------------------------------------------------------------------

1 Jan. *** 2017 ***

The "standard" notation for artificial harmonics -- as recommended in _Behind Bars_, and
as seen in the Schoenberg Violin Concerto -- involves showing the sounding pitch with a
small notehead, in parentheses, a bit to the right of the stopped/touched pitch "dyad".
It's almost impossible to fake that in Ngale now, but it'd take a lot of work to
implement properly; besides, I think it's ugly, and I haven't actually seen it used in
many published scores at all. But something to help with _some_ kind of notation
explicitly showing stopped, touched, and sounding pitches would be very nice! And of
course it should play back properly. The best such non-ugly notation I can think of is
to add to the stopped/touched dyad a small notehead, preferably in parentheses, at the
sounding pitch; the small notehead would have the regular velocity, the stopped &
touched noteheads velocity 0.

Ignoring the parentheses for now, ideas: (1) add a command to take a single note
(sounding pitch); assuming the interval between stopped and touched pitches is a 4th(?),
it adds two lower notes of same duration with velocity 0, makes the top note small, and
the middle one of the three notes diamond shape.

Or maybe (2) the command takes a 3-note chord; makes the top note small, sets the lower
notes to velocity 0, and the middle one to diamond shape. Not as nice or helpful, but
considerably easier to implement!  Cf. MakeArtificialHarmonic.txt .

-------------------------------------------------------------------------------

5 Jan.

Trying to save MIDI files of my five violin concerto files, no problem with the first
two, but then Ngale keeps either writing garbage MIDI files (though they're playable,
and recognizable as the right music) or crashing! This is with the current Ngale 5.7b8,
running "inside" Xcode. Ngale 5.7b7 does better, but not _that_ much better. ?!? From
the log file when it doesn't crash:

	...
	Jan  5 11:06:30 DonDualG5 Ngale[64320]: WARNING: Tempo change in measure 187 at same time as a previous tempo change.
	Jan  5 11:06:30 DonDualG5 Ngale[64320]: WARNING: Tempo change in measure 192 at same time as a previous tempo change.
	Jan  5 11:06:30 DonDualG5 Ngale[64320]: WriteTrackName: staff=1 name='@û'
	Jan  5 11:06:30 DonDualG5 Ngale[64320]: WriteTrackPatch: staff=1 patch=1
	...

The last messages are WriteTrackName, WriteTrackPatch, and WriteMFNotes for staff=15 name='Cello'
-- oops, it should be double bass!?! Ah, the "staff" numbers are 1 too high because they're
really track numbers; even though doesn't seem to have crashed, it didn't get to the last staff
-- and the log file continues with stuff like:

	Jan  8 14:48:19 DonDualG5 ReportCrash[37243]: Formulating crash report for process quicklookd[37241]
	Jan  8 14:48:20 DonDualG5 Dock[146]: [QL ERROR] quicklookd crashed while thumbnailing /Users/donbyrd/Documents/2ndMovement.ngl.mid
	Jan  8 14:48:20 DonDualG5 Finder[152]: [QL ERROR] quicklookd crashed while thumbnailing file://localhost/Users/donbyrd/Documents/2ndMovement.ngl.mid
	Jan  8 14:48:20 DonDualG5 com.apple.launchd[128] (com.apple.quicklook[37241]): Exited abnormally: Bus error

When Ngale does crash:

	...
	Jan  5 11:08:23 DonDualG5 Ngale[64320]: WARNING: Tempo change in measure 189 at same time as a previous tempo change.
	Jan  5 11:08:23 DonDualG5 Ngale[64320]: WARNING: Tempo change in measure 206 at same time as a previous tempo change.
	Jan  5 11:08:34 DonDualG5 ReportCrash[64364]: Formulating crash report for process quicklookd[64352]
	Jan  5 11:08:34 DonDualG5 ReportCrash[64364]: Formulating crash report for process Nightingale[64320]
	Jan  5 11:08:36 DonDualG5 Finder[28098]: [QL ERROR] quicklookd crashed while thumbnailing file://localhost/Users/donbyrd/Documents/3rdMovement.ngl.mid
	...

This suggests the problems, or at least the crashes, aren't Ngale's fault. ??

Log out & back in; try 5.7b6 on 3rdMovement.ngl => another crash, with log:

	Jan  5 11:23:00 DonDualG5 Ngale[64713]: WARNING: Tempo change in measure 189 at same time as a previous tempo change.
	Jan  5 11:23:00 DonDualG5 Ngale[64713]: WARNING: Tempo change in measure 206 at same time as a previous tempo change.
	Jan  5 11:23:06 DonDualG5 ReportCrash[64721]: Formulating crash report for process Nightingale[64713]
	Jan  5 11:23:08 DonDualG5 ReportCrash[64721]: Saved crashreport to /Users/donbyrd/Library/Logs/CrashReporter/Nightingale_2017-01-05-112300_DonDualG5.crash using uid: 502 gid: 502, euid: 502 egid: 502
	Jan  5 11:23:08 DonDualG5 com.apple.launchd[118] ([0x0-0x7a77a7].com.amns.nightingale[64713]): Exited abnormally: Bus error

I almost certainly used 5.7b7 to generate the previous set of five MIDI files, w/ no
problems; that also suggests it isn't Ngale's fault! Reboot, try again => crashes.

Copy concerto Ngale files to MacBook 3; try 3rdMovement.ngl there w/ Ngale 5.7b8 =>
crashes; w/ Ngale 5.7b6 => another garbage MIDI file, different from a previous version.
It sounds as if the garbageness is because note times are scrambled, starting within the
first few seconds. %^&()##$@)+  Listen more closely to the new garbage file => it's OK!!! 
Maybe part of the problem is w/ QuickTime on my G5 -- but that doesn't explain the
crashes. ?!?

The crash seems to happen consistently w/ 3rdMovement.ngl, less consistently w/ other
files.

28 Jan.-1 Feb.

This bug is now Issue #123. But it bug seems to be totally gone! I haven't touched the
Import MIDI File code, but I exported each of the five chunks of the violin concerto,
the 3rd mvmt twice, with no problems!! Then I did them all again, in reverse order, w/
5.7b8 => no problems. Looks like I was "chasing a ghost", which isn't hard to believe in
view of the issues mentioned above. Try again w/ 5.7b6: open all five sections; export
1stMovement_Part1.ngl => no problem; 1stMovement_Cadenza.ngl => crashes ^#$%^(#$%!*%^ .
No, it's a bug, not a ghost! Part of traceback in Problem Report:

	Thread 0 Crashed:
	0   libSystem.B.dylib             	0x969ff7c8 strlen + 8
	1   libSystem.B.dylib             	0x96a94edc __vfprintf$LDBL128 + 16332
	2   libSystem.B.dylib             	0x96ad51cc vsprintf$LDBL128 + 228
	3   com.amns.nightingale          	0x0001b414 LogPrintf(short, char const*, ...) + 80
	4   com.amns.nightingale          	0x000ce2cc SaveMIDIFile(Document*) + 2508
	5   com.amns.nightingale          	0x00009a30 DoFileMenu(short) + 844
	6   com.amns.nightingale          	0x0000bd60 DoMenu(long) + 232

W/ 5.7b8, open all five sections; export 1stMovement_Part1.ngl => crashes, w/ traceback
identical to the above except for slightly different offset in SaveMIDIFile()  :-( . From
log file:

	Jan 29 09:17:51 DonDualG5 Ngale[27919]: WARNING: Tempo change in measure 173 at same time as a previous tempo change.
	Jan 29 09:17:51 DonDualG5 Ngale[27919]: WARNING: Tempo change in measure 198 at same time as a previous tempo change.
	Jan 29 09:17:58 DonDualG5 com.apple.launchd[1] (org.postfix.master[27914]): Stray process with PGID equal to this dead job: PID 27915 PPID 1 pickup
	Jan 29 09:18:10 DonDualG5 ReportCrash[27928]: Formulating crash report for process quicklookd[27929]
	Jan 29 09:18:12 DonDualG5 ReportCrash[27928]: Formulating crash report for process Nightingale[27919]
	Jan 29 09:18:12 DonDualG5 fseventsd[42]: callback_client: ERROR: d2f_callback_rpc() => (ipc/send) timed out (268435460) for pid 27919

Hmmmm -- WriteTrackName() calls LogPrintf() w/ an unintialized variable for a string
pointer! Could that be the problem? Fix it; open all five chunks; Export MIDI Files =>
no crash, but 1stMovement_Part1 & _Part3 have the scrambled note times problem :-( .

According to our Import MIDI File, 1stMovement_Part1_TRASHED.mid contains 3812 notes, while
1stMovement_Part1_OK.mid contains 3830!! Why? On a track-by-track basis, one track has 2 more
notes in the trashed version; others have the same number, or from 1 to ca. 3 fewer. Why?
1stMovement_Part3_TRASHED.mid contains 2640 notes, while 1stMovement_Part3_OK.mid contains
2641. ??

Very few of the functions in MIDIFSave.cp that actually write to the file check FSWrite()'s
return value for errors. Add checking to all, experiment more => after saving each of the five
concerto chunk MIDI files two or three times, no more bad MIDI files, and no errors detected.
Which proves nothing.

What else could be the problem? Ah, we're using pointers to Ngale objects in places where
memory could have moved without locking the HEAP, e.g., in WriteTrackName(); that could
lead to occasional crashes or strange behavior! ...Fixed all of those. Export all five concerto
chunks, PianoSonataMvmt, 2 violin duets, concerto chunks again => all OK! -- except that
Issue #114 is back!: While patch settings properly affect MIDI playback inside Ngale,
they have no effect on MIDI files Ngale writes. ??

-------------------------------------------------------------------------------

22- Jan.

"Measure duration/timestamps too large" bug is because, in FixMeasTimeStamps(), the value of
spTimeInfo[last].startTime is sometimes too large -- but not always, and if it is, not always
by the same amount! Open CalcLDur.ngl; delete whole rest in m. 3; re-insert it => 
sometimes spTimeInfo[last].startTime = 960 (correct), sometimes it's 1140, sometimes 1200!
So it's GetSpTimeInfo() that's misbehaving... Yes. Why? Because the whole rest doesn't always
get added to the 1st Sync of the measure! This could be WAD if Insert by Position was checked,
but it isn't. @#$#%^^!*# Is this worth fixing now? Maybe not.


Re discussion of artificial harmonics above for 1 Jan., #2 is almost certainly the way to go.
Cf. MakeArtificialHarmonic.txt . For UI, how about adding to QuickChange(TM)

	Change [3-note chord] to artificial harmonic 

-------------------------------------------------------------------------------

2-3 Feb.

I _think_ the Export MIDI File crash/trash bug is fixed, but now patch changes again aren't
working! @#)#$%#))%^  I fixed this in 5.7b5 just a few months ago! Test w/ Concerto
1stMovementPart1 & 5.7b6 => OK; w/ 5.7b8 => OK; w/ MIDISave.cp of 8 Jan., of 31 Jan., of 1
Feb., of 2 Feb. AM => all OK. So either I just broke this or it's a ghost! Test w/ latest
MIDISave.cp => still OK, so it's a ghost :-| .

-------------------------------------------------------------------------------

4-20 Feb.

Work on some "inadequate screen redrawing for dragging and/or nudging" bugs:

-1. Graphics (normally text) attached to the page: dragging gives feedback by showing
the bounding box moving around, then -- when you stop -- it draws the Graphic at its new
location. Not ideal, but good enough. But for nudging, the "feedback" is redrawing the
music area, which almost never contains the Graphic: pretty dumb looking! To fix, have
InvalSelRange check if anything selected is attached to the page, and if so inval the
entire window. Also not ideal: it'd be much nicer to just Inval the page; could I
implement that quickly & reliably?

-2. "Normal" Graphics: feedback for both dragging and nudging redraws only the Measure the
Graphic belongs to, but the Graphic often extends into the previous or the following
Measure. (And it sometimes extends even further, but that's rare enough to ignore.)

-Tempo marks, ottavas, and  slur/ties: feedback for dragging sometimes redraws
enough, but for nudging and sometimes for dragging, it redraws only the Measure. ??Actually,
feedback for dragging tempos sometimes works for the next measure as well, or even the
entire part of the system to the right! ??

-A good-enough (I think) solution: In all cases(?), after dragging and after each nudge,
redraw the previous Measure as well if it's in the same system; likewise for the
following Measure.

-3. Dynamics & modifiers: feedback for dragging covers a large enough area, but doesn't erase the
previous positions, so it leaves a trail! For nudging, redrawing the previous and next
Measures (if in the same System) is good enough.

-------------------------------------------------------------------------------

13 Feb.

Work on the "Consecutive measures of rest in extracted parts aren't combined into a
multi measure rest" bug (Issue #111)

The original description of the Issue (Aug 25, 2016):

In some cases, consecutive measures of rest in extracted parts aren't combined into a
multi measure rests, and for no obvious reason, e.g., there's no change of time
signature. Examples in my Violin Concerto include 1st mvmt Part 1, piano, mm. 195-199;
3rd mvmt, trumpet, mm. 75-79. In both of these, there's a system break in the score in
the middle of the area; could that be the reason?

Another theory. In both of the above-cited cases, a tempo mark is attached to the 1st
measure that's not merged into a multi measure rest. Is that the problem? Maybe part of
the problem: deleting the tempo mark in I, m. 195 results in the extracted piano part
going one measure further! Ah, of course: we continue multibar rests only as long as the
extracted part contains _nothing_ but normal single barlines and whole measure rests.
But why does the multibar rest still stop at m. 196? Because there's an invisible tempo
mark in that measure, attached to the solo violin part, but extracted anyway! This is
probably what I had in mind all along, i.e., thsi feature Works as Designed :-) .

-------------------------------------------------------------------------------

Early March

Replace (at long last!) our ridiculous timed-loop millisecond delay function with
something that uses gettimeofday()! It's been pointed out that timing something by
comparing values of gettimeofday() can fail badly if the OS decides to update the
time in the middle, but that's pretty unlikely for timing a few seconds or less, and
that's all Ngale ever does.

-------------------------------------------------------------------------------

9-16 March

Work on AddCautionaryTimesigs(). It's not hard to decide whether and where to add a
cautionary timesig, but how to actually add it to object list? It could just call
NewMeasure(), but might be better to mimic what NewMeasure() does to prepare, e.g.,
call GetContext(); then call CreateMeasure() to add the object... Just a minute! We have
the routines Open Notelist uses, in FileInput.C! Duh.

While I'm at it, clean the Open Notelist code up a bit & rename NotelistConvert.cp to
NotelistOpen.cp. Test w/ a couple of Vn Concerto notelists => !! It says of an M list
in each "can't parse"; why?  !! Now it crashes on a couple of Vn Concerto notelists (3rd
mvmt & one other; I'm not sure if they're the same ones). @%(@($@!)(  Try 3rd mvmt w/
last 5.7b10 (of 6 March) => same result. W/ 5.6 => no crash, but an error message that
system is too tall for the page, & score is unreadable; w/ 5.7b4 => no error message &
score looks fine; w5.7b7 => crashes. Back to 5.7b4 => it now crashes! So this almost
certainly isn't a ghost, but something random, maybe bcs of an uninitialized variable.
Okay; be sure several possible uninits are inited => says "Arranging measures into
systems", then crashes in the call to InitMeasure() in MakeMeasure(). Traceback:
	MakeMeasure called from
	CreateSystem called from
	RfmtSystems called from
	Reformat called from
	PositionWholeMeasures

. If it crashed really trying to call InitMeasure(),
maybe aPrevMeasL is null bcs... Ah, prevMeasL=0; that sure could explain it! In fact,
some code in MakeMeasure() checks if prevMeasL is NILINK or not and takes action in
each case, but the call to InitMeasure() and preceding lines assumes it's non-NILINK.
Fix that => seems OK, no crash!

-------------------------------------------------------------------------------

16 March

Switch from G5 to my old MacBook "3"; do more cleanup. Open 3rd mvmt notelist via Ngale
menu command => OK; via drop on Ngale icon => OK. Which proves nothing! But open 2nd
mvmt notelist via menu cmd =>

	can't parse the Notelist file.
	Problem in line 8394: "M stf=10 'L'istesso tempo...'
	"
	Miscellanous error.

This is almost certainly unrelated to the previous problem, and it's very probably
caused by the embedded "'" in the tempo mark.

-------------------------------------------------------------------------------

6-11 April

Finally implement the Add Cautionary Time Sigs command!, and Undo for it. It all seems
to work, except for handling cases where every staff doesn't have the same time sig., or
maybe doesn't have a time sig. at all. An extreme case: at the end of a system, all
staves are in 3/4; at the beginning of the next, some change to 6/8, some to 12/16, some
don't change at all.

-------------------------------------------------------------------------------

12 April

#Issue #73: Many of Ngale's own routines that sound like QuickDraw or something else
from Apple.To reduce confusion, rename them. Specifically, rename:

HiliteRect, GetPortTxFont, GetPortTxFace, GetPortTxSize, GetPortTxMode; SetFont
and SamePoint

...to (e.g.)

NHiliteRect, NGetPortTxFont, NGetPortTxFace, NGetPortTxSize, NGetPortTxMode, NSetFont,
NSamePoint.

There are more candidates for name changes in Utility.cp. But NB there are _lots_ of
calls to some of these, so may take awhile to change all!

-------------------------------------------------------------------------------

24-28 April

Last Sept., Laurie Spiegel had Ngale compiling with Xcode 7.3 & a recent mac OS; can I?

Try w/ Xcode 8.2.x on OS 10.12 => needs the OS 10.4 (or 10.4u?) SDK. Get it from Laurie;
quit Xcode, put the 10.4u SDK in the Xcode/Contents/Developer/...Developer/SDKs folder;
restart Xcode & open the Ngale project => Xcode doesn't seem to know the 10.4u SDK is
there, sigh. Try the same thing w/ Xcode 5.1.1 on OS 10.8.5 => Xcode lets me choose the
10.4 SDK; do so; Clean => says "unsupported compiler GCC 4.0". Not surprising! The only
other choice appears to be the default compiler, Apple LLVM 5.1; Clean => OK; Build =>
"error: unable to create target: 'No available targets are compatible with this triple,
see -version for the available targets.'" What triple?? And see "--version" in WHAT? I
suppose the compiler itself, but...

The next day, results are slightly different!? Both Clean and Build fail with 162 issues,
all fatal. The list of fatal errors is preceded by

  Target Integrity
    Invalid C/C++ compiler in target Nightingale: 4.0

The first fatal error is

  Dependency Analysis Error
    Unsupported compiler '4.0' selected for architecture 'ppc'

The others are all

  Dependency Analysis Error
  Unable to determine concrete GCC compiler for file /Users/donbyrd/NgaleDev/...XXX

where the 160 XXX's are the 160 source files.

This website has instructions for installing gcc 4.2.1 on OS 10.8, and says it works:

       https://www.cyberciti.biz/faq/howto-apple-mac-os-x-install-gcc-compiler/

-- though NB their demo of it working is via command line, not Xcode! They show the output
from _gcc --version_ as showing the gcc version, duh. But when I say _gcc --version_, I get

 Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
 Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)
 Target: x86_64-apple-darwin12.6.0
 Thread model: posix

Pretty obscure, but very likely the _gxx-include-dir_ path ending with 4.2.1 is just an
exceptionally user-unfriendly way to say version 4.2.1! So I already have it installed,
and maybe all I need to do is to tell Xcode to use it -- but the only choice besides
"Unsupported Compiler (4.0)" is "Default Compiler (LLVM 5.1)". Now what?? Now I say
this isn't worth the trouble! Michel S. said he wanted to try compiling Ngale with a
recent version of Xcode; more power to him.

-------------------------------------------------------------------------------

May 2, 2017

Hi Don,

I just got off a week of on-call and traveling for work, so I've not tried this -- but
found this interesting article:

https://www.cocoawithlove.com/blog/porting-from-macos8-to-sierra.html#conclusion

someone ported an old MacOS 8.x app to run on Sierra, still using Carbon -- it does
require having the 10.6 SDK.

-- 
Michel

Michel Alexandre Salim
profile:    https://keybase.io/michel_slm
GPG key ID: 4AF554ABA36A937A

-------------------------------------------------------------------------------

6 May ff.

Need to get the Ngale 5.7 codebase from the develop into the master branch! ??

...done; also, created branch develop5p8 ...

-------------------------------------------------------------------------------

10 May-7 June

To facilitate adding cues to extracted parts, how about a "Paste as Cue" command? It
should:
(1) put up a dialog to get voice no. n & cue note velocity v, & text of a Graphic to
display at beginning of the cue (presumably name of the instrument the cue is of);
(2) Paste Merge notes/rests _only_ from the clipboard into voice n;
(3) set notes/rest size to small, and note velocity to v; and
(4) attach the text Graphic to the 1st note (or rest? ??CF. GOULD!).

Step 3 might be difficult: the operation shouldn't affect the clipboard, so it must be
done either while the merge is in progress or afterwards. While the merge is in progress
there could be tricky problems with heaps, so best to do afterwards, but then how to
tell what objects/subobjects came from the clipboard? We're using the object-level
<spareFlag> to mark all objects from the clipboard. So after the merge, we can distinguish
notes/rests in Syncs w/ <spareFlag> set by voice or by their <merged> flags.

Hmmm. It seems that Paste Merge and Paste as Cue always go into voice 1, regardless of
the Looked at voice! I'm almost certain that Paste Merge used to do this correctly. ??

-------------------------------------------------------------------------------

8 - 13 June

Paste Merge and Paste as Cue _do_ seem to handle the Looked at voice correctly; the
apparent problem resulted from an anomaly in handling doc->lookVoice. Fixed.

BACK TO Paste as Cue. How to keep it from copying objects of all types into the score?
Try letting it copy everything, then delete undesired objects. Write ThinNonSyncObjects,
which calls DeleteNode() for objs of undesired types; call it from CleanupMerge => seems
to work okay, but if a dynamic was copied in, then removed, the dynamic context is left
in inconsistent state. Could fix that, presumably w/ FixContextForDynamic(), but anyway,
it'd be safer to avoid copying them in in the 1st place. Looks like non-Sync nodes are
handled via a "temporary object list"; see comment in MRearrangeAll()...

-------------------------------------------------------------------------------

16-20 June

It'd be really nice to record "permanently" if a note is a cue note, so (at a minimum)
Ngale knows how to play it appropriately -- the obvious thing being to play it at a
fixed velocity for cues. Is there a bit in ANOTE to record it, a bit that's guaranteed
to be initialized? Yes! There are several possibilities, e.g., the high order bit in
all three MIDI values, <rspIgnore>, and a bit in micropitch. The change should be low
impact, but should really display it in Get Info -- read only? -- and in Browser.
Decision: take the high-order bit of micropitch.

Work on Issue #142, undesirable change of stem directions on transposing notes in
multivoice situations. Tricky aspect: How far does the "situation" extend in each
direction from a Sync w/ multiple voices on the staff? Maybe just decide a measure
at a time. Also, must change ystem of MainNote as well as yd's of notes.

-------------------------------------------------------------------------------

22-27 June

BACK TO Paste as Cue. Non-Sync nodes are indeed handled via a temporary object list,
but only those from the score, not the clipboard! Nodes from the clipboard are moved
into the main object list by calls to RelocateClObjs and RelocateClGenlJDObjs in
MRearrangeAll. Is it as simple as skipping those calls to get only Syncs from the
clipboard? No: we also need slur/ties, tuplets, ottavas, and (probably) clefs in
the clipboard! Oh well; it really doesn't look hard to keep those and skip everything
else.

So in MRearrangeAll, must _always_ call RelocateClObjs and RelocateClGenlJDObjs,
passing the <syncsOnly> flag to them.

-------------------------------------------------------------------------------

29 June-1 July

For Paste as Cue, in MRearrangeAll, _always_ call RelocateClObjs and
RelocateClGenlJDObjs, passing the <syncsOnly> flag to them => done. ?! RelocateClObjs
and RelocateClGenlJDObjs have "break" statements where it realllly looks like they
should have "continue"s! As written, their _for_ loops are going to quit prematurely,
no?

Test to test Paste as Cue w/ all object types; cf. the objTable[], def'd in vars.h ??

-------------------------------------------------------------------------------

18 July

I give up on Paste as Cue, at least for the time being. I think it's almost working,
but have to do other things for the Concerto. So just pull the menu command out of
the menu and processing in Menu.cp... ??

-------------------------------------------------------------------------------

14 Aug.

Following up comments of 1 Jan., another idea for artificial harmonics: (3) take a chord
of three notes, meaning the obvious, as input. Do the same things as in idea #2, but
also move the top note into another voice and give it stem length 0! But is any version
of displaying artificial harmonics as such important enough to bother with? No, unless
Madalyn thinks it's important!

-------------------------------------------------------------------------------

23 Aug. - 15 Sept.

I need better tools for consistency checking of massaged parts against the score!
Ideas:
	+ Have Score Info display the score duration in ticks as well as measures & beats.
		This would allow directly comparing info on the score to info on any part.

For checks other than total duration, the easiest way is surely by comparing a NON-
massaged newly-extracted part to the massaged one, but how?

	+ Have Score Info optionally write its info to the log file, to facilitate
		doing text comparisons on the info from two scores
	+ Add a "skeleton" option to Save Notelist that writes out only general info:
		definitely time signatures and Measures; maybe tempo/MMs -- but the latter
		will be far more useful (i.e., far less confusing) if they always appear in
		the same place relative to their barlines.
	+ Make notelists more consistent to facilitate doing text comparisons on the
		info from two scores. Important: make tempo/MMs attached to barlines always
		appear in the same place relative to the barlines! Currently it's different
		for tempo/MMs attached to systems' initial (invisible) barlines from tempo/MMs
		attached to other barlines.

Actually, if a system ends with a barline -- say, measureNum = 8 (usually displayed
as 9) -- and it's not the last system in the score, then there are _two_ Measure objects
w/ measureNum 8: that one and the one w/ invisible barline at the beginning of the next
system! And a Tempo/MM attached to the invisible barline is in the object list
before its Measure, as always; it's just that the visible measureNum 8 is the one
that goes into the notelist, not the following and invisible one! How about just changing
that? In that case, we're not exactly "Sav[ing] Selection Notelist", but I don't think
anyone will notice... especially since probably noone but me is using notelists :-) .

-------------------------------------------------------------------------------

30 Sept. - 4 Oct.

To fit Nightingale conventions better and enhance code readability, use "True" and
"False" for Boolean constants. First, change all "TRUE" to "True" and all "FALSE" to
"False" => CarbonStubs.cp gets 6-11 compilation errors!? Everywhere else in Ngale, True
and False are defined, but I can't find the #defines; here they're _not_ defined, but I
can't see what the difference is! Anyway, at least for now, just #define them in
CarbonStubs.cp.

Stop the presses! application.h #define's them unless they're already #define'd.
(NB: chooseCharLDEF.h is pretty useless; clean it up!)

Now, change all "true" to "True" and all "false" to "False"...

-------------------------------------------------------------------------------

2-4 Oct.

According to BBEdit, a number of C files still have encodings other than UTF-8, mostly
ISO Latin-1. This could cause problems, e.g., with compiled-in non-ASCII chars., so
they should be converted to UTF-8:
+ CarbonStubs, Double, DrawUtils
+ About, ChordSym, MIDIFOCmd, UIFUtils

The vast majority of .h's seem to be in ISO Latin-1, etc., not UTF-8; these should also
be converted, but it's less likely to cause problems.

-------------------------------------------------------------------------------

27 Oct.

In DanceNotesDontPlayBug.ngl, play from start of m. 7 or earlier => the notes on the 3rd
eighth usually sound for a _very_ short time or not at all! Very occasionally they
sound for the correct duration. They're the same pitches as the notes on the 2nd eighth,
but with voices swapped. Play duration of notes on the 2nd eighth is 95% of written (228
ticks); shorten them to 83% (199 ticks) or less => all is well!  But it's not at all
clear what's causing this, and I suspect it won't be easy to track down or fix. TBC; put
it aside for now.

-------------------------------------------------------------------------------

31 Oct. - 8 Nov.

Open RespellAndTransp_2Voice.ngl, select all, transpose up 1 octave => the stem endpoints
are just where they used to be, so down stems are now way too long and up stems way too
short. This bug was introduced in 5.8b1; comment on the change is: "Partly fixed bug: When
notes are transposed or respelled, we always 'normalize' the new notation according to the
standard one-voice notation rules even if there are two voices on the staff." It's very
likely in FixVoiceForPitchChange(): the comment "In multivoice (>=2 voices on the staff)
notation, don't change stem direction, but preserve stem length" is immediately followed
by <return>, so it _doesn't_ preserve stem length. BUT preserving stem length isn't
right either! For unbeamed notes, probably call CalcYStem() with the current stem dir;
for beamed notes, probably just unbeam and rebeam... Actually, CalcYStem seems to handle
beamed notes too!

W/ Cadenza2VoiceTranspTest.ngl, sel. notes on last beat, respell => notes in voice 2 are
unchanged, so notation should be unchanged -- but they end up upstemmed. The cause:
FixBeamsInRange() rebeams all selected notes; it doesn't know they're unchanged, and it
knows nothing at all about multivoice notation!

FixBeamsInRange just calls Rebeam(doc, beamL); Rebeam calls

	CreateBEAMSET(doc, firstSyncL, RightLINK(lastSyncL), voice,
					nInBeam, False, doc->voiceTab[voice].voiceRole);

But the voiceRole recorded in the voice table is just the voice's _current_ role; it's
only weakly correlated with the role played by the notes in a given beamed group! Rebeam
should probably check if the beam's notes are involved in multivoice notation, and if
so, preserve the stem direction; likewise for unbeamed notes/chrds => done. Except
what does "involved in..." mean? The "neighborhood" matters too, especially for unbeamed
notes/chords; consider at least adjacent notes/chords on the staff => ??

And what if they _aren't_ involved in multivoice notation? Currently we use the
voiceRole, but again, that's only weakly correlated with the note(s)' role. Would it be
better to use single-voice rules? Probably, but maybe put that off for now??

-------------------------------------------------------------------------------

10 - 12 Nov.

GitHub comment on Issue #57 says "HiliteAttPoints() is used for double clicks on
Graphics, Syncs, Ottavas, and hairpin Dynamics: of these, currently only hairpin
Dynamics have two attachment points. It works for the one attachment point of Graphics
(bringing up a dialog), but does nothing visible for Syncs, Ottavas, and hairpin
Dynamics (which don't bring up a dialog)! Its failure is no problem for Syncs (which
can't be attached to anything anyway) and Ottavas, but for hairpin Dynamics, it means
the user has no indication that they're inserting the hairpin on the wrong staff (one
adjacent to the intended one)." Actually, hiliting works on Tempo/MMs and chord symbols
as well as Graphics, all of which bring up a dialog! So, regardless of implementation
details, the hilite lines show up if and only if there's a dialog on the screen; why?

In CheckTEMPO() calls HiliteInsertNode before putting its dialog up and after taking
it down. Comment out both => no hiliting appears, as expected.  Comment out only the 2nd
=> hiliting appears and disappears on alternate double-clicks, as expected. Add the
obvious code to hilite/unhilite hairpins => OK!

Status (for double-clicking):

Symbol					before	after
-------------------------------------
Sync (note or rest)		n		n
Dynamic, hairpin		n		Y		<-- Better.
Dynamic, other			Y		Y
Graphic, text			Y		Y
Graphic, chord symbol	Y		Y
Ottava					n		n
Slur					n		n
Tuplet					Y		Y
Tempo/MM				Y		Y
Ending					Y		Y

-------------------------------------------------------------------------------

What about feedback on inserting symbols?

Status (for insertion):

Symbol					now
-------------------------------------
Sync (note or rest)		Y
Dynamic, hairpin		1st pt.		
Dynamic, other			Y
Graphic, text			Y
Graphic, chord symbol	Y
Ottava					n
Slur					1st pt.
Tuplet					n
Tempo/MM				Y
Ending					Y, both pts.!

So we _do_ have code still gives proper feedback on insertion! ??

-------------------------------------------------------------------------------

13 Nov.

Minor cleanup: made voice role constants (now called VCROLE_xxx) independent of
Multivoice dialog item numbers, etc. Affects Check, Multivoice, and a bunch of other
files. Oops: it seems to handle Upper & Lower roles correctly, but not Single or
Cross-staff! Ah, a tiny mistake in the Multivoice dialog handler... Done.

-------------------------------------------------------------------------------

14 - 16 Nov.

For the last few days, I've been getting these messages from Debug Check while working
on All You Need Is Love:

--CHECK MASTER: sysR.right=9568, ESWidth=64, margR.right=594
 Done.    --CHECK CLIPBOARD: *DCheckNode: SYSTEM L4 RECT PAST RIGHT MARGIN (580 vs. 567).
sysR.right=9280, ESWidth=64, margR.right=567

Where does the "right margin" come from? Close the score, open a New score, do
Debug Check => the same messages, so it seems to have nothing to do with the
currently-open score. The rects being compared are d2pt(pSystem->systemRect.right)
and doc->marginRect.right, so it _is_ coming from the score! ??

Quit Ngale, re-launch, New, Debug Check =>

	DEBUG 'Menu'-Standard: --CHECK MAIN:
	sysR.right=9136, ESWidth=64, margR.right=567
	Discont. sel, 0 objs in range, 0 sel, 10 total.  0 voices.
	--CHECK MASTER: sysR.right=9072, ESWidth=64, margR.right=567
	 Done.    --CHECK CLIPBOARD: sysR.right=9136, ESWidth=64, margR.right=567

...no complaint. Open "All You Need Is Love", Debug Check =>

	--CHECK MASTER: sysR.right=9280=580 pt, ESWidth=64, margR.right=576
	 Done.    --CHECK CLIPBOARD: sysR.right=9136=571 pt, ESWidth=64, margR.right=567

...still no complaint. But do a Copy, Debug Check =>

	--CHECK MASTER: sysR.right=9280=580 pt, ESWidth=64, margR.right=576
	 Done.    --CHECK CLIPBOARD: *DCheckNode: SYSTEM L4 RECT EXTENDS INTO RIGHT MARGIN (580 vs. 567).
	sysR.right=9280=580 pt, ESWidth=64, margR.right=567

The expression for checking systemRect.right has always involved subtracting
ExtraSysWidth(doc) , the width of the widest barline (final double). In Oct. 2015, I
kludged that by subtracting 2*ExtraSysWidth(doc) to sidestep the problem, but that's not
enough for the Clipboard after a Copy operation in All You Need Is Love, presumably bcs
its right margin is 0.50" instead of the default 0.63", so systemRect.right is
larger, but marginRect.right is unchanged. What should this be?

We're obviously comparing a systemRect from the main object list that's been copied to
the clipboard to one from the clipboard! But this complaint is about soomething very
unimportant; just skip this check on the clipboard => OK. (And likewise for "SYSTEM RECT
BELOW BOTTOM MARGIN".)

-------------------------------------------------------------------------------

25 - 26 Nov.

New, insert text Graphic, double-click it, do anything to enlarge it => only the area it
formerly occupied is redrawn. The same thing happens with tempo marks and dynamics. Why?

In CheckGRAPHIC(), at end of case SMDblClick, add

	InvalObject(doc, pL, True)
	
=> no change. That's strange, since InvalObject ends with

		if (doErase)	EraseAndInval(&r);

...and True = doErase. But it looks like the call to InvalObject happens before we call
DrawGRAPHIC and get the new, enlarged bbox:

Nov 27 10:33:35 DonDualG5 Ngale[74259]: GetGraphicDBox: pDBox=-128,0,32,240
Nov 27 10:33:35 DonDualG5 Ngale[74259]: DrawGRAPHIC>GetGraphicDBox: doDraw=0 pDBox=-128,0,32,240
Nov 27 10:33:35 DonDualG5 Ngale[74259]: InvalObject: r=123,169,138,192 doErase=0
Nov 27 10:33:35 DonDualG5 Ngale[74259]: GetGraphicDBox: pDBox=-128,0,32,240
Nov 27 10:33:35 DonDualG5 Ngale[74259]: DrawGRAPHIC>GetGraphicDBox: doDraw=1 pDBox=-128,0,32,240
Nov 27 10:33:51 DonDualG5 Ngale[74259]: GetGraphicDBox: pDBox=-128,0,32,240
Nov 27 10:33:51 DonDualG5 Ngale[74259]: DrawGRAPHIC>GetGraphicDBox: doDraw=0 pDBox=-128,0,32,240
Nov 27 10:33:51 DonDualG5 Ngale[74259]: InvalObject: r=123,169,138,192 doErase=1
Nov 27 10:33:51 DonDualG5 Ngale[74259]: TextDialog: *expanded=0 theExpanded=0
Nov 27 10:34:24 DonDualG5 Ngale[74259]: GetGraphicDBox: pDBox=-128,0,32,240
Nov 27 10:34:24 DonDualG5 Ngale[74259]: DrawGRAPHIC>GetGraphicDBox: doDraw=0 pDBox=-128,0,32,240
Nov 27 10:34:24 DonDualG5 Ngale[74259]: InvalObject: r=123,169,138,192 doErase=1
Nov 27 10:34:25 DonDualG5 Ngale[74259]: GetGraphicDBox: pDBox=-128,0,32,768
Nov 27 10:34:25 DonDualG5 Ngale[74259]: DrawGRAPHIC>GetGraphicDBox: doDraw=1 pDBox=-128,0,32,768

Wrong. InvalObject itself calls DrawGRAPHIC, which call GetGraphicDBox, but GetGraphicDBox
still returns the old bbox. Why?

Nov 27 13:10:01 DonDualG5 com.apple.launchd[1] (org.postfix.master[76341]): Stray process with PGID equal to this dead job: PID 76343 PPID 1 qmgr
Nov 27 13:10:06 DonDualG5 Ngale[76329]: CheckGRAPHIC: <InvalObject 1
Nov 27 13:10:06 DonDualG5 Ngale[76329]: GetGraphicDBox: count lines=1 fontID, Size, Style=20, 9, 0 str='asdf'
Nov 27 13:10:06 DonDualG5 Ngale[76329]: GetGraphicDBox: pDBox=-128,0,32,240
Nov 27 13:10:06 DonDualG5 Ngale[76329]: DrawGRAPHIC>GetGraphicDBox: doDraw=0 pDBox=-128,0,32,240
Nov 27 13:10:06 DonDualG5 Ngale[76329]: InvalObject: r=120,169,135,192 doErase=1
Nov 27 13:10:06 DonDualG5 Ngale[76329]: TextDialog: *expanded=0 theExpanded=0

Double-click, lengthen string =>

Nov 27 13:10:21 DonDualG5 Ngale[76329]: CheckGRAPHIC: <InvalObject 2
Nov 27 13:10:21 DonDualG5 Ngale[76329]: GetGraphicDBox: count lines=1 fontID, Size, Style=20, 9, 0 str='asdf'
Nov 27 13:10:21 DonDualG5 Ngale[76329]: GetGraphicDBox: pDBox=-128,0,32,240
Nov 27 13:10:21 DonDualG5 Ngale[76329]: DrawGRAPHIC>GetGraphicDBox: doDraw=0 pDBox=-128,0,32,240
Nov 27 13:10:21 DonDualG5 Ngale[76329]: InvalObject: r=120,169,135,192 doErase=1
Nov 27 13:10:21 DonDualG5 Ngale[76329]: GetGraphicDBox: count lines=1 fontID, Size, Style=20, 9, 0 str='asdfXXXXX'
Nov 27 13:10:21 DonDualG5 Ngale[76329]: GetGraphicDBox: pDBox=-128,0,32,768
Nov 27 13:10:21 DonDualG5 Ngale[76329]: DrawGRAPHIC>GetGraphicDBox: doDraw=1 pDBox=-128,0,32,768

No, right! InvalObject calls DrawGRAPHIC, which call GetGraphicDBox, which returns the old bbox;
then _somebody_ calls DrawGRAPHIC and gets the new, enlarged bbox, but it's too late. ??

To Be Continued.

-------------------------------------------------------------------------------

3 - 5 Dec.

Issue #163: The current version of my arrangement of All You Need Is Love, on four
staves in one group, has a repeat bar that should just be a double barline. However,
setting the type to double barline with the QuickChange command affects only two staves;
it should affect the entire group. This is especially serious because there's no way to
fix this with Get Info.

Cause: SetMeasType() correctly operates only on Measure subobjects that are selected,
but clicking anywhere on the barline in question selects only staves 1 and 3. This is
a bug in CheckMEASURE(), case SMClick:

 * Measure subobjects are unusual in that they may be grouped as indicated by
 * connAbove and connStaff, and groups can only be selected as a whole. If this
 * measure is the top one of a group, set rSub and groupTopStf/groupBottomStf
 * to include the entire group; if it's a lower one of a group, they will then
 * already be set correctly. Notice that this code assumes that when a lower
 * subobject of a group is encountered, we've already set rSub from the top one
 * of the group; this is safe as long as we insert subobjects for all staves at
 * once and in order (FIXME: this is questionable -- check it!), and don't
 * allow deleting anything but the entire object.

That assumption isn't just questionable, it's wrong! But CheckMEASURE() does a lot of
different things and the code is a mess, so it's difficult to undo properly. Well, find
the visible staves in the group 1st and operate on all and only those => W%^)(#%$% just
inserting a barline crashes in CheckMEASURE for a different case! But it shouldn't be
hard to avoid impacting any case other than SMClick by using my new utility routines
GetStaffGroupBounds() and GetMeasureVisStaffBounds()... Done!

-------------------------------------------------------------------------------

6 - 7 Dec.

With the latest, New, insert chord symbol => log message "GetGraphicDBox failed. pL=10" and
nothing is drawn. Open file containing chord symbol => it's not drawn. With 5.8b4, no
problem. Huh?

With either version, an apparently-correct Graphic of subtype GRChordSym is added to the
object list. Ah, but the code in GetGraphicDBox, case GRChordSym:

			return False;									/* Handled by DrawChordSym */

So it shouldn't even be getting called! But how has this ever worked?? I see; until very
recently, the return False was ignored; everything for chord symbols is handled by
DrawChordSym! Not wonderful. But by far the easiest acceptable fix is to really skip
calling GetGraphicDBox for chord symbols, _and_ add a comment to explain => done.

-------------------------------------------------------------------------------

22 - 25 Jan. *** 2018 ***

I've been thinking for a long time that Carbon-based applications can't work past OS
10.6, but that's dumb: It's obvious now (from statements by Michel Salim and many
others) they work fine all the way thru at least OS 10.12; it's just PowerPC apps, like
all versions of Nightingale to date, that croak at 10.7! Xcode 2.5 & 3.2 both claim to
be able to compile to i386 code, and on both, the SDK I'm using is "MacOSX10.4u.sdk" --
"u" presumably meaning "Universal". So:

In the Ngale project in Xcode 2.5 (on my G5), for Configuration "Release", select both
PPC and i386; clean and build => Nope, result is still PPC only. Select only i386 =>
still PPC only. Quit Xcode, re-launch, compile for only i386 again => still PPC only!

In the Ngale project in Xcode 3.2 (on my MacBook Air), for Configuration "Release",
select "Standard (32/64-bit Universal", clean & build => still PPC only! #^**)E%$()_* .
Select "Native Architecture of Build Machine" (it'a an Intel Core 2 Duo) => STILL PPC
only!!??

From http://www.cocoabuilder.com/archive/xcode :
	
	"When I upgraded from Xcode 3.2.3 to 3.2.6, Xcode "erased" my universal build
	settings, as many of you probably know or experienced. I've tried to restore them
	with some info found on the web, but what I've wound up with is builds that are
	universal, but do not actually run in 64 bit mode. Can someone please tell me
	precisely what the correct build settings should be? This is what I have:
	
	Architectures: i386 ppc
	Base SDK: Current Mac OS  (** now on SL)
	Valid Architectures: x86_64 i386 ppc ppc7400 ppc970
	Mac OS X 10.5:  x86_64 i386 ppc64
	
	Compiler Version: GCC 4.2
	Mac OS X Deployment Target: Mac OS X 10.4
	
	"Note that I created an additional "valid architecture" at one point, because I need
	to weak link some frameworks for 10.5+ It must run on OS X 10.4"

It's not clear if this helps. What's the relationship between "Architectures" and "Valid
Architectures" and what Xcode does? According to the Xcode Build Setting Reference, Xcode
intersects the two lists and that's what it actually builds for. Okay, but Xcode's Get
Info for Nightingale.xcodeproj, "All Settings", dosn't even show Valid Architectures!
But they're probably in the xcodeproj in an intelligible form? Yes! project.pbxproj is in
a JSON-like format; its XCBuildConfiguration section shows Debug and Release configs --
in fact, two of each! And of the two Release configs, the 2nd has 

				ARCHS = (
					i386,
					ppc,
				);

...which agrees with what Get Info shows; but the 1st just has ARCHS = ppc. Also, the
1st has VALID_ARCHS = "i386 ppc"; the 2nd doesn't have a VALID_ARCHS. Maybe Xcode is
paying attention to the 1st? Try hand editing its ARCHS to the same as the 2nd; clean;
build => it says it's compiling 320 source files, about twice the usual number!! Yay!!
And, sure enough, it builds a Universal app, one that runs on my OS 10.8.x Intel MacBook
-- sort of. It's still unusable with Intel processors so far, probably because of Endian
issues. It gives 11 CNFG errors:

	Checking CNFG:  err #1, err #36, err #36, err #46, err #47, err #62, err #65,
		err #68, err #78, err #79, err #84, TOTAL OF 11 ERROR(S) FOUND.

...and doesn't even seem to be able to draw a staff! ??

-------------------------------------------------------------------------------

26 - 31 Jan.

On my MacBook Air: Try the Endian approach to Ngale's problems on Intel processors,
which are little Endian: use  Michel Salim's nice FIX_END macro, in EndianUtils.h. New
function EndianFixConfig() calls FIX_END for ca. 40 config fields => all config fields
are (I think) OK! -- but when I quit, Ngale always thinks the config has changed and
writes it out in little Endian form :-( . Add call to EndianFixConfig() in
UpdatePrefsFile() => that's OK too.

Next problem: click "New Nightingale File" => error message in BuildCharRectCache():
"Can't scale the music font: reference symbol has height zero." In fact, for
the reference char, the bbox.bottom = bbox.top = 0! From the system log:

	Ngale[47090]: Music font is 'Sonata' (font no. 242).  (InitDocMusicFont)
	coreaudiod[196]: Disabled automatic stack shots because audio IO is active
	Ngale[47090]: Music font is 'Sonata' (font no. 242).  (InitDocMusicFont)
	Ngale[47090]: ATS: Invalid FontObjectID (3) - only low 16 bits are being passed in.
	Ngale[47090]: fontNum=242 refCode=38 bbox[].bottom=0 .top=0.  (BuildCharRectCache)

"ATS: Invalid FontObjectID (3)" sounds bad; could be a symptom of the problem.

On my OS 10.11.x Mac mini, launch the latest => says "Can't create a Nightingale Prefs
file"! Try again => this time it creates one!; "New Nightingale File" => the same
error message, this time for Briard.

-------------------------------------------------------------------------------

1 - 5 Feb.

On my OS 10.6 MacBook 3: The PowerPC build works fine, as expected.  The Intel build
fails in exactly the same ways as on MacBook Air.

BuildCharRectCache() gets the ref. symbol's bbox from InitMusFontTables() -- which gets
font info directly from a resource, so is vulnerable to endian problems. Add some calls
to FIX_END => no complaints from BuildCharRectCache(), and Ngale displays clefs, time
sigs., notes, & rests correctly!, except (a) no flags, & selection hiliting for most
symbols is a bit too low. Also, in a New score, the only staff line visible is the bottom
line of the lower staff -- but there's some mysterious heavily strrrretched out stuff,
very likely supposed to be the other staff lines! Add staff below => It's fine in both
regular & Master Page; add staff above => likewise. ??
Do I need more calls to FIX_END? Probably :-| . TO BE CONTINUED.

Possibly related: the palette on both computers is blank, though it behaves correctly,
i.e., hiliting clicked-on squares, changing the cursor, and causing subsequent clicks
in the score to do the right thing. DrawToolMenu() does the drawing, assuming an
image of the palette is in global _palPort_ where SetupToolPalette() puts it. But is
it really ever getting into palPort?? How can I tell??? Well, I can compare the port
bitmaps on Intel (where it isn't drawn) to PowerPC (where it is) -- e.g., crudely via
counting the no. of set bits in each. Write MemBitCount() => ??
MemBitCount(blah, 300) on PPC: 369, then 380(?)
"	"	"	" on Intel: 353, then 364: different, but not by nearly enuf to explain
the difference between a blank palette and a correct one!?! Of course 300 bytes is
nowhere near the size of the bitmap,which should be the same as the portRect: roughly
(399*271)/8 = 13500. What about the port bitmap Rect? On PPC:

	DrawToolMenu: ...portRect tlbr=0,0,399,271
	
but on Intel (MBAir):

	DrawToolMenu: ...portRect tlbr=0,0,399,-1073750488
	
!! So why is portRect.Right garbage on Intel??

!! After some bizarre behavior from LogPrintf and finagling w/ calls to it, I get this
on both PPC _and_ Intel:

	SetupToolPalette: MemBitCount(palPortBits, -)=262 portRect tlbr=0,0,399,271
	DrawToolMenu: MemBitCount(palPortBits, -)=262 portRect tlbr=0,0,399,271	

-- exactly the same on both, and all reasonable values now! Now what??

For 400 bytes:
on PPC, MemBitCount from SetupToolPalette = 262, from DrawToolMenu = 262
on Intel, MemBitCount from SetupToolPalette = 388, from DrawToolMenu = 388

For 600 bytes:
on PPC, MemBitCount from SetupToolPalette = 427 or 412, from DrawToolMenu = 427 or 412
on Intel, MemBitCount from SetupToolPalette = 546 or 572, from DrawToolMenu = 546 or 572

-------------------------------------------------------------------------------

7 Feb.

BACK TO the "in a New score, the only staff line visible is the bottom line of the lower
staff -- but there's some mysterious heavily strrrretched-out stuff, very likely
supposed to be the other staff lines" bug: actually, the strrrretched-out stuff is the
Connect! Which is a curly brace read from a resource, so it's vulnerable to the Endian
problem. Skip DrawCONNECT => yep: strrrretched-out stuff disappears, and all staff lines
appear! Put DrawCONNECT back, add FIX_END()'s => yep: Connect appears!

DrawToolPalette: MemBitCount(palPortBits, 600)=427 portRect tlbr=0,0,399,271
Feb 17 09:59:14 DonDualG5 Ngale[33188]: d. SizeMenu: charHt=26 charWid=24 numRows=3 numColumns=9
10 - 14 Feb.

Everything from any call to GetResource(), Get1Resource, etc.,  could be vulnerable to
the Endian problem, except (I think!) for Apple-defined resources like 'DITL', 'PAT ',
'PICT', 'STR#', 'TEXT'. Specifically, all multibyte fields containing numbers in:

+Config
+MIDI ModNR table
+-PaletteGlobals
-spaceMap (doc specific)
-??

Need to go thru _all_ the calls in Ngale! See list in QGetResourceQ.txt .

GitHub Issues 171 & 172 are probably both Endian-related:

When you launch Ngale on an Intel machine, problems appear instantly. On Don's MacBook
Air and (old) MacBook, the palette is never drawn. On the MBAir, the opening dialog is
much too tall and, the vast majority of the time,doesn't show the "New Nightingale
Score" and "Cancel" buttons -- until you resize it, that is. On the old MacBook, that
dialog is fine.

Trying to open an existing Ngale file on Intel CPUs gives a series of strange error
messages and, on Don's MacBook Air, crashes or at best displays just the background
image; on his old white MacBook, it hangs.

-------------------------------------------------------------------------------

16 - 17 Feb.

On my MBAir, the Set Duration "menu" (palette) seems to be waaaaay too large.
In GraphicMDEF.cp on G5 (with "Show two dots" unchecked):

	d. SizeMenu: charHt=26 charWid=24 numRows=2 numColumns=9
	d. InitGlobals: gNumItems=18 gNumCols=9 gNumRows=2 gItemHt=26 gItemWid=26

...all reasonable values -- and after adding a few FIX_ENDs to GraphicMDEF.cp, on MBAir,
they're all?? the same, but the Set Duration dialog is no better! Ah, it's _not_ the
popped-up palette; it's the unpopped version, showing a single char, which is waaaay,
WAY too large -- and InitGPopUp() in DurationPopUp sure seems to need FIX_ENDs. Add
'em => all OK! I.e., the unpopped version is drawn correctly; the popped version
is the right size, the selected item is hilited, and selecting other items works
correctly; but the popped palette is blank. Just like the tool palette :-( .

-------------------------------------------------------------------------------

19 - 21 Feb.

I've been using a list of all calls to GetResource, Get1Resource, and GetNamedResource,
and checked almost all of 'em out -- but I forgot about LoadResource! There are calls to
LoadResource in GraphicMDEF; add FIX_ENDs for them => better: the popped-up duration palette is
filled in now, but every other char. is missing! %*&#%(_%  Likewise for the dynamics popup
and the Add Modifier palette $($@$%* .

Log on my PPC G5:

	Ngale[68821]: d. SizeMenu: charHt=26 charWid=24 numRows=2 numColumns=9
	--- last message repeated 1 time ---
	Ngale[68821]: d. InitGlobals: gNumItems=18 gNumCols=9 gNumRows=2 gItemHt=26 gItemWid=24
	--- last message repeated 1 time ---
	Ngale[68821]: d. DrawMenu: NOSCROLL i=1 theRect tlbr=166,768,192,792
	Ngale[68821]: d. DrawMenu: NOSCROLL i=2 theRect tlbr=166,792,192,816
	Ngale[68821]: d. DrawMenu: NOSCROLL i=3 theRect tlbr=166,816,192,840
	Ngale[68821]: d. DrawMenu: NOSCROLL i=4 theRect tlbr=166,840,192,864
	Ngale[68821]: d. DrawMenu: NOSCROLL i=5 theRect tlbr=166,864,192,888
	Ngale[68821]: d. DrawMenu: NOSCROLL i=6 theRect tlbr=166,888,192,912
	Ngale[68821]: d. DrawMenu: NOSCROLL i=7 theRect tlbr=166,912,192,936
	Ngale[68821]: d. DrawMenu: NOSCROLL i=8 theRect tlbr=166,936,192,960
	Ngale[68821]: d. DrawMenu: NOSCROLL i=9 theRect tlbr=166,960,192,984
	Ngale[68821]: d. DrawMenu: NOSCROLL i=10 theRect tlbr=192,768,218,792
	Ngale[68821]: d. DrawMenu: NOSCROLL i=11 theRect tlbr=192,792,218,816
	Ngale[68821]: d. DrawMenu: NOSCROLL i=12 theRect tlbr=192,816,218,840
	Ngale[68821]: d. DrawMenu: NOSCROLL i=13 theRect tlbr=192,840,218,864
	Ngale[68821]: d. DrawMenu: NOSCROLL i=14 theRect tlbr=192,864,218,888
	Ngale[68821]: d. DrawMenu: NOSCROLL i=15 theRect tlbr=192,888,218,912
	Ngale[68821]: d. DrawMenu: NOSCROLL i=16 theRect tlbr=192,912,218,936
	Ngale[68821]: d. DrawMenu: NOSCROLL i=17 theRect tlbr=192,936,218,960
	Ngale[68821]: d. DrawMenu: NOSCROLL i=18 theRect tlbr=192,960,218,984

On my Intel MBAir:

	Ngale[68496]: d. SizeMenu: charHt=26 charWid=24 numRows=2 numColumns=9
	Ngale[68496]: d. SizeMenu: charHt=26 charWid=24 numRows=2 numColumns=9
	Ngale[68496]: d. InitGlobals: gNumItems=18 gNumCols=9 gNumRows=2 gItemHt=26 gItemWid=24
	Ngale[68496]: d. InitGlobals: gNumItems=18 gNumCols=9 gNumRows=2 gItemHt=26 gItemWid=24
	Ngale[68496]: d. DrawMenu: NOSCROLL i=1 theRect tlbr=166,672,192,696
	Ngale[68496]: d. DrawMenu: NOSCROLL i=2 theRect tlbr=166,696,192,720
	Ngale[68496]: d. DrawMenu: NOSCROLL i=3 theRect tlbr=166,720,192,744
	Ngale[68496]: d. DrawMenu: NOSCROLL i=4 theRect tlbr=166,744,192,768
	Ngale[68496]: d. DrawMenu: NOSCROLL i=5 theRect tlbr=166,768,192,792
	Ngale[68496]: d. DrawMenu: NOSCROLL i=6 theRect tlbr=166,792,192,816
	Ngale[68496]: d. DrawMenu: NOSCROLL i=7 theRect tlbr=166,816,192,840
	Ngale[68496]: d. DrawMenu: NOSCROLL i=8 theRect tlbr=166,840,192,864
	Ngale[68496]: d. DrawMenu: NOSCROLL i=9 theRect tlbr=166,864,192,888
	Ngale[68496]: d. DrawMenu: NOSCROLL i=10 theRect tlbr=192,672,218,696
	Ngale[68496]: d. DrawMenu: NOSCROLL i=11 theRect tlbr=192,696,218,720
	Ngale[68496]: d. DrawMenu: NOSCROLL i=12 theRect tlbr=192,720,218,744
	Ngale[68496]: d. DrawMenu: NOSCROLL i=13 theRect tlbr=192,744,218,768
	Ngale[68496]: d. DrawMenu: NOSCROLL i=14 theRect tlbr=192,768,218,792
	Ngale[68496]: d. DrawMenu: NOSCROLL i=15 theRect tlbr=192,792,218,816
	Ngale[68496]: d. DrawMenu: NOSCROLL i=16 theRect tlbr=192,816,218,840
	Ngale[68496]: d. DrawMenu: NOSCROLL i=17 theRect tlbr=192,840,218,864
	Ngale[68496]: d. DrawMenu: NOSCROLL i=18 theRect tlbr=192,864,218,888

...exactly the same coords., except on MBAir the x coords. are all 96 less -- which hardly
explains the missing chars! ??

On Intel, in the 1st row, the odd-numbered chars. are drawn; in the 2nd row, the even-
numbered chars.; in the 3rd row (if "Show 2 dots" is checked), again the odd-numbered
chars.

So Ngale is (trying to) draw the chars. in the right positions. What chars. is it drawing?
On my G5:

	Ngale[69602]: d. DrawMenu: NOSCROLL i=1 theRect tlbr=166,768,192,792
	Ngale[69602]: d. DrawItem: item=1 theChar=2 itemRect->left=768, ->bottom=192
	Ngale[69602]: d. DrawMenu: NOSCROLL i=2 theRect tlbr=166,792,192,816
	Ngale[69602]: d. DrawItem: item=2 theChar=0 itemRect->left=792, ->bottom=192
	Ngale[69602]: d. DrawMenu: NOSCROLL i=3 theRect tlbr=166,816,192,840
	Ngale[69602]: d. DrawItem: item=3 theChar=. itemRect->left=816, ->bottom=192
	Ngale[69602]: d. DrawMenu: NOSCROLL i=4 theRect tlbr=166,840,192,864
	Ngale[69602]: d. DrawItem: item=4 theChar=, itemRect->left=840, ->bottom=192
	Ngale[69602]: d. DrawMenu: NOSCROLL i=5 theRect tlbr=166,864,192,888
	Ngale[69602]: d. DrawItem: item=5 theChar=* itemRect->left=864, ->bottom=192
	etc. etc.
	
...and the log on my MBAir shows the same sequence of chars. :-( .

But the curly brace char. for Connects is fine! So the problems seem to be related to
drawing palettes that we handle as pop-up menus.

-------------------------------------------------------------------------------

23 - 25 Feb.

Status: In all cases, selecting and hiliting are fine; the only problem is drawing; for
the pop-ups (all but the tool palette), the problem is only in the popped-up state.
Exactly what is drawn?

* TOOL PALETTE: 'PLCH' & 'PLMP' resources; drawing via CopyBits(). Nothing is drawn
except the grid and hiliting.

* ALL OTHERS: 'chgd' (& 'SICN' for arrows) resources; drawing via DrawChar(). Odd numbered
chars are drawn, but:
* Duration palette: clicking on an even numbered char. draws it before the palette closes!
* Dynamic palette: just hovering over an even numbered char. sometimes draws it (and
erases the next one?); clicking always does.
* Modifier palette: just hovering over an even numbered char. OFTEN draws it (and
occasionally erases the next one?); clicking always does.

Ah, if HiliteMenuItem() finds <previousItem> and <newItem> are different, it calls
InvertItem for each, and InvertItem actually redraws the item! This makes more sense.
Hmmm... InvertItem sets a clipping region, and it has a comment "All this clipping stuff
is probably unnecessary, but it doesn't hurt." But maybe it does!? Try on MBAir => nope;
no change -- except I now see an odd numbered char. disappearing instead of an even one
appearing! ??

-------------------------------------------------------------------------------

28 Feb.

Summary of known problems on Intel machines as of the 25 Feb. commit:

1. On launch, (a) the initial Open File dialog is much too tall, and (b) the "New
Nightingale Score" and Cancel buttons usually aren't shown until you resize it;
nonetheless you can click on them and they work!

2. On launch, the tool palette isn't filled in, though it works perfectly in terms of
selecting tools and hiliting their squares. Nothing I've tried -- resizing, etc. -- gets
Ngale to fill it in.

3. The three pop-up menu palettes all have similar problems drawing their contents.
Launch, New Nightingale Score, insert a note, Set Duration, click on the note => the
palette pops up, but only odd-numbered squares are filled in. See 22-25 Feb. above for
details.

4. The selectable area (& hiliting for it) is the same as on PPC for timesigs, but slightly
too low for most other symbols.

(Note: My G5 suddenly became unusuable on 28 Feb.; a one-week hiatus ensued while I got
it working again.)

-------------------------------------------------------------------------------

9 - 11 March

My comment of 7 Feb.: "Everything from any call to GetResource(), Get1Resource, etc.,
could be vulnerable to the Endian problem, except (I think!) for Apple-defined resources
like 'DITL', 'PAT ', 'PICT', 'STR#', 'TEXT'." Apple Universal Binary Programming
Gudidelines confirms that Apple takes care of Endianness for their own resources, so my
problems are definitely elsewhere!

How about the excessive height of the initial Open File dialog on my MacBook Air? This
is set in NSNavOpenEventProc(), called from NavCreateGetFileDialog() via a UPP that's
the latter's 3rd parameter. On my G5, it's 401; on my MacBook Air, it's 820. Why?? On my
old MacBook w/ the PPC version (via Rosetta), it's 397, which is a bit smaller but OK, &
it shows all its buttons; w/ the Intel version, it's 397, which is OK, & it shows all
its buttons! On my Mac mini, it's 457, somewhat larger but OK, & it shows all its
buttons. On all three Intel systems, the tool palette behaves the same (it's never
filled in, though it works perfectly otherwise), and the three pop-up menu palettes have
similar problems drawing their contents. Sigh... I have no idea; TBContinued.

-------------------------------------------------------------------------------

11 - 13 March
On the selection area/hiliting problem: New, Select All => look at log:

On Intel (MBAir):
3/11/18 5:33:04.485 PM Ngale[81606]: debug. CheckCLEF: wSub=-23904,-23913,-23878,-23904
3/11/18 5:33:04.485 PM Ngale[81606]: debug. CheckCLEF: wSub=-23859,-23913,-23848,-23903

On PPC (G5):
Mar 11 17:31:57 DonDualG5 Ngale[45230]: debug. CheckCLEF: wSub=-23908,-23913,-23882,-23904
Mar 11 17:31:57 DonDualG5 Ngale[45230]: debug. CheckCLEF: wSub=-23863,-23913,-23850,-23903

So wSub.top and wSub.bottom really are slightly less negative (= lower on the page) on
Intel. Is it the same font? Yep, Briard for both. CheckCLEF sets wSub like this:

		rSub = charRectCache.charRect[glyph];
		OffsetRect(&rSub, d2p(xd), d2p(yd));
		wSub = rSub; OffsetRect(&wSub, pContext->paper.left, pContext->paper.top);

So evidently the charRectCache.charRect[]s for many symbols are different on the two
machines -- and correct on the PPC!?  BuildCharRectCache() does what it sounds like, via:

	bbox = musFontInfo[doc->musFontInfoIndex].cBBox;

...and InitMusFontTables() fills in the cBBox values from our 'BBX#' resource. Does that
really have slightly different values on the two platforms?

On MBAir:
3/12/18 2:06:25.384 PM Ngale[97766]: info. Setting up music font 'Sonata': 174 chars.  (InitMusFontTables)
3/12/18 2:06:25.384 PM Ngale[97766]: debug. InitMusFontTables: ch=&=38 yt=-1079 yb=657	[ht=1736]
3/12/18 2:06:25.384 PM Ngale[97766]: debug. InitMusFontTables: ch=?=63 yt=-736 yb=64	[ht=800]
3/12/18 2:06:25.385 PM Ngale[97766]: info. Setting up music font 'Briard': 217 chars.  (InitMusFontTables)
3/12/18 2:06:25.385 PM Ngale[97766]: debug. InitMusFontTables: ch=&=38 yt=-1079 yb=656
3/12/18 2:06:25.385 PM Ngale[97766]: debug. InitMusFontTables: ch=?=63 yt=-735 yb=64
3/12/18 2:06:25.417 PM Ngale[97766]: info. Setting up music font 'BlueNotz-NG': 217 chars.  (InitMusFontTables)
3/12/18 2:06:25.417 PM Ngale[97766]: debug. InitMusFontTables: ch=&=38 yt=-1079 yb=656
3/12/18 2:06:25.417 PM Ngale[97766]: debug. InitMusFontTables: ch=?=63 yt=-735 yb=64

On G5:
Mar 12 14:11:16 DonDualG5 Ngale[53195]: info. Setting up music font 'Sonata': 174 chars.  (InitMusFontTables)
Mar 12 14:11:16 DonDualG5 Ngale[53195]: debug. InitMusFontTables: ch=&=38 yt=-1334 yb=402	[ht=1736]
Mar 12 14:11:16 DonDualG5 Ngale[53195]: debug. InitMusFontTables: ch=?=63 yt=-991 yb=-192	[ht=799]
Mar 12 14:11:16 DonDualG5 Ngale[53195]: info. Setting up music font 'Briard': 217 chars.  (InitMusFontTables)
Mar 12 14:11:16 DonDualG5 Ngale[53195]: debug. InitMusFontTables: ch=&=38 yt=-1334 yb=401
Mar 12 14:11:16 DonDualG5 Ngale[53195]: debug. InitMusFontTables: ch=?=63 yt=-990 yb=-192
Mar 12 14:11:16 DonDualG5 Ngale[53195]: info. Setting up music font 'BlueNotz-NG': 217 chars.  (InitMusFontTables)
Mar 12 14:11:16 DonDualG5 Ngale[53195]: debug. InitMusFontTables: ch=&=38 yt=-1334 yb=401
Mar 12 14:11:16 DonDualG5 Ngale[53195]: debug. InitMusFontTables: ch=?=63 yt=-990 yb=-192

!! The Intel (MBAir) values are all larger by 255 or 256! Could these different values be
present in the 'BBX#'?

Compare the values for char. code 38 & 63 in BBX# 129 (Briard) in the latest
NightingalePPC.app and NightingaleIntel.app => they're exactly the same. Maybe I'm
somehow using the BBX#'s from a different resource file? Delete the BBX# for Blue Notz
from NgaleIntel, run it => BlueNotz is gone, so that's not it. %^&(@#(^$#%  Whatever it
is, it's something pretty weird! Could FIX_END possibly be the problem??

BBX# values of width & bounding box for char. codes 38 & 63, both before and after FIX_END, on G5:
Mar 14 11:30:47 DonDualG5 Ngale[67161]: info. Setting up music font 'Sonata': 174 chars.  (InitMusFontTables)
Mar 14 11:30:47 DonDualG5 Ngale[67161]: debug.   611  611
Mar 14 11:30:47 DonDualG5 Ngale[67161]: debug.   0  0
Mar 14 11:30:47 DonDualG5 Ngale[67161]: debug.   402  402
Mar 14 11:30:47 DonDualG5 Ngale[67161]: debug.   611  611
Mar 14 11:30:47 DonDualG5 Ngale[67161]: debug.   -1334  -1334

Mar 14 11:30:47 DonDualG5 Ngale[67161]: debug.   694  694
Mar 14 11:30:47 DonDualG5 Ngale[67161]: debug.   0  0
Mar 14 11:30:47 DonDualG5 Ngale[67161]: debug.   -192  -192
Mar 14 11:30:47 DonDualG5 Ngale[67161]: debug.   691  691
Mar 14 11:30:47 DonDualG5 Ngale[67161]: debug.   -991  -991

On MBAir:
3/13/18 7:46:16.373 PM Ngale[11513]: info. Setting up music font 'Sonata': 174 chars.  (InitMusFontTables)
3/13/18 7:46:16.374 PM Ngale[11513]: debug.   25346  611
3/13/18 7:46:16.374 PM Ngale[11513]: debug.   0  0
3/13/18 7:46:16.374 PM Ngale[11513]: debug.   -28414  657	**255 GREATER THAN G5 VALUE
3/13/18 7:46:16.374 PM Ngale[11513]: debug.   25346  611
3/13/18 7:46:16.374 PM Ngale[11513]: debug.   -13829  -1079	**255 GREATER THAN G5 VALUE

3/13/18 7:46:16.374 PM Ngale[11513]: debug.   46594  694
3/13/18 7:46:16.374 PM Ngale[11513]: debug.   0  0
3/13/18 7:46:16.374 PM Ngale[11513]: debug.   16384  64		**255 GREATER THAN G5 VALUE
3/13/18 7:46:16.374 PM Ngale[11513]: debug.   -19710  691
3/13/18 7:46:16.374 PM Ngale[11513]: debug.   8445  -736	**255 GREATER THAN G5 VALUE

Nope, FIX_END is okay (confirmed via my own SwapBytes program). What does Ngale do
before getting the values listed above?

		resH = Get1IndResource('BBX#', i); 
		if (!GoodResource(resH)) goto error;
		GetResInfo(resH, &resID, &resType, resName);
		
Sure looks like a bug in the Intel implementation of the Resource Manager, a highly
unlikely bug since it affects things so selectively, but via Sherlock Holmes' dogma...
!! In which case, the only solution is a kludge to correct it => done.

-------------------------------------------------------------------------------

18 Mar.

I upgraded my MacBook Air from OS 10.8 to 10.13; problem of 1b of 28 Feb. no longer occurs.
Updated list of known problems on Intel machines:

1. On launch, the initial Open File dialog is much too tall.

2. On launch, the tool palette isn't filled in, though it works perfectly in terms of
selecting tools and hiliting their squares. Nothing I've tried -- resizing, etc. -- gets
Ngale to fill it in.

3. The three pop-up menu palettes all have similar problems drawing their contents.
Launch, New Nightingale Score, insert a note, Set Duration, click on the note => the
palette pops up, but only odd-numbered squares are filled in. See 22-25 Feb. above for
details.

-------------------------------------------------------------------------------

20 - 28 Mar.

Working on opening files on Intel processors; _lots_ of Endian problems.

EndianFixDocumentHdr() works.

EndianFixScoreHdr() calls exit() and quits because sizeof(something) is 1!?! ...Fixed.

-------------------------------------------------------------------------------

1 - 10 April

More work on opening files on Intel processors, esp. EndianFixScoreHdr().

Uh-oh. <firstMNNumber> is a 13-bit field, so we must do something special: write
EndianFix_13BitField() & test with firstMNNumber = 259 => nope! #%^&*#$%*#)%#$%  Ngale
reads in 259 = 0x103 as 124 = 0x7c !! Then it converts it -1024 = 0xfffffc00 -- garbage,
of course; but how does it get 0x7c?? It's not just swapping the bytes of the <short>
that <firstMNNumber> belongs to -- and Harbison & Steele's _C: A Reference Manual_ warns
that bit fields are "likely to be nonportable". This indeed seems to be the case for code
generated by the C compiler in Xcode 2.5 for Intel CPUs vs. PowerPCs, and not being able
to run on Intel CPUs (without Rosetta, Apple's PowerPC simulator, that is) keeps us from
running on any Mac OS after 10.6.x. This is looking really bad, since our file headers
as well as objects and subobjects are jammed with bit fields!!

By far the most reasonable solution I can think of: a new file format, format "N106",
that doesn't use bit fields at all! Or perhaps it still uses them, but far less than the
current format, and only in very limited ways. The Intel version of Ngale 5.8 won't be
able to open N105 or earlier files, but the PPC version will be able to open them & save
them in the new format. This will also allow making some other desirable changes to
files & to the object list that have been accumulating for years: cf.
NgaleFileFormatIdeas.txt.

This is conceptually simple, but it'll take awhile! TBContinued.

-------------------------------------------------------------------------------

10 - 11 April

The "notes entered on a new system aren't drawn until there's a barline following on the
system" bug (GitHub Issue #165) is a real pain. Cf. discussion above for Feb. - Mar.
2016.

The basic problem is that entering the notes leaves measureBBox.right = measureBBox.left.
One place -- maybe the only one! -- where measureBBox.right is updated is in DrawMEASURE().
Is it getting called in this situation? Yes -- but measureBBox.right is set to the right
end of the system, which is correct; the problem is measureBBox.left! Why? The comment:

	/* If this is the last measure of a system, just set its measureBBox to end exactly
	   at the end of the system. If in addition the previous measure ends at the same
	   point, this measure's width is zero, and we set its measureBBox to start at that
	   point as well. */

But the test for the previous measure ending at the same point doesn't consider the case
where the previous measure is on the previous system! Fixed.

-------------------------------------------------------------------------------

21 April - 11 May

Doing more testing of how Ngale on Intel reads the 13-bit score header field 
<firstMNNumber> before going ahead with the new file format plan...

In files with the other three bits in the word (aboveMN, sysFirstMN, startMNPrint1) all
set to 1, Ngale reads firstMNNumber of:
	0x001 (1)    as  0x03c (60)
	0x02a (42)   as  0x55c (1372)
	0x07e (124)  as  0xf9c (3996)
	0x07e (126)  as  0xfdc (4060)
	0x07f (127)  as  0xffc (4092)
	0x103 (259)  as  0x7c (124)

Looks like the other three bits become these bits of firstMNNumber: 0x038; if so, the
three missing bits of firstMNNumber must go into those flags! -- which makes sense.

So I _could_ unscramble these fields, but I doubt it's worth the trouble! But almost
all of Ngale's bit fields stored in files are less than 8 bits, so fit in a byte; maybe
unscrambling them is practical?

Bit fields > 7 bits declared in NTypes.h:

	NIGHTSCOREHEADER:
				firstMNNumber:13;	/* Number of first measure */

	MEASURE obj & subobj:
				measureNum:15;		/* internal measure number; first is always 0 */
					spacePercent:15;	/* Percentage of normal horizontal spacing used */

	"Structs for Merge" (VInfo & ClipVInfo):
				unused:11;
					unused:13;

Bit fields > 7 bits declared in NMiscTypes.h:
					moreUnused:11;

NB: It's not obvious even "unused" fields of over 8 bits won't complicate things, since
they might result in other fields in the same word getting scrambled across bytes :-( .

Anything declared elsewhere that's written to Ngale files?? TBContinued, but the path
of least resistance is very likely the simple version of the plan outlined above, namely
format N106 will use no bit fields at all.

-------------------------------------------------------------------------------

14 - 15 May

Using Xcode 3.2 on Torrey's Old White MacBook: Xcode insists InitNightingale() is
undefined!? Clean All Targets, Build again => no change. Remove InitNightingale.cp from
the project, put it back in => no change. Replace project file w/ a copy from MacBook
Air => all OK. Weird.

-------------------------------------------------------------------------------

24 May - 4 June

Issue #173: The minimum space between notes on ledger lines isn't enough; as a result,
the ledger lines on consecutive notes in measures Respaced to a small percentage touch
each other and appear to merge, which makes the notes really hard to read. This is a
big problem for my 2-flute arrangement of the Mozart Andante.

Adjustment probably needs to consider chords as a whole, w/ regular & suspended notes
both above and below staff; cf. DrawNoteLedgers().

Write GetNCLedgerInfo(); call it from DrawNCLedgers() => OK. Write NCHasLedgers(), which
also calls GetNCLedgerInfo() => looks OK. Now, routines in SpaceHighLevel.cp and/or
SpaceTime.cp need to use NCHasLedgers() when Respace1Bar() is computing new positions
for the "spine" -- but doing it one note/chord at a time isn't enough: we need extra
space between two consecutive notes/chords only if _both_ have ledger lines, and on the
same side of the staff!

Write ConsiderLedgerLines(), called from ConsiderWidths(), called from Respace1Bar()...

-------------------------------------------------------------------------------

17 - 18 August

BACK TO problems on Intel unrelated to opening/saving files. Summary of known problems
(rev. from 18 March):

1. On launch, the initial Open File dialog is sometimes much too tall. I say "is
sometimes", but I haven't seen this at all recently.

2. On launch, the tool palette isn't filled in, though it works perfectly in terms of
selecting tools and hiliting their squares. Nothing I've tried -- resizing, etc. -- gets
Ngale to fill it in.

3. The three pop-up menu palettes all have similar problems drawing their contents.
Launch, New Nightingale Score, insert a note, Set Duration, click on the note => the
palette pops up, but only odd-numbered squares are filled in. See 22-25 Feb. above for
details.

-------------------------------------------------------------------------------

22 - 23 August

Moving some of NTypes.h into a new header, NObjTypes.h, seems to result in sizeof(AGRAPHIC)
being 8 instead of 6! -- which makes old files unreadable. How could that cause the size
to change??

Copies of the bad files are NTypesQ1.h and NObjTypesQ1.h of 19 Aug., ca. 6 PM.

Starting over with NTypesOK.h, move into a new NObjTypes.h:
	UserPopUp
	OBJECTHEADER, SUBOBJHEADER, EXTOBJHEADER
	HEADER, PHEADER
	TAIL => DYNAMIC
	enum for dynamics
	AMODNR => OBJDATA

But wait! NTypes.h is enclosed in
	#pragma options align=mac68k
	...
	#pragma options align=reset

So is NMiscTypes.h and many other .h's; but NObjTypes.h isn't!! Add to NObjTypes.h =>
all OK.

-------------------------------------------------------------------------------

25 - 30 August

On Issue 67 (initial position of tool palette is sometimes at very top of screen,
underneath the menu bar): Where is the initial position set? Where is it even made
visible? NInitFloatingWindows() creates the window & makes it invisible, with a windowRect
set in SetupPaletteRects(). Adjust the position there => seems to move it down, as desired,
so this should avoid the problem -- though it's certainly not the correct fix.

-------------------------------------------------------------------------------

1 September

I think all almost all of the bit fields that affect files are now in NObjTypes.h. How
about KSITEM, still in NTypes.h? Oops: instances of it are written to files; likewise
for TEXTSTYLE, of which NIGHTSCOREHEADER has 15 occurrences (though they aren't called
that) and probably VOICEINFO, all in NTypes.h. And NMiscTypes.h has loads of bit fields.
Oh well! For now, just add comment that changing these headers has implications for Ngale
files.

-------------------------------------------------------------------------------

5 - 23 November

I'm getting serious about opening files on Intel processors, which means getting rid of
the bit fields our files have all over place. Cf. notes above for 1 - 10 April 2018.
Part of the machinery for converting old files has always been in FileConversion.h, with
versions of some data structures from old file formats; but we need _way_ more than what
it has, large amounts of the declarations from all three N*Types.h headers, so don't use
FileConversion.h (but keep it with contents #ifdef'd out for future reference). Headers
that need work to remove bit fields:

+ FileConversion.h
+ NBasicTypes.h
+ NMiscTypes.h
+ NObjTypes.h

Any others? There shouldn't be, and I don't think there are!

-------------------------------------------------------------------------------

15-18 March *** 2019 ***

Bugs in 5.9:

1. New score, enter notes on both staves w/ accidental, Select All, autobeam, add barline,
play, Set Duration => all OK. Select 3 8th notes, Create Triplet =>

	Warning. GetContext: illegal staff number 0. contextL=54
	
Not too surprising, but also not obvious how the changes I've made -- nearly all just
to data-structure definitions -- could cause this! ??

2. After Copying one or several notes (w/ menu title flashing, so apparently successful),
Paste commands are disabled! Ah -- but Show Clipboard seems to show the clipboard is empty.
??

Simpler way to provoke bug #1: New score, enter 3 8th notes on top staff, Select them,
Create Triplet =>

	Warning. GetContext: illegal staff number 0. contextL=34

Add some debug prints, do same thing =>

	Mar 18 10:09:43 DonDualG5 Ngale[33356]: debug. DoTuple 1: selStartL=27
	Mar 18 10:09:43 DonDualG5 Ngale[33356]: debug. DoTuple 2: selStartL=35
	Mar 18 10:09:43 DonDualG5 Ngale[33356]: debug. DoTuple 3: v=1 selStartL=35
	Mar 18 10:09:43 DonDualG5 Ngale[33356]: debug. DoTuple: v=1 vStartL=35 vEndL=2
	Mar 18 10:09:43 DonDualG5 Ngale[33356]: debug. CreateTUPLET: startL=35 endL=2 v=1
	Mar 18 10:09:43 DonDualG5 Ngale[33356]: debug. CreateTUPLET: startL=0 staff=0
	Mar 18 10:09:43 DonDualG5 Ngale[33356]: ERROR. PROGRAM ERROR: GetContext: illegal staff number 0. contextL=34

The Syncs are links 27, 29, 31; doc->selStartL should = 27. It's changed to 35 between DoTuple 1 & 2:

	LogPrintf(LOG_DEBUG, "DoTuple 1: selStartL=%u\n", doc->selStartL);
		if (!RearrangeNotes(doc, selRange, nInMeas, baseMeasL)) goto broken;
	LogPrintf(LOG_DEBUG, "DoTuple 2: selStartL=%u\n", doc->selStartL);

So the bug is in RearrangeNotes(). Where?

	Mar 18 10:40:40 DonDualG5 Ngale[33569]: debug. DoTuple 1: selStartL=27
	Mar 18 10:40:40 DonDualG5 Ngale[33569]: debug. RearrangeNotes 1a: selStartL=27
	Mar 18 10:40:40 DonDualG5 Ngale[33569]: debug. RearrangeNotes 1b: selStartL=35
	Mar 18 10:40:40 DonDualG5 Ngale[33569]: debug. RearrangeNotes 2: selStartL=35
	Mar 18 10:40:40 DonDualG5 Ngale[33569]: debug. DoTuple 2: selStartL=35
	Mar 18 10:40:40 DonDualG5 Ngale[33569]: ERROR. PROGRAM ERROR: GetContext: illegal staff number 0. contextL=34

It's between RearrangeNotes 1a & 1b!? The code is

	LogPrintf(LOG_DEBUG, "RearrangeNotes 1a: selStartL=%u\n", doc->selStartL);
		for (pL = startMeas; pL!=endMeas; pL=RightLINK(pL))
			if (LinkSEL(pL))
				{ doc->selStartL = pL; break; }
	LogPrintf(LOG_DEBUG, "RearrangeNotes 1b: selStartL=%u\n", doc->selStartL);

 RightLINK() & LinkSEL(pL) are simple macros that just return a value. Ah, but what is startMeas?
 
	Mar 18 10:46:17 DonDualG5 Ngale[33599]: debug. DoTuple 1: selStartL=27
	Mar 18 10:46:17 DonDualG5 Ngale[33599]: debug. RearrangeNotes 1a: startMeas=10 selStartL=27
	Mar 18 10:46:17 DonDualG5 Ngale[33599]: debug. RearrangeNotes 1b: startMeas=10 selStartL=35
	Mar 18 10:46:17 DonDualG5 Ngale[33599]: debug. RearrangeNotes 2: selStartL=35
	Mar 18 10:46:17 DonDualG5 Ngale[33599]: debug. DoTuple 2: selStartL=35
	Mar 18 10:46:17 DonDualG5 Ngale[33599]: ERROR. PROGRAM ERROR: GetContext: illegal staff number 0. contextL=34

@%$^#&@#@#$!)(&!$  startMeas=10 is correct & unchanged while selStartL is clobbered!
This makes nooooo sense. Grasping at a straw, how about &selStartL?

-------------------------------------------------------------------------------

20-24 Mar.

Grasping at a straw, how about &selStartL?

	Mar 20 14:05:57 DonDualG5 Ngale[36814]: debug. DoTuple 1: selStartL=27
	Mar 20 14:05:57 DonDualG5 Ngale[36814]: debug. RearrangeNotes 1a: startMeas=10 selStartL=27 &selStartL=14d72734
	Mar 20 14:05:57 DonDualG5 Ngale[36814]: debug. RearrangeNotes 1b: startMeas=10 selStartL=35 &selStartL=14d72734
	Mar 20 14:05:57 DonDualG5 Ngale[36814]: debug. RearrangeNotes 2: selStartL=35
	Mar 20 14:05:57 DonDualG5 Ngale[36814]: debug. DoTuple 2: selStartL=35
	Mar 20 14:05:57 DonDualG5 Ngale[36814]: ERROR. PROGRAM ERROR: GetContext: illegal staff number 0. contextL=34

No problem there. OK, let's start from the last functioning version, 5.8.9, and work forward.
 
Replace NResourceID.h, .rsrc, Tuplet.cp w/ the 5.9 versions => everything still works OK, w/
neither bug happening -- but selStartL is getting changed to 35!!! And looking at the object list
shows that's correct. So the failure of Create Tuplet in 5.9 is for another reason!!! Go back to
CreateTUPLET:
 
	Mar 20 21:56:28 DonDualG5 Ngale[38286]: debug. DoTuple 1: selStartL=27
	Mar 20 21:56:28 DonDualG5 Ngale[38286]: debug. DoTuple 2: selStartL=35
	Mar 20 21:56:28 DonDualG5 Ngale[38286]: debug. CreateTUPLET: startL=0 voice=1 staff=0
	Mar 20 21:56:28 DonDualG5 Ngale[38286]: ERROR. PROGRAM ERROR: GetContext: illegal staff number 0. contextL=34

startL=0 is a big problem! It's returned by GetNoteSelRange (as vStartL), then passed to
CreateTUPLET. Why? Modify GetNoteSelRange to store startL, endL into local variables & copy them
to its pointer args at the end; display startL=35 endL just before they're copied:

	Mar 21 10:32:16 DonDualG5 Ngale[39136]: debug. DoTuple 1: selStartL=27
	Mar 21 10:32:16 DonDualG5 Ngale[39136]: debug. DoTuple 2: selStartL=35
	Mar 21 10:32:16 DonDualG5 Ngale[39136]: debug. GetNoteSelRange: pL=35
	Mar 21 10:32:16 DonDualG5 Ngale[39136]: debug. GetNoteSelRange: pL=35 aNoteL=7
	Mar 21 10:32:16 DonDualG5 Ngale[39136]: debug. GetNoteSelRange: pL=36
	Mar 21 10:32:16 DonDualG5 Ngale[39136]: debug. GetNoteSelRange: pL=36 aNoteL=8
	Mar 21 10:32:16 DonDualG5 Ngale[39136]: debug. GetNoteSelRange: pL=37
	Mar 21 10:32:16 DonDualG5 Ngale[39136]: debug. GetNoteSelRange: pL=37 aNoteL=9
	Mar 21 10:32:16 DonDualG5 Ngale[39136]: debug. GetNoteSelRange: startL=35 endL=2
	Mar 21 10:32:16 DonDualG5 Ngale[39136]: debug. CreateTUPLET: startL=0 voice=1 staff=0
	Mar 21 10:32:16 DonDualG5 Ngale[39136]: ERROR. PROGRAM ERROR: GetContext: illegal staff number 0. contextL=34

Could the problem be _within_ CreateTUPLET?

	Mar 21 10:57:57 DonDualG5 Ngale[39380]: debug. DoTuple 1: selStartL=27
	Mar 21 10:57:57 DonDualG5 Ngale[39380]: debug. DoTuple 2: selStartL=35
	Mar 21 10:57:57 DonDualG5 Ngale[39380]: debug. CreateTUPLET 1: startL=35 endL=2 v=1
	Mar 21 10:57:57 DonDualG5 Ngale[39380]: debug. CreateTUPLET 2: startL=35 endL=2 v=1
	Mar 21 10:57:57 DonDualG5 Ngale[39380]: debug. CreateTUPLET 3: startL=0 voice=1 staff=0
	Mar 21 10:57:57 DonDualG5 Ngale[39380]: ERROR. PROGRAM ERROR: GetContext: illegal staff number 0. contextL=34

Yes, and the _only_ stmt between CreateTUPLET 2 & 3 is:

	startL = L_Search(startL, SYNCtype, False, &pbSearch);	/* Start at 1st Sync in range */

Sure looks like a bizarre new bug in L_Search!

	Mar 22 18:03:20 DonDualG5 Ngale[41854]: debug. DoTuple 1: selStartL=27
	Mar 22 18:03:20 DonDualG5 Ngale[41854]: debug. DoTuple 2: selStartL=35
	Mar 22 18:03:20 DonDualG5 Ngale[41854]: debug. CreateTUPLET 1: startL=35 endL=2 v=1
	Mar 22 18:03:20 DonDualG5 Ngale[41854]: debug. CreateTUPLET 2: startL=35 endL=2 v=1
	Mar 22 18:03:20 DonDualG5 Ngale[41854]: ERROR. WARNING: request to optimize search for type 2. startL=35  (L_Search)
	Mar 22 18:03:20 DonDualG5 Ngale[41854]: debug. L_Search 2: startL=35 type=2 goLeft=0 optimize=1 id=-1
	Mar 22 18:03:20 DonDualG5 Ngale[41854]: debug. L_Search 3: anyType=0 anyStaff=1 anyVoice=0 anySelected=0 anySystem=1 anySubtype=1 anyInMeasure=1
	Mar 22 18:03:20 DonDualG5 Ngale[41854]: debug. CreateTUPLET 3: startL=0 voice=1 staff=0
	Mar 22 18:03:20 DonDualG5 Ngale[41854]: ERROR. PROGRAM ERROR: GetContext: illegal staff number 0. contextL=34

So CreateTUPLET is telling L_Search it wants only notes (OK), on any staff (OK), only in voice 1 (OK),
only if selected, and on any system. What's the problem?

	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. DoTuple 1: selStartL=27
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. DoTuple 2: selStartL=35
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. CreateTUPLET 1: startL=35 endL=2 v=1
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: ERROR. WARNING: request to optimize search for type 2. startL=35  (L_Search)
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. L_Search 1: startL=35 type=2 goLeft=0 optimize=1 id=-1
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. L_Search 2: anyType=0 anyStaff=1 anyVoice=0 anySelected=0 anySystem=1 anySubtype=1 anyInMeasure=1
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. L_Search 4: CHECKING pL=35 FirstSubObjPtr=7
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. L_Search 5: CHECKING subObjL=7 selected=0 voice=1
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. L_Search 4: CHECKING pL=36 FirstSubObjPtr=8
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. L_Search 5: CHECKING subObjL=8 selected=0 voice=1
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. L_Search 4: CHECKING pL=37 FirstSubObjPtr=9
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. L_Search 5: CHECKING subObjL=9 selected=0 voice=1
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: debug. CreateTUPLET 2: startL=0 voice=1 staff=0
	Mar 24 16:58:54 DonDualG5 Ngale[45373]: ERROR. PROGRAM ERROR: GetContext: illegal staff number 0. contextL=34

The problem is the notes being tupleted appear not to be selected :-( . How could the 5.9
changes so far have caused this?

-------------------------------------------------------------------------------

25-26 March

Let's try going back to the 5.8.9 code and work forward again. (1) In precomps in folder
NightingaleDABVer_5p8_TEST, replace the three NxxxTypes.h headers w/ the 5.9 versions; try
to provoke bug #1: New score, enter 3 8th notes on top staff, Select them, Create Triplet =>

	Warning. GetContext: illegal staff number 0. contextL=34
	
!! Adding the debug stmts in L_Search confirms the problem is none of the notes are selected. ??

Revert NMiscTypes to the 5.8.9 version, try again => no change.

Revert NObjTypes to the 5.8.9 version, try again => Create Triplet works again!!, and so
does Copy & Paste.

Move NMiscTypes forward to the 5.8.9 version, try again => Create Triplet still works; so
does Copy & Paste. So it's _just_ the changes to NObjTypes that break things. Which changes?

Revert NObjTypes to the 5.8.9 version, make changes to OBJECTHEADER & SUBOBJHEADER =>
crashes in the usual way. Revert NObjTypes to the 5.8.9 version, make changes to
OBJECTHEADER alone => works properly! So it's very likely (though I'm not certain) the
changes to SUBOBJHEADER are the only problem... Could there be an assumption somewhere about
the offsets or bit length of SUBOBJHEADER fields, especially <selected>??

L_Search is looking for subObj->??, with the following interesting declaration:

GenSubObj 	*subObj;

!! GenSubObj is declared in Objects.h, and it explicitly includes the subobj fields; but it
should be fine with just containing a SUBOBJHEADER. (Nothing else in the code seems to
includes the subobj fields.) Change it in the 5.9 project, build => 898 warnings instead of
897 -- I don't think that's worth worrying about. Test => Yes!!! Bugs #1 & 2 of 15-18 March
notes are both gone!

-------------------------------------------------------------------------------

1-3 April

Sh*t. I don't understand at all what's going on with the repository in GitHub & its
relationship to NightingaleGitRepo!!!!

(1) SourceTree shows the most recent commits as
	origin/develop5p8: Merge pull request #175 from AMNS/develop...	011db61	Mar 13, 2019 at 10:32 AM
	develop (1 ahead): * Minor cleanup: moved some file util...		e8a8a03	Jan 9, 2019 at 2:29 PM
	origin/develop: Move source files (but not headers)...			40cc468	Nov 4, 2019 at 1:51 PM
	
Apparently I never pushed e8a8a03, so when I merged from develop to develop5p8, those
changes didn't go into develop5p8; that explains a lot. ^#&48@$@$!)^

For the _develop_ branch, GitHub says: Latest commit 40cc468 on Nov 4, 2018. For the
_develop5p8_ branch, GitHub says: Latest commit 011db61 21 days ago (i.e., ca. 13 March).
Neither is what I expected or what I want -- none of my changes since Nov 4, 2018 are in
either branch -- but it's consistent!

(2) SourceTree says there's nothing to commit to branch develop, but there's 1 commit to
push. That makes sense.

(3) However, e8a8a03 removed CFilesBoth/File.cp & replaced it with
CFilesBoth/FileOpen.cp and CFilesEditor/FileSave.cp. But both develop & develop5p8 in
GitHub contain FileOpen.cp but neither File.cp nor FileSave.cp! How is that possible? Is
that really the case?

In GitHub develop5p8, there's CFilesBoth/File.cp but not FileOpen.cp nor CFilesEditor/FileSave.cp
In develop, likewise. So that's _not the case! Not clear why I thought otherwise.

Everything now makes sense, but both branches in GitHub are a (small) mess. How to fix 'em?

-------------------------------------------------------------------------------

8 April

Push the one unpushed commit for develop => looks OK in GitHub & SourceTree history.

Merge changes from develop to develop5p8 => looks OK in GitHub & (after relaunch) SourceTree
history.

SourceTree still says nothing to commit. So the mess has been cleaned up :-) .

A slightly worrisome thing: does develop5p8/info.plist say it's 5.8.9? Yes!
And does develop/info.plist say it's 5.9.1?  No; it says 5.8.9, but that's OK -- easy to fix.
But it _is_ 5.9.1 (& rev. 11 Jan. 2019) on my Mac mini, so SourceTree _should_ show
something to commit! ??

-------------------------------------------------------------------------------

12-26 April

Trying to open a format 'N105' file fails, with the following log messages:

	Notice. CONVERTING VERSION 'N105' FILE.
	Notice. Checking Document header: No errors found.  (OpenFile)
	Notice. Checking Score header: Displaying Score header:
	info.   nstaves=2  nsystems=1  spacePercent=1  srastral=1  altsrastral=0
	info.   tempo=0  channel=0  velocity=0  headerStrOffset=536870912  footerStrOffset=512  dIndentOther=76
	info.   firstNames=0  otherNames=15  lastGlobalFont=5
	info.   aboveMN=1  sysFirstMN=0  startMNPrint1=0  firstMNNumber=0
	info.   nfontsUsed=0  magnify=0  selStaff=0  currentSystem=0  spaceTable=0  htight=0
	info.   lookVoice=0  ledgerYSp=0  deflamTime=0  dIndentFirst=0
	ERROR. 9 error(s) found.  (OpenFile)

_headerStrOffset_ is obviously nonsense; what else? More important, why? Ah. We read a
SCOREHEADER, then EndianFixScoreHdr() it -- but what we actually read is an 'N105' format
SCOREHEADER, then check it ?? 'N106'. But why does Ngale even compile with two different
definitions of SCOREHEADER?? Apparently because I wasn't #include'ing the new version :-) .

Now to actually convert the score header. For format 'N105' and earlier, have OpenFile()
call ConvertScoreHeader(), which simply copies (or strcpy's) about 200 fields from a
NIGHTSCOREHEADER_N105 (part of a DocumentN105) to a NIGHTSCOREHEADER (part of a
Document).

It's coming along OK, except for one thing. This code:

	DisplayScoreHdr(2, doc);		// ??TEMPORARY, TO DEBUG INTEL VERSION & FILE FORMAT CONVERSION!!!!
		EndianFixScoreHdr(doc);
		if (DETAIL_SHOW) DisplayScoreHdr(3, doc);
		
..shows

	info. Displaying Score header (ID 2):
	info.   nstaves=4  nsystems=18  spacePercent=118  srastral=7  altsrastral=2
	info.   tempo=999  channel=1  velocity=1  headerStrOffset=0  footerStrOffset=0  dIndentOther=0
	info.   firstNames=2  otherNames=0  lastGlobalFont=11
	info.   aboveMN=1  sysFirstMN=1  startMNPrint1=0  firstMNNumber=1
	info.   nfontsUsed=3  musFontName='Briard'
	info.   magnify=1  selStaff=1  currentSystem=1  spaceTable=0  htight=100
	info.   lookVoice=-1  ledgerYSp=13  deflamTime=50  colorVoices=2  dIndentFirst=1128
	info. Displaying Score header (ID 3):
	info.   nstaves=4  nsystems=18  spacePercent=118  srastral=7  altsrastral=2
	info.   tempo=999  channel=1  velocity=1  headerStrOffset=0  footerStrOffset=0  dIndentOther=0
	info.   firstNames=2  otherNames=0  lastGlobalFont=11
	info.   aboveMN=1  sysFirstMN=1  startMNPrint1=0  firstMNNumber=1
	info.   nfontsUsed=3  musFontName='riard'
	info.   magnify=256  selStaff=256  currentSystem=256  spaceTable=0  htight=25600
	info.   lookVoice=-256  ledgerYSp=3328  deflamTime=12801  colorVoices=0  dIndentFirst=1128

This is running on a G5, natch, so EndianFixScoreHdr() should do nothing, and in fact its
code is commented out, as it should be. But almost all the values in the last two
lines are multiplied by 256, as if the bytes were swapped, and none in the previous lines,
while deflamTime = 256*deflamTime+1, colorVoices = 0, etc.??  Anyway, musFontName gets messed up,
clearly because I'm converting it in place from P to C string. Fix that => all is OK now!?!

-------------------------------------------------------------------------------

29-31 May

DIGRESSION. Issue #174: Select a tempo mark or text graphic (are there other
possibilities? probably not) attached to a barline => the measure number displayed is
the no. of the preceding barline; it should be the number of the barline it's attached
to. This is because DrawMessageBox() calls Sel2MeasPage() to get the measure no.;
Sel2MeasPage() searches to the left for the Measure object, but the objects in question
appear in the object list _before_ their Measure... Fixed.

-------------------------------------------------------------------------------

12 June - 8 July

Dammit. The last commits/pushes made a mess of things. One commit included some changes for
both 5.8.x and 5.9.x and some for 5.9.x only! #6&*$%W$%*@22$()@

Everything is OK _in source code_ till 10 January 2019, when I made the first changes for 5.9.x.
I've done three commits/pushes since then; I think only the last two  are the troublesome ones.
Plan: Reset both the <develop> and <develop5p8> branches to before the 1st improper commit! See

    https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/

Commit 42977a (8 April; "Merge pull request #176 from AMNS/develop") to <develop5p8>: OK.

Commit 926dba1 (12 April; "Changed version number to 5.9.1; compatibility btwn files written
on PowerPC Intel; fixed bug: When Ngale converts a file in an older format, its log message
saying so always shows "T" as file-format version instead of the 4-char. code; minor
cleanup") to <develop> (5.9): OK.

Commit 94a763e (6 June; "Fixed bug: When Ngale converts a file... [?? this was in previous
commit!); fixed bug (Issue #174): If 1st selected obj is a tempo mark or graphic attached to
a barline, measure no. displayed is the no. of the preceding barline; divided a header with
declarations for score headers and other stuff in two; hacked code for opening files towards
goal of converting old-format files) to <develop>: WRONG! The fix to Issue #174 should go to
both <develop> & <develop5p8>; the other changes only to <develop>, so need two commits.

Action:
+ Make NightingaleGitRepo a copy of NightingaleDABVer_5p9 => done; now SourceTree should show
"nothing to commit", and it does.
+ In SourceTree, checkout <develop>. (This is probably redundant.) It still shows "nothing to
commit".
+ In SourceTree, reset to 926dba1 ...says files changed: info.plist, but 94a763e
actually affected ca. 10 files, & info.plist wasn't among them!; go ahead anyway => it
still shows "nothing to commit"!?

Ah, that's wrong. Probably the safest way to do what I want to do is _revert_ 94a763e (not
reset to it)! Have Patrick do that directly via git command line => looks OK. SourceTree now
says 1 commit available for branch develop; pull => looks OK!

-------------------------------------------------------------------------------

9 - 16 July

BACK TO development. NGALE 5.8: Before printing or saving a PostScript file, put an "info"
message in the log file; this might help diagnose weird aspects of printing for Avid He.
Affects CarbonPrinting. Also did minor cleanup in CarbonPrinting, DebugUtils, DrawObject.
These changes _should_ work in 5.9 as is, but must check/test!

-------------------------------------------------------------------------------

17 - 20 July

I was planning to stop 5.8 development with 5.8.9, but that's unrealistic; it's going to be
a long time before 5.9 is usable! So should keep 5.8 & 5.9 code in sync as much as "practical".
Move 5.9 changes into 5.8:
	CFilesBoth: +Search, +Select, +Tuplet
	Utilities: +StringUtils
	Precomps: +NightTemplates.h, +Objects.h
	CustomMDEF: +GraphicMDEF
	Headers: NResourceID

Move 5.8 changes into 5.9:
	CFilesBoth: +DrawObject
	Utilities: +DebugUtils
	CarbonPrinting: +CarbonPrinting

-------------------------------------------------------------------------------

2 August

To minimize differences between the <develop> (Ngale 5.9) and <develop5p8> branches, in the
NightingaleDABVer_5p8 folder, move two files into the MiscellaneousCode subfolder.

DSUtils.cp is in the Utilities pseudo-folder in the project, but not in the file system! Fix
that in both Ngale 5.8 and 5.9.

-------------------------------------------------------------------------------

18 August - 8 Sept.

Work on issue #169: courtesy accidentals are too obtrusive. Why? Maybe reduce the size
of the accidentals? That's not as easy as I thought, but Gould doesn't say courtesy
accidentals should or even can be smaller than normal. The main problem seems to be
simply that, for a given horizontal offset, courtesy accidentals are further from their
notes than normal accidentals! There's a config field for this -- courtesyAccLXD -- so
just changing that (and courtesyAccRXD) should solve the problem. Currently courtesyAccLXD
= 6, & courtesyAccRXD = 8; decrease both by 1 => ??

	SignedByte	courtesyAccRXD;		/* G: Courtesy accidental H offset from right paren. (8th-spaces) */
	SignedByte	courtesyAccLXD;		/* G: Left paren. H offset from courtesy accidental (8th-spaces) */

Aug 31 01:58:34 DonDualG5 Ngale[77479]: debug. DrawAcc: config.courtesyAccSize=70 sizePercent=100 scalePercent=1536
Aug 31 01:58:34 DonDualG5 Ngale[77479]: debug. DrawAcc: courtesyAccLXD=6 deltaXL=4 xdLParen=1946 deltaXR=5 xdRParen=2018
Aug 31 01:58:34 DonDualG5 Ngale[77479]: debug. DrawAcc: config.courtesyAccSize=70 sizePercent=100 scalePercent=70
Aug 31 01:58:34 DonDualG5 Ngale[77479]: debug. DrawAcc: courtesyAccLXD=6 deltaXL=3 xdLParen=2930 deltaXR=4 xdRParen=2986
Aug 31 01:58:34 DonDualG5 Ngale[77479]: debug. DrawAcc: config.courtesyAccSize=70 sizePercent=75 scalePercent=52
Aug 31 01:58:34 DonDualG5 Ngale[77479]: debug. DrawAcc: config.courtesyAccSize=70 sizePercent=75 scalePercent=1536
Aug 31 01:58:38 DonDualG5 Ngale[77479]: debug. DrawAcc: config.courtesyAccSize=70 sizePercent=100 scalePercent=1536
Aug 31 01:58:38 DonDualG5 Ngale[77479]: debug. DrawAcc: courtesyAccLXD=6 deltaXL=4 xdLParen=1946 deltaXR=5 xdRParen=2018
Aug 31 01:58:38 DonDualG5 Ngale[77479]: debug. DrawAcc: config.courtesyAccSize=70 sizePercent=100 scalePercent=70
Aug 31 01:58:38 DonDualG5 Ngale[77479]: debug. DrawAcc: courtesyAccLXD=6 deltaXL=3 xdLParen=2930 deltaXR=4 xdRParen=2986
Aug 31 01:58:38 DonDualG5 Ngale[77479]: debug. DrawAcc: config.courtesyAccSize=70 sizePercent=75 scalePercent=52
Aug 31 01:58:38 DonDualG5 Ngale[77479]: debug. DrawAcc: config.courtesyAccSize=70 sizePercent=75 scalePercent=1536
Aug 31 01:58:38 DonDualG5 Ngale[77479]: debug. DrawAcc: courtesyAccLXD=6 deltaXL=4 xdLParen=3864 deltaXR=5 xdRParen=3936
Aug 31 01:58:38 DonDualG5 Ngale[77479]: debug. DrawAcc: config.courtesyAccSize=70 sizePercent=100 scalePercent=70

With courtesyAccLXD = 2, & courtesyAccRXD = 12:

Oops, no, the comments on those fields are accurate; neither controls the distance between
the right paren and notehead! DrawAcc() positions the (left edge of) the right paren where the
(left edge of) the accidental would be if it wasn't in parens; but right paren is narrower
than an accidental, so move it the right a bit => looks OK!

Also, _courtesyAccSize_ controls the size of the PARENTHESES, not the accidental, so rename the
field to _courtesyAccPSize_. (And it affects their size in PostScript only, not on screen.)

-------------------------------------------------------------------------------

9 Sept. - 13 Oct.

Ugh. My new positioning of courtesy accidentals and their surrounding parentheses is
worse than those in the score of my violin concerto %^&#%#%#(* !  Cf. e.g. 2nd movement,
page 9. What happened? Would be nice to see when the problem was introduced (& it could
be in the Prefs, not the executable!); but the only old executables I still have are
5.5, 5.6, 5.8b6, and 5.8b8! %#$(*@^#%#$*  But _every_ old version for the last several
years should be available from the git repository. How to retrieve? Ah: e.g.,

	git show a2b95716c6136631990be7bcfd3ee01f20edf75e:Nightingale.app.zip > Ngale.zip

OK. Check courtesy accidentals in violin concerto, II, p. 9, m. 68, fl. and m. 67, tr. =>
w/ Ngale 5.7 and current Nightingale Prefs, parens are too small & too tight. W/ Ngale 5.7 and
Nightingale Prefs of 16 May 2018 => parens are full size & the old spacing! So the
problem is in the Prefs file, at least in part.

W/ Ngale 5.7 and Nightingale Prefs of 31 Aug. 2019 (Nightingale AMNF Prefs_CAccsPblm) => parens
are smaller & spacing is tighter but not too tight; so the real problem seems to be combination
of changes to the Prefs & to the code. W/ Ngale 5.7:

Prefs of 16 May 2018: (100)courtesyAccLXD=6  (101)courtesyAccRXD=8  (102)courtesyAccYD=8  (103)courtesyAccSize=100
Prefs_CAccsPblm:	  (100)courtesyAccLXD=8  (101)courtesyAccRXD=6  (102)courtesyAccYD=8  (103)courtesyAccSize=70

-------------------------------------------------------------------------------

19-21 Oct.

With Resorcerer, change courtesyAccLXD, courtesyAccRXD, & courtesyAccSize back to the
values of 16 May 2018 => courtesy accidentals in violin concerto, II, p. 9, m. 68, fl.
and m. 67, tr. are back to the way they were before! So now it looks like the only
problem was the Prefs changes didn't do what I wanted! Try just changing RXD to 7, i.e.

					  (100)courtesyAccLXD=6  (101)courtesyAccRXD=7  (102)courtesyAccYD=8  (103)courtesyAccSize=100

Looks good, the best yet :-) . But that's with Ngale 5.8.9; try 5.8.10...

					  (100)courtesyAccLXD=7  (101)courtesyAccRXD=6  (102)courtesyAccYD=8  (103)courtesyAccPSize=100
					  
%^#*$)#@$@)(#  Values of LXD and RXD are swapped!!!! What the....!?

I'll be darned: the declarations of LXD and RXD are swapped in NMiscTypes.h!!! Swap them back =>
OK, whew.

-------------------------------------------------------------------------------

24-27 Oct.

Work on issue #180, flow-in text crashes.

More from David Alpher:

(1) When you OK the flow-in text dialog, the cursor should change to an upside-down “T” (more or
less), and the box at the bottom left of the window should display the first syllable in
boldface. Does that happen? Yes when Ngale doesn't crash; yes when it does.

(2) When you click to place the first syllable, does the content of the box at bottom left
change? Yes when Ngale doesn't crash; NO when it does!

This suggests the crash is in InsertNewGraphic(), called from InsertSyllable().

Try to flow in "Is operation in a torn off window or not" =>
	debug. <InsertSyllable: pL=10 lastGrL=0 stf=1 v=1 lyricLen=40 pitchLev=14 theFont=4 theStyle.fontSize=4
	debug. <InsertNewGraphic: pL=10 stf=1 v=1 w='Is'
	debug. >InsertNewGraphic: pL=10 stf=1 v=1 w='^BIs' newL=29
	debug. >InsertSyllable: pL=10 lastGrL=29
	debug. <InsertNewGraphic: pL=11 stf=1 v=1 w='operation'
	debug. >InsertNewGraphic: pL=11 stf=1 v=1 w='	operationgǖ�^_���V�' newL=30
	debug. <InsertNewGraphic: pL=12 stf=1 v=1 w='in'
	debug. >InsertNewGraphic: pL=12 stf=1 v=1 w='^BinԿ��' newL=31
	debug. <InsertNewGraphic: pL=13 stf=1 v=1 w='a'
	debug. >InsertNewGraphic: pL=13 stf=1 v=1 w='^Aa^_Կ��' newL=32

-------------------------------------------------------------------------------

28-29 Oct.

Time to get code under control again!

Commit everything... !? Changes to 41 files!? I don't understand, but oh well. Commit & push to
both develop & develop5p8 => looks OK; but I haven't actually made the 5.8 changes of the last few
months to 5.9 and compiled! Do that; changes to

	NDocAndConfig??.h, Style.h
	DrawNRGR, FlowInText, Initialize

=> 5.9 compiles w/ 888 warnings, as expected! Run it => the palette is drawn, & the misbehaving
dialogs (at least Add Modifier) work fine!! HOWEVER, this is on the G5 :-) . Need to test it on
an Intel machine -- and soon, before I inadvertently upgrade past OS 10.13 :-( .

-------------------------------------------------------------------------------

4 Nov.

I'm still not confident that both the repository <develop> branch (5.9.x) and <develop5p8> branch
(5.8.x) are what they should be. Let's make a minor and very low-impact change to each, commit, and
see what happens! What minor change? The score header <comment> field is declared

		unsigned char comment[MAX_COMMENT_LEN+1];

-- which indicates it's a P string; but it's actually a C string. ?? Fix that? Yes.

-------------------------------------------------------------------------------

6-24 Nov.

Work on file-conversion code for OpenFile(), in FileOpen.cp.

Test w/ violin concerto 2nd mvmt. =>

	Notice. CONVERTING VERSION 'N105' FILE.
	info. Displaying Document header (ID 1):
	info.   origin.h=-20120  .v=-20120  paperRect.top=0  .left=1  .bottom=40  .right=-20480
	info.   origPaperRect.top=0  .left=4  .bottom=0  .right=0
	info.   marginRect.top=-16385  .left=-8464  .bottom=-24381  .right=1280
	info.   currentSheet=0  numSheets=5  firstSheet=-16385  firstPageNumber=-8464  startPageNumber=0
	info.   numRows=2  numCols=7108  pageType=-4704  measSystem=-26932
	info. Displaying Score header (ID 1):
	info.   nstaves=15  nsystems=36  spacePercent=72  srastral=7  altsrastral=2
	info.   tempo=999  channel=1  velocity=1  headerStrOffset=156436  footerStrOffset=156440  dIndentOther=464
	info.   firstNames=2  otherNames=1  lastGlobalFont=0
	info.   aboveMN=1  sysFirstMN=1  startMNPrint1=0  firstMNNumber=1
	info.   nfontsUsed=3  musFontName='Briard'
	info.   magnify=1  selStaff=1  currentSystem=29  spaceTable=0  htight=100
	info.   lookVoice=-1  ledgerYSp=12  deflamTime=50  colorVoices=2  dIndentFirst=1136
	info. Displaying Document header (ID 2):
	info.   origin.h=-20120  .v=-20120  paperRect.top=0  .left=1  .bottom=40  .right=-20480
	info.   origPaperRect.top=0  .left=4  .bottom=0  .right=0
	info.   marginRect.top=-16385  .left=-8464  .bottom=-24381  .right=1280
	info.   currentSheet=0  numSheets=5  firstSheet=-16385  firstPageNumber=-8464  startPageNumber=0
	info.   numRows=2  numCols=7108  pageType=-4704  measSystem=-26932
	Notice. Checking Document header: 3 error(s) found in Document header.  (OpenFile)
	ERROR. 3 error(s) found in Document header.  (OpenFile)
	Warning. * StopInform alertID=464
	ERROR. Can't open the file. errCode=-997 errInfo=0  (OpenError)
	Warning. Error ID=-997 (error code=0).
	
The errors in the doc header we're catching are firstPageNumber, numCols, and pageType;
those all look like garbage, and Ngale 5.8.9 says firstPageNumber is 0, not -8464.
numSheets=5 looks reasonable, but 5.8.9 says it's 36.
firstSheet=-16385 looks like trash; 5.8.9 says it's 0.
paperRect doesn't make sense. Etc. etc.
Are _any_ of the Document header fields correct? It's not obvious! Ah-hah: I'm doing

			errCode = FSRead(refNum, &count, &doc->origin);

-- i.e., reading into doc instead of docN105! Correct that => OK.

Now, open violin concerto 2nd mvmt. =>  
	info. Displaying Score header (ID 3):
	info.   nstaves=15  nsystems=36  spacePercent=72  srastral=7  altsrastral=2
	info.   tempo=999  channel=1  velocity=1  headerStrOffset=156436  footerStrOffset=156440  dIndentOther=464
	info.   firstNames=2  otherNames=1  lastGlobalFont=0
	info.   aboveMN=1  sysFirstMN=1  startMNPrint1=0  firstMNNumber=1
	info.   nfontsUsed=3  musFontName='Briard'
	info.   magnify=1  selStaff=1  currentSystem=29  spaceTable=0  htight=100
	info.   lookVoice=-1  ledgerYSp=12  deflamTime=50  colorVoices=2  dIndentFirst=1136
	Notice. Checking Score header: No errors found.  (CheckScoreHdr)
	ERROR. LAST OBJECT TYPE=14384 BUT SHOULD BE 25.
	ERROR. Can't open the file. errCode=-996 errInfo=-999  (OpenError)
	
Why? The "Files and Troubleshooting" doc says (referring to N105 format files) Score
header size is 2148, but OpenFile() in v. 5.9.1 says:

	info. Header size for Document=72, for Score=2492, for N105 Score=2350

What is the N105 header size really?? OpenFile() in v. 5.8.10 says:

	info. Header size for Document=72, for Score=2148

So the 5.9.x SCOREHEADER_N105 takes 202 bytes more than the 5.8.x SCOREHEADER -- but the
declarations are the same. ?!? To see where the discrepancy is:

	if (DETAIL_SHOW) LogPrintf(LOG_DEBUG, "Offset of doc->tailL=%lu, ->nFontRecords=%lu, ->nfontsUsed=%lu, ->yBetweenSys=%lu\n",
		(long)(&doc->tailL)-(long)(&doc->headL), (long)(&doc->nFontRecords)-(long)(&doc->headL),
		(long)(&doc->nfontsUsed)-(long)(&doc->headL), (long)(&doc->yBetweenSys)-(long)(&doc->headL));

In 5.8.10:
	debug. Offset of doc->comment[0]=12, spacePercent=270, fillerMB=291, nFontRecords=309, nfontsUsed=850, yBetweenSys=1634

In 5.9.1:
	debug. Offset of doc->comment[0]=12, spacePercent=278, fillerMB=303, nFontRecords=327, nfontsUsed=988, yBetweenSys=1776

At comment[0], there's no difference; at spacePercent it's 8. fillerMB it's 12, at nFontRecords
18, at nfontsUsed 138, at yBetweenSys 142. It realllly looks like compiled code for 5.9.1 simply
isn't packing bit fields at all! $@%&!#@&!#(^   BUT WAIT! I'm displaying offsets in <doc> (in
N106 format); I want aDocN105! That gives

	debug. Offset of aDocN105.comment[0]=12, spacePercent=270, fillerMB=291, nFontRecords=309, nfontsUsed=850, yBetweenSys=1634

...just as with Ngale 5.8.10. So that was a wild goose chase -- but still, why does the 5.9.x
SCOREHEADER_N105 take 202 bytes more than the 5.8.x SCOREHEADER? One reason: VOICEINFO in 5.9.x
takes 3 bytes; in 5.8.x, it took only 2! Have SCOREHEADER_N105 include VOICEINFON105 instead of
VOICEINFO =>

	info. Header size for Document=72, for Score=2492, for N105 Score=2148

...as it should be! And Ngale seems now to read and convert 'N105' headers correctly.

-------------------------------------------------------------------------------

28 November - 10 December

Continuing work on file-conversion code for OpenFile(), now to get Ngale to read and convert the
subobject and object heaps.

	debug. ReadHeapHdr: hp 0 (HEAD) nFObjs=4 blk=376078172 objSize=346 type=0 ff=8 nO=16 nf=9 ll=0 FPos:2558
	debug. ReadHeapHdr: hp 1 (TAIL) nFObjs=0 blk=376078176 objSize=0 type=1 ff=0 nO=0 nf=0 ll=0 FPos:3960
	ERROR. Header for heap 1 objSize is 0, but expected objSize 346 (ReadHeapHdr)
	ERROR. Can't open the file. errCode=251 errInfo=1  (OpenError)

What size should the code expect TAIL subobjs to be? Not that there are any :-) . With Ngale 5.8.9:

	debug. ReadHeapHdr: hp 0 (HEAD) nFObjs=4 blk=3077504 objSize=346 type=0 ff=7 nO=8 nf=1 ll=0 FPos:2558
	debug. ReadHeapHdr: hp 1 (TAIL) nFObjs=0 blk=3077508 objSize=0 type=1 ff=0 nO=0 nf=0 ll=0 FPos:3960
	debug. ReadHeapHdr: hp 2 (SYNC) nFObjs=3 blk=3077512 objSize=30 type=2 ff=7 nO=64 nf=57 ll=0 FPos:3978
	debug. etc. etc. etc.
	
So why do I now expect TAIL objSize to be the same as HEAD size?  This must result from my change
of today in ReadSubHeaps(), which calls ReadHeapHdr()... Ah, got it. Now:

	Notice. Checking Score header: No errors found.  (CheckScoreHdr)
	info. stringPoolSize=306
	debug. ReadHeapHdr: hp 0 (HEAD) nFObjs=4 blk=376078172 objSize=346 type=0 ff=8 nO=16 nf=9 ll=0 FPos:2558
	debug. ReadHeapHdr: hp 1 (TAIL) nFObjs=0 blk=376078176 objSize=0 type=1 ff=0 nO=0 nf=0 ll=0 FPos:3960
	debug. ReadHeapHdr: hp 2 (SYNC) nFObjs=23 blk=376078180 objSize=30 type=2 ff=26 nO=64 nf=17 ll=0 FPos:3978
	ERROR. Header for heap 2 objSize is 30, but expected objSize 58 (ReadHeapHdr)
	ERROR. Can't open the file. errCode=251 errInfo=2  (OpenError)

?!? "Expected" sizes are set by InitAllHeaps(), via:

			hp->objSize = subObjLength[i];

...and vars.h says:

short subObjLength[] = {
		sizeof(PARTINFO),	/* HEADER subobject */
		0,					/* No TAIL subobjects */
		sizeof(ANOTE),		/* SYNC subobject */
		sizeof(ARPTEND),	/* etc. */
		...

So we need:

short subObjLengthN105[] = {
		sizeof(PARTINFO_N105),	/* HEADER subobject */
		0,						/* No TAIL subobjects */
		sizeof(ANOTE_N105),		/* SYNC subobject */
		sizeof(ARPTEND_N105),	/* etc. */
		...

Done. Now trying to open a valid N105 file dies with

	debug. ReadHeapHdr: hp 0 (HEAD) nFObjs=4 blk=376078172 objSize=346 type=0 ff=8 nO=16 nf=9 ll=0 FPos:2558
	debug. ReadHeapHdr: hp 1 (TAIL) nFObjs=0 blk=376078176 objSize=0 type=1 ff=0 nO=0 nf=0 ll=0 FPos:3960
	debug. ReadHeapHdr: hp 2 (SYNC) nFObjs=23 blk=376078180 objSize=30 type=2 ff=26 nO=64 nf=17 ll=0 FPos:3978
	debug. ReadHeapHdr: hp 3 (REPEATEND) nFObjs=1 blk=3067692 objSize=6 type=14 ff=3 nO=8 nf=5 ll=0 FPos:5330
	ERROR. Header for heap 3 type is 14, but expected type 3 (ReadHeapHdr)
	ERROR. Can't open the file. errCode=217 errInfo=3  (OpenError)
	Warning. File is probably damaged: heap header contains incorrect type (heap object type=3).

Since it's a valid file, the Header for heap 3 type is really 3, so we're looking for it in the
wrong place.

File 1CourtesyAcc.ngl has (besides the default stuff at the beginning of the 1st system)
just one note on two staves. Open it with 5.8.9 =>

	debug. ReadHeapHdr: hp 0 (HEAD) nFObjs=4 blk=3144892 objSize=346 type=0 ff=8 nO=16 nf=9 ll=0 FPos:2558
	debug. ReadHeapHdr: hp 1 (TAIL) nFObjs=0 blk=3144896 objSize=0 type=1 ff=0 nO=0 nf=0 ll=0 FPos:3960
	debug. ReadHeapHdr: hp 2 (SYNC) nFObjs=1 blk=3144900 objSize=30 type=2 ff=2 nO=64 nf=62 ll=0 FPos:3978
	debug. ReadHeapHdr: hp 3 (REPEATEND) nFObjs=0 blk=3144904 objSize=6 type=3 ff=1 nO=8 nf=7 ll=0 FPos:4026
	debug. ReadHeapHdr: hp 4 (PAGE) nFObjs=0 blk=3144908 objSize=0 type=4 ff=0 nO=0 nf=0 ll=0 FPos:4044
	debug. ReadHeapHdr: hp 5 (SYSTEM) nFObjs=0 blk=3144912 objSize=0 type=5 ff=0 nO=0 nf=0 ll=0 FPos:4062
	debug. ReadHeapHdr: hp 6 (STAFF) nFObjs=4 blk=3144916 objSize=50 type=6 ff=8 nO=16 nf=11 ll=0 FPos:4080
	debug. ReadHeapHdr: hp 7 (MEASURE) nFObjs=2 blk=3144920 objSize=40 type=7 ff=3 nO=12 nf=9 ll=0 FPos:4298
	debug. ReadHeapHdr: hp 8 (CLEF) nFObjs=2 blk=3144924 objSize=10 type=8 ff=3 nO=8 nf=5 ll=0 FPos:4396
	debug. ReadHeapHdr: hp 9 (KEYSIG) nFObjs=2 blk=3144928 objSize=24 type=9 ff=3 nO=8 nf=5 ll=0 FPos:4434
	debug. ReadHeapHdr: hp 10 (TIMESIG) nFObjs=2 blk=3144932 objSize=12 type=10 ff=3 nO=8 nf=5 ll=0 FPos:4500
	debug. ReadHeapHdr: hp 11 (BEAMSET) nFObjs=0 blk=3144936 objSize=6 type=11 ff=1 nO=12 nf=11 ll=0 FPos:4542
	debug. ReadHeapHdr: hp 12 (CONNECT) nFObjs=4 blk=3144940 objSize=12 type=12 ff=8 nO=16 nf=11 ll=0 FPos:4560
	debug. ReadHeapHdr: hp 13 (DYNAMIC) nFObjs=0 blk=3144944 objSize=14 type=13 ff=1 nO=8 nf=7 ll=0 FPos:4626
	debug. ReadHeapHdr: hp 14 (MODNR) nFObjs=0 blk=3144948 objSize=6 type=14 ff=1 nO=8 nf=7 ll=0 FPos:4644
	debug. ReadHeapHdr: hp 15 (GRAPHIC) nFObjs=0 blk=3144952 objSize=6 type=15 ff=1 nO=8 nf=7 ll=0 FPos:4662
	debug. ReadHeapHdr: hp 16 (OCTAVE) nFObjs=0 blk=3144956 objSize=4 type=16 ff=1 nO=8 nf=7 ll=0 FPos:4680
	debug. ReadHeapHdr: hp 17 (SLUR) nFObjs=0 blk=3144960 objSize=42 type=17 ff=1 nO=8 nf=7 ll=0 FPos:4698
	debug. ReadHeapHdr: hp 18 (TUPLET) nFObjs=0 blk=3144964 objSize=4 type=18 ff=1 nO=8 nf=7 ll=0 FPos:4716
	debug. ReadHeapHdr: hp 19 (GRSYNC) nFObjs=0 blk=3144968 objSize=30 type=19 ff=1 nO=12 nf=11 ll=0 FPos:4734
	debug. ReadHeapHdr: hp 20 (TEMPO) nFObjs=0 blk=3144972 objSize=0 type=20 ff=0 nO=0 nf=0 ll=0 FPos:4752
	debug. ReadHeapHdr: hp 21 (SPACER) nFObjs=0 blk=3144976 objSize=0 type=21 ff=0 nO=0 nf=0 ll=0 FPos:4770
	debug. ReadHeapHdr: hp 22 (ENDING) nFObjs=0 blk=3144980 objSize=0 type=22 ff=0 nO=0 nf=0 ll=0 FPos:4788
	debug. ReadHeapHdr: hp 23 (PSEUDOMEAS) nFObjs=0 blk=3144984 objSize=6 type=23 ff=1 nO=8 nf=7 ll=0 FPos:4806
	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824

With the current 5.9.1 =>

	debug. ReadHeapHdr: hp 0 (HEAD) nFObjs=4 blk=3144892 objSize=346 type=0 ff=8 nO=16 nf=9 ll=0 FPos:2558
	debug. ReadHeapHdr: hp 1 (TAIL) nFObjs=0 blk=3144896 objSize=0 type=1 ff=0 nO=0 nf=0 ll=0 FPos:3960
	debug. ReadHeapHdr: hp 2 (SYNC) nFObjs=1 blk=3144900 objSize=30 type=2 ff=2 nO=64 nf=62 ll=0 FPos:3978
	debug. ReadHeapHdr: hp 3 (REPEATEND) nFObjs=0 blk=0 objSize=0 type=0 ff=47 nO=64720 nf=0 ll=5 FPos:4054
	ERROR. Header for heap 3 type is 0, but expected type 3 (ReadHeapHdr)
	ERROR. Can't open the file. errCode=217 errInfo=3  (OpenError)

Yep: the REPEATEND heap starts at 4026, but we're looking for it at 4054, 28 bytes too far --
and 28 is the increase in size of ANOTE from N105 to N106. ??

For N105 files, ReadObjHeap() needs to use sizeof(N105 SUPEROBJECT) instead of (SUPEROBJECT)!
Change that =>

	debug. ReadHeapHdr: hp 0 (HEAD) nFObjs=4 blk=3144892 objSize=346 type=0 ff=8 nO=16 nf=9 ll=0 FPos:2558
	debug. ReadHeapHdr: hp 1 (TAIL) nFObjs=0 blk=3144896 objSize=0 type=1 ff=0 nO=0 nf=0 ll=0 FPos:3960
	debug. ReadHeapHdr: hp 2 (SYNC) nFObjs=1 blk=3144900 objSize=30 type=2 ff=2 nO=64 nf=62 ll=0 FPos:3978
	debug. ReadHeapHdr: hp 3 (REPEATEND) nFObjs=0 blk=3144904 objSize=6 type=3 ff=1 nO=8 nf=7 ll=0 FPos:4026
	debug. ReadHeapHdr: hp 4 (PAGE) nFObjs=0 blk=3144908 objSize=0 type=4 ff=0 nO=0 nf=0 ll=0 FPos:4044
	debug. ReadHeapHdr: hp 5 (SYSTEM) nFObjs=0 blk=3144912 objSize=0 type=5 ff=0 nO=0 nf=0 ll=0 FPos:4062
	debug. ReadHeapHdr: hp 6 (STAFF) nFObjs=4 blk=3144916 objSize=50 type=6 ff=8 nO=16 nf=11 ll=0 FPos:4080
	debug. ReadHeapHdr: hp 7 (MEASURE) nFObjs=2 blk=3144920 objSize=40 type=7 ff=3 nO=12 nf=9 ll=0 FPos:4298
	debug. ReadHeapHdr: hp 8 (CLEF) nFObjs=2 blk=3144924 objSize=10 type=8 ff=3 nO=8 nf=5 ll=0 FPos:4396
	debug. ReadHeapHdr: hp 9 (KEYSIG) nFObjs=2 blk=3144928 objSize=24 type=9 ff=3 nO=8 nf=5 ll=0 FPos:4434
	debug. ReadHeapHdr: hp 10 (TIMESIG) nFObjs=2 blk=3144932 objSize=12 type=10 ff=3 nO=8 nf=5 ll=0 FPos:4500
	debug. ReadHeapHdr: hp 11 (BEAMSET) nFObjs=0 blk=3144936 objSize=6 type=11 ff=1 nO=12 nf=11 ll=0 FPos:4542
	debug. ReadHeapHdr: hp 12 (CONNECT) nFObjs=4 blk=3144940 objSize=12 type=12 ff=8 nO=16 nf=11 ll=0 FPos:4560
	debug. ReadHeapHdr: hp 13 (DYNAMIC) nFObjs=0 blk=3144944 objSize=14 type=13 ff=1 nO=8 nf=7 ll=0 FPos:4626
	debug. ReadHeapHdr: hp 14 (MODNR) nFObjs=0 blk=3144948 objSize=6 type=14 ff=1 nO=8 nf=7 ll=0 FPos:4644
	debug. ReadHeapHdr: hp 15 (GRAPHIC) nFObjs=0 blk=3144952 objSize=6 type=15 ff=1 nO=8 nf=7 ll=0 FPos:4662
	debug. ReadHeapHdr: hp 16 (OCTAVE) nFObjs=0 blk=3144956 objSize=4 type=16 ff=1 nO=8 nf=7 ll=0 FPos:4680
	debug. ReadHeapHdr: hp 17 (SLUR) nFObjs=0 blk=3144960 objSize=42 type=17 ff=1 nO=8 nf=7 ll=0 FPos:4698
	debug. ReadHeapHdr: hp 18 (TUPLET) nFObjs=0 blk=3144964 objSize=4 type=18 ff=1 nO=8 nf=7 ll=0 FPos:4716
	debug. ReadHeapHdr: hp 19 (GRSYNC) nFObjs=0 blk=3144968 objSize=30 type=19 ff=1 nO=12 nf=11 ll=0 FPos:4734
	debug. ReadHeapHdr: hp 20 (TEMPO) nFObjs=0 blk=3144972 objSize=0 type=20 ff=0 nO=0 nf=0 ll=0 FPos:4752
	debug. ReadHeapHdr: hp 21 (SPACER) nFObjs=0 blk=3144976 objSize=0 type=21 ff=0 nO=0 nf=0 ll=0 FPos:4770
	debug. ReadHeapHdr: hp 22 (ENDING) nFObjs=0 blk=3144980 objSize=0 type=22 ff=0 nO=0 nf=0 ll=0 FPos:4788
	debug. ReadHeapHdr: hp 23 (PSEUDOMEAS) nFObjs=0 blk=3144984 objSize=6 type=23 ff=1 nO=8 nf=7 ll=0 FPos:4806
	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824
	ERROR. Header for heap 24 objSize is 46, but expected objSize 56 (ReadHeapHdr)
	ERROR. Can't open the file. errCode=251 errInfo=24  (OpenError)
	
Better! It looks like the problem isn't ReadHeapHdr(), but ReadObjHeap().

-------------------------------------------------------------------------------

11 - 27 Dec.
	
Work on ReadObjHeap(); now opening file '1CourtesyAcc.ngl' gives...

	...
	debug. ReadHeapHdr: hp 0 (HEAD) nFObjs=4 blk=3144892 objSize=346 type=0 ff=8 nO=16 nf=9 ll=0 FPos:2558
	...
	debug. ReadHeapHdr: hp 23 (PSEUDOMEAS) nFObjs=0 blk=3144984 objSize=6 type=23 ff=1 nO=8 nf=7 ll=0 FPos:4806
	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824
	debug. ReadObjHeap: type 0 object objLength=30 objLength_5=24 len=24
	debug. ReadObjHeap: type 4 object objLength=44 objLength_5=38 len=38
	debug. ReadObjHeap: type 5 object objLength=50 objLength_5=44 len=44
	debug. ReadObjHeap: type 6 object objLength=36 objLength_5=30 len=30
	debug. ReadObjHeap: type 12 object objLength=32 objLength_5=26 len=26
	debug. ReadObjHeap: type 8 object objLength=30 objLength_5=24 len=24
	debug. ReadObjHeap: type 9 object objLength=30 objLength_5=24 len=24
	debug. ReadObjHeap: type 10 object objLength=30 objLength_5=24 len=24
	debug. ReadObjHeap: type 7 object objLength=54 objLength_5=46 len=46
	debug. ReadObjHeap: type 2 object objLength=32 objLength_5=26 len=26
	debug. ReadObjHeap: type 1 object objLength=30 objLength_5=24 len=24
	debug. ReadObjHeap: type 0 object objLength=30 objLength_5=24 len=24
	Dec 15 15:17:20: --- last message repeated 1 time ---
	ERROR. Object type=50 is illegal. (ReadObjHeap)
	ERROR. Can't open the file. errCode=998 errInfo=24  (OpenError)

Much better! In fact, the object types are all just what they should be, except the type
1 object is TAIL, so we've tried to parse a non-existent object at the end! The loop just
tries to read nFObjs =17 objects; is that wrong? Nope; 5.8.9 also says

	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824

Not only nFObjs, but everything in the above line is exactly the same! But there are
actually only 11 objects, 6 fewer, in the main object list. Is the difference the Master
Page object list? Undoubtedly; the Master Page object list contains 6 objects!

Need to add LogPrintf's to 5.8.x and open 1CourtesyAcc.ngl. Oops: 5.8.x doesn't compile!
$*#)%$#%()#$  But just need to rename <destinationMatch> to <fmsDestinationMatch> in a
few places... Done. Open open 1CourtesyAcc.ngl with 5.8.10 =>

	debug. ReadHeapHdr: hp 23 (PSEUDOMEAS) nFObjs=0 blk=3144984 objSize=6 type=23 ff=1 nO=8 nf=7 ll=0 FPos:4806
	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824
	debug. ReadObjHeap: type 0 object objLength=24 len=24
	debug. ReadObjHeap: type 4 object objLength=38 len=38
	debug. ReadObjHeap: type 5 object objLength=44 len=44
	debug. ReadObjHeap: type 6 object objLength=30 len=30
	debug. ReadObjHeap: type 12 object objLength=26 len=26
	debug. ReadObjHeap: type 8 object objLength=24 len=24
	debug. ReadObjHeap: type 9 object objLength=24 len=24
	debug. ReadObjHeap: type 10 object objLength=24 len=24
	debug. ReadObjHeap: type 7 object objLength=46 len=46
	debug. ReadObjHeap: type 2 object objLength=26 len=26
	debug. ReadObjHeap: type 1 object objLength=24 len=24
	debug. ReadObjHeap: type 0 object objLength=24 len=24
	debug. ReadObjHeap: type 4 object objLength=38 len=38
	debug. ReadObjHeap: type 5 object objLength=44 len=44
	debug. ReadObjHeap: type 6 object objLength=30 len=30
	debug. ReadObjHeap: type 12 object objLength=26 len=26
	debug. ReadObjHeap: type 1 object objLength=24 len=24
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	info. Opened file '1CourtesyAcc.ngl'.

So 5.9.1 finds a 2nd type 0 object, then dies, where 5.8.10 finds a type 4, beginning the
Master Page object list. Huh? Need more details.

With 5.8.10:

	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824
	debug. ReadObjHeap: src=ac8938 dst=ac882e offset:0 type=0
	...
	debug. ReadObjHeap: src=ac8a6a dst=ac89fa offset:306 type=1
	debug. ReadObjHeap: src=ac8a82 dst=ac8a28 offset:330 type=0
	debug. ReadObjHeap: src=ac8a9a dst=ac8a56 offset:354 type=4
	debug. ReadObjHeap: src=ac8ac0 dst=ac8a84 offset:392 type=5
	debug. ReadObjHeap: src=ac8aec dst=ac8ab2 offset:436 type=6
	debug. ReadObjHeap: src=ac8b0a dst=ac8ae0 offset:466 type=12
	debug. ReadObjHeap: src=ac8b24 dst=ac8b0e offset:492 type=1
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	info. Opened file '1CourtesyAcc.ngl'.

With 5.9.1:

	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824
	debug. ReadObjHeap: nFObjs=17 heapSizeAllObjs=782 count=4 sizeAllObjs=516
	debug. ReadObjHeap: src=ace142 dst=ace038 offset:0 type=0
	debug. ReadObjHeap: type 0 object objLength=30 objLength_5=24 len=24
	...
	debug. ReadObjHeap: type 2 object objLength=32 objLength_5=26 len=26
	debug. ReadObjHeap: src=ace274 dst=ace268 offset:306 type=1				DELTA = -12 (base 10)
	debug. ReadObjHeap: type 1 object objLength=30 objLength_5=24 len=24
	debug. ReadObjHeap: src=ace28c dst=ace2a0 offset:330 type=0				DELTA = +20 " "
	debug. ReadObjHeap: type 0 object objLength=30 objLength_5=24 len=24
	debug. ReadObjHeap: src=ace2a4 dst=ace2d8 offset:354 type=0
	debug. ReadObjHeap: type 0 object objLength=30 objLength_5=24 len=24
	debug. ReadObjHeap: src=ace2bc dst=ace310 offset:378 type=50
	ERROR. Object type=50 is illegal. (ReadObjHeap)
	ERROR. Can't open the file. errCode=998 errInfo=24  (OpenError)

What do we do once we have the src & dst addresses & len?

		BlockMove(src, dst, len);

So 5.8.10 is always moving blocks to lower addresses; 5.9.1 starts by doing that, but
switches to moving them to higher addresses, undoubtedly clobbering yet-to-be-handled
stuff! Why?

	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824
	debug. ReadObjHeap: nFObjs=17 heapSizeAllObjs=782 count=4 sizeAllObjs=516
	debug. ReadObjHeap: src=acbb42 dst=acba38 dst-src:-266 offset:0 type=0
	debug. ReadObjHeap: src=acbb5a dst=acba70 dst-src:-234 offset:24 type=4		d(dst-src)=32
	debug. ReadObjHeap: src=acbb80 dst=acbaa8 dst-src:-216 offset:62 type=5		d(dst-src)=18
	debug. ReadObjHeap: src=acbbac dst=acbae0 dst-src:-204 offset:106 type=6	d(dst-src)=12
	debug. ReadObjHeap: src=acbbca dst=acbb18 dst-src:-178 offset:136 type=12	d(dst-src)=26
	debug. ReadObjHeap: src=acbbe4 dst=acbb50 dst-src:-148 offset:162 type=8	d(dst-src)=30
	debug. ReadObjHeap: src=acbbfc dst=acbb88 dst-src:-116 offset:186 type=9	d(dst-src)=32
	debug. ReadObjHeap: src=acbc14 dst=acbbc0 dst-src:-84 offset:210 type=10	d(dst-src)=32
	debug. ReadObjHeap: src=acbc2c dst=acbbf8 dst-src:-52 offset:234 type=7		d(dst-src)=32
	debug. ReadObjHeap: src=acbc5a dst=acbc30 dst-src:-42 offset:280 type=2		d(dst-src)=10
	debug. ReadObjHeap: src=acbc74 dst=acbc68 dst-src:-12 offset:306 type=1		d(dst-src)=30
	debug. ReadObjHeap: src=acbc8c dst=acbca0 dst-src:20 offset:330 type=0		d(dst-src)=32
	debug. ReadObjHeap: src=acbca4 dst=acbcd8 dst-src:52 offset:354 type=0		d(dst-src)=32
	debug. ReadObjHeap: src=acbcbc dst=acbd10 dst-src:84 offset:378 type=50		d(dst-src)=32
	ERROR. Object type=50 is illegal. (ReadObjHeap)
	ERROR. Can't open the file. errCode=998 errInfo=24  (OpenError)
	
Duh:

	src += len { = objLength_5[type] }
	dst += sizeof(SUPEROBJECT) { = 38(16) = 56 }

Ah-hah! Objects of N105 length are packed in and need to be moved to have room to expand
to N106 length -- but doing that from front to back results in clobbering later objs
before they're moved. So either have to move them in reverse order, or copy them to a
separate chunk of memory large enough to handle the expansion. By far the most space in
the object heap of any reasonable Ngale file will be Syncs; they grow by a factor of 32/26.
But much safer to use the max growth factor of any object!; what is that?

	type 0 objLength=30 objLength_5=24	factor=1.250
	type 1 objLength=30 objLength_5=24	factor=1.250
	type 2 objLength=32 objLength_5=26	factor=1.231
	type 3 objLength=38 objLength_5=32	factor=1.188
	type 4 objLength=44 objLength_5=38	factor=1.158
	type 5 objLength=50 objLength_5=44	factor=1.136
	type 6 objLength=36 objLength_5=30	factor=1.200
	type 7 objLength=54 objLength_5=46	factor=1.174
	type 8 objLength=30 objLength_5=24	factor=1.250
	type 9 objLength=30 objLength_5=24	factor=1.250
	type 10 objLength=30 objLength_5=24	factor=1.250
	type 11 objLength=38 objLength_5=26	factor=1.462
	type 12 objLength=32 objLength_5=26	factor=1.231
	type 13 objLength=36 objLength_5=30	factor=1.200
	type 14 (no objects of this type, only subobjects)	
	type 15 objLength=56 objLength_5=44	factor=1.273
	type 16 objLength=52 objLength_5=40	factor=1.300
	type 17 objLength=42 objLength_5=30	factor=1.400
	type 18 objLength=50 objLength_5=40	factor=1.250
	type 19 objLength=30 objLength_5=24	factor=1.250
	type 20 objLength=48 objLength_5=38	factor=1.263
	type 21 objLength=34 objLength_5=28	factor=1.214
	type 22 objLength=40 objLength_5=32	factor=1.250
	type 23 objLength=30 objLength_5=24	factor=1.250
	
The greatest ratio is 1.462 (for type 11 objects). Let's round up to 1.5. ??

-------------------------------------------------------------------------------

28 Dec. - 15 Jan. *** 2020 ***

But wait! What we're reading in is objects of either N105 or N106 length, yes, but the
length we want to expand to is the 5.9.x SUPEROBJECT size regardless!!

So ReadObjHeap() is simpler than I thought. After reading the objects in, it just pads
them to sizeof(SUPEROBJECT). The description of the process it appears it's been
following is "We do this by preallocating the entire heap with room for all the objects
plus all the padding; reading the variable-sized objects into it preceded by the total
padding; and then moving the objects, starting at the beginning of the heap, down
into their correct positions, followed by per-object padding as needed." That sounds
exactly right! Why doesn't it work?

Opening '1CourtesyAcc.ngl' with 5.8.10 gives...

	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824
	debug. ReadObjHeap: src=aa3138 dst=aa302e dst-src:-266 offset:0 type=0
	debug. ReadObjHeap: src=aa3150 dst=aa305c dst-src:-244 offset:24 type=4
	debug. ReadObjHeap: src=aa3176 dst=aa308a dst-src:-236 offset:62 type=5
	debug. ReadObjHeap: src=aa31a2 dst=aa30b8 dst-src:-234 offset:106 type=6
	debug. ReadObjHeap: src=aa31c0 dst=aa30e6 dst-src:-218 offset:136 type=12
	debug. ReadObjHeap: src=aa31da dst=aa3114 dst-src:-198 offset:162 type=8
	debug. ReadObjHeap: src=aa31f2 dst=aa3142 dst-src:-176 offset:186 type=9
	debug. ReadObjHeap: src=aa320a dst=aa3170 dst-src:-154 offset:210 type=10
	debug. ReadObjHeap: src=aa3222 dst=aa319e dst-src:-132 offset:234 type=7
	debug. ReadObjHeap: src=aa3250 dst=aa31cc dst-src:-132 offset:280 type=2
	debug. ReadObjHeap: src=aa326a dst=aa31fa dst-src:-112 offset:306 type=1
	debug. ReadObjHeap: src=aa3282 dst=aa3228 dst-src:-90 offset:330 type=0
	debug. ReadObjHeap: src=aa329a dst=aa3256 dst-src:-68 offset:354 type=4
	debug. ReadObjHeap: src=aa32c0 dst=aa3284 dst-src:-60 offset:392 type=5
	debug. ReadObjHeap: src=aa32ec dst=aa32b2 dst-src:-58 offset:436 type=6
	debug. ReadObjHeap: src=aa330a dst=aa32e0 dst-src:-42 offset:466 type=12
	debug. ReadObjHeap: src=aa3324 dst=aa330e dst-src:-22 offset:492 type=1

With 5.9.1 it now gives...

	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824
	info. nFObjs=17 sizeAllObjsFile=516 sizeAllObjsHeap=782  (ReadObjHeap)
	debug. ReadObjHeap: src=b84342 dst=b84238 dst-src:-266 offset:0 type=0
	debug. ReadObjHeap: src=b84360 dst=b84270 dst-src:-240 offset:30 type=0
	debug. ReadObjHeap: src=b8437e dst=b842a8 dst-src:-214 offset:60 type=2
	debug. ReadObjHeap: src=b8439e dst=b842e0 dst-src:-190 offset:92 type=101
	ERROR. Object type=101 is illegal. (ReadObjHeap)
	ERROR. Can't open the file. errCode=998 errInfo=24  (OpenError)
	
Oops! For version=='N105', still need
		len = objLength_5[type];

With 5.9.1 now, we're back to...

	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824
	info. nFObjs=17 sizeAllObjsFile=516 sizeAllObjsHeap=782  (ReadObjHeap)
	debug. ReadObjHeap: src=ad7742 dst=ad7638 dst-src:-266 offset:0 type=0
	debug. ReadObjHeap: type 0 object objLength=30 objLength_5=24
	debug. ReadObjHeap: src=ad775a dst=ad7670 dst-src:-234 offset:24 type=4
	debug. ReadObjHeap: type 4 object objLength=44 objLength_5=38
	debug. ReadObjHeap: src=ad7780 dst=ad76a8 dst-src:-216 offset:62 type=5
	debug. ReadObjHeap: type 5 object objLength=50 objLength_5=44
	debug. ReadObjHeap: src=ad77ac dst=ad76e0 dst-src:-204 offset:106 type=6
	debug. ReadObjHeap: type 6 object objLength=36 objLength_5=30
	debug. ReadObjHeap: src=ad77ca dst=ad7718 dst-src:-178 offset:136 type=12
	debug. ReadObjHeap: type 12 object objLength=32 objLength_5=26
	debug. ReadObjHeap: src=ad77e4 dst=ad7750 dst-src:-148 offset:162 type=8
	debug. ReadObjHeap: type 8 object objLength=30 objLength_5=24
	debug. ReadObjHeap: src=ad77fc dst=ad7788 dst-src:-116 offset:186 type=9
	debug. ReadObjHeap: type 9 object objLength=30 objLength_5=24
	debug. ReadObjHeap: src=ad7814 dst=ad77c0 dst-src:-84 offset:210 type=10
	debug. ReadObjHeap: type 10 object objLength=30 objLength_5=24
	debug. ReadObjHeap: src=ad782c dst=ad77f8 dst-src:-52 offset:234 type=7
	debug. ReadObjHeap: type 7 object objLength=54 objLength_5=46
	debug. ReadObjHeap: src=ad785a dst=ad7830 dst-src:-42 offset:280 type=2
	debug. ReadObjHeap: type 2 object objLength=32 objLength_5=26
	debug. ReadObjHeap: src=ad7874 dst=ad7868 dst-src:-12 offset:306 type=1
	debug. ReadObjHeap: type 1 object objLength=30 objLength_5=24
	debug. ReadObjHeap: src=ad788c dst=ad78a0 dst-src:20 offset:330 type=0
	debug. ReadObjHeap: type 0 object objLength=30 objLength_5=24
	debug. ReadObjHeap: src=ad78a4 dst=ad78d8 dst-src:52 offset:354 type=0
	debug. ReadObjHeap: type 0 object objLength=30 objLength_5=24
	debug. ReadObjHeap: src=ad78bc dst=ad7910 dst-src:84 offset:378 type=50
	ERROR. Object type=50 is illegal. (ReadObjHeap)
	ERROR. Can't open the file. errCode=998 errInfo=24  (OpenError)

The sequence of offsets & types agrees w/ 5.8.10 all the way to offset 354, where type
should be 4 but is 0. Looks like a clobber -- makes sense; dst-src > 0 would do that!
Ah-hah: sizeAllObjsHeap=782 is the same as w/ 5.8.10, but it has to be larger;
sizeAllObjsHeap should always be based on the current SUPEROBJECT. Fix that =>
 
	debug. ReadHeapHdr: hp 24 (OBJECT) nFObjs=17 blk=3144988 objSize=46 type=24 ff=29 nO=64 nf=44 ll=1 FPos:4824
	info. nFObjs=17 sizeAllObjsFile=516 sizeAllObjsHeap=952  (ReadObjHeap)
	debug. ReadObjHeap: src=accbec dst=acca38 dst-src:-436 offset:0 type=0
	debug. ReadObjHeap: src=accc04 dst=acca70 dst-src:-404 offset:24 type=4
	debug. ReadObjHeap: src=accc2a dst=accaa8 dst-src:-386 offset:62 type=5
	debug. ReadObjHeap: src=accc56 dst=accae0 dst-src:-374 offset:106 type=6
	debug. ReadObjHeap: src=accc74 dst=accb18 dst-src:-348 offset:136 type=12
	debug. ReadObjHeap: src=accc8e dst=accb50 dst-src:-318 offset:162 type=8
	debug. ReadObjHeap: src=accca6 dst=accb88 dst-src:-286 offset:186 type=9
	debug. ReadObjHeap: src=acccbe dst=accbc0 dst-src:-254 offset:210 type=10
	debug. ReadObjHeap: src=acccd6 dst=accbf8 dst-src:-222 offset:234 type=7
	debug. ReadObjHeap: src=accd04 dst=accc30 dst-src:-212 offset:280 type=2
	debug. ReadObjHeap: src=accd1e dst=accc68 dst-src:-182 offset:306 type=1
	debug. ReadObjHeap: src=accd36 dst=accca0 dst-src:-150 offset:330 type=0
	debug. ReadObjHeap: src=accd4e dst=acccd8 dst-src:-118 offset:354 type=4
	debug. ReadObjHeap: src=accd74 dst=accd10 dst-src:-100 offset:392 type=5
	debug. ReadObjHeap: src=accda0 dst=accd48 dst-src:-88 offset:436 type=6
	debug. ReadObjHeap: src=accdbe dst=accd80 dst-src:-62 offset:466 type=12
	debug. ReadObjHeap: src=accdd8 dst=accdb8 dst-src:-32 offset:492 type=1
	Notice. Can't convert 'N105' format files yet.
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	ERROR. PROGRAM ERROR: GetSpTimeInfo: can't handle object type -7 (at 0)
	
Much better: looks like the heaps are getting set up correctly! Now to move the contents
of the objects around, in ConvertObjContent()...

-------------------------------------------------------------------------------

16 - 18 Jan.

ConvertObjContent() should go thru the object list:

		for (pL = doc->headL; pL; pL = RightLINK(pL)) { ... }

For each object, first convert the OBJECTHEADER -- but does every object have one?
These objects have one:

0	HEADER_5
	TAIL_5
	SYNC_5
	RPTEND_5
	PAGE_5
5	SYSTEM_5
	STAFF_5
	MEASURE_5
	CLEF_5
	KEYSIG_5
10	TIMESIG_5
	BEAMSET_5
	CONNECT_5
	DYNAMIC_5
	(MODNR)
15	GRAPHIC_5
	OTTAVA_5
	SLUR_5
	TUPLET_5
	GRSYNC_5
20	TEMPO_5
	SPACER_5
	ENDING_5
	PSMEAS_5
	(OBJECT)

Yes: that's every type!

-------------------------------------------------------------------------------

19 - 23(?) Jan.

Comparing DoDebug() output for '1CourtesyAcc.ngl' from the latest to that from 5.8.x
shows OBJECTHEADERs are being converted correctly, except for the flags and oRect.l!!
E.g., the CLEF should be ".VSV.." but it's ".VS...": the _valid_ flag is different.
Why?? Likewise the KEYSIG. Many of the objRect.left's are zero but should be nonzero
-- or maybe it doesn't matter at this point?

From the latest log for opening file '1CourtesyAcc.ngl':

	info. nFObjs=17 sizeAllObjsFile=516 sizeAllObjsHeap=952  (ReadObjHeap)
	debug. ConvertObject: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	debug.              : 00 00 00 00   1f 2f 02 30   00 00 42 d0   02 cc 43 8c
	debug.              : 00 00 02 80   f0 28 3c b0   
	debug. ConvertObject: pL=1 type=0 xd=0 sel=0 vis=0
	debug. ConvertObject: 00 03 00 01   00 00 00 00   00 00 04 67   00 00 00 00
	debug.              : 00 00 00 00   46 69 00 65   00 00 00 00   00 00 00 00
	debug.              : 00 00 72 53   61 76 00 00   
	debug. ConvertObject: pL=2 type=4 xd=0 sel=0 vis=1
	debug. ConvertObject: 00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	debug.              : 00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 00
	debug.              : 02 40 00 02   0e 20 23 d0   
	debug. ConvertObject: pL=3 type=5 xd=576 sel=0 vis=1
	debug. ConvertSYSTEM: 00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	debug.              : 00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 00
	debug.              : 02 40 00 02   0e 20 23 d0   
	debug. ConvertSYSTEM: sysL=3 type=5 xd=576 sel=0 vis=1
	debug. ConvertSYSTEM: SysRect(t,l,b,r)=7595,25971,22337,-4056
	debug. ConvertObject: 00 05 00 03   00 01 00 00   00 00 06 66   00 00 00 00
	debug.              : 00 00 00 00   65 4c 02 73   00 00 00 00   00 04 00 00
	debug.              : a0 8f 00 03   24 02 24 14   
	debug. ConvertObject: pL=4 type=6 xd=0 sel=0 vis=1
	debug. ConvertObject: 00 06 00 04   00 01 00 50   00 00 0c 61   00 00 00 00
	debug.              : 00 00 00 00   5f 10 02 4e   00 00 24 22   95 5a 53 38
	debug.              : 13 67 10 00   00 00 00 24   
	debug. ConvertObject: pL=5 type=12 xd=80 sel=0 vis=1
	debug. ConvertObject: 00 07 00 05   00 01 00 60   00 00 08 73   00 3c 00 71
	debug.              : 00 ca 00 82   2e 74 02 61   93 d0 6b d4   67 55 95 c0
	debug.              : 00 3b 5b 70   a0 65 6b d4   
	debug. ConvertObject: pL=6 type=8 xd=96 sel=0 vis=1
	debug. ConvertObject: 00 08 00 06   00 01 01 b0   00 00 09 71   00 00 00 00
	debug.              : 00 00 00 00   73 65 02 73   00 00 00 23   00 00 00 00
	debug.              : ff ff ff ff   00 00 00 00   
	debug. ConvertObject: pL=7 type=9 xd=432 sel=0 vis=1
	debug. ConvertObject: 00 09 00 07   00 01 01 b0   00 00 0a 76   00 48 00 86
	debug.              : 00 be 00 8e   65 4c 02 73   93 d0 6b d4   f0 28 3e 20
	debug.              : 00 00 00 00   93 d0 6e d8   
	debug. ConvertObject: pL=8 type=10 xd=432 sel=0 vis=1
	debug. ConvertObject: 00 0a 00 08   00 01 02 d0   00 00 07 34   00 24 00 96
	debug.              : 00 e2 00 9a   74 61 02 42   00 00 00 00   00 04 00 00
	debug.              : 00 64 00 03   00 04 00 e2   
	debug. ConvertObject: pL=9 type=7 xd=720 sel=0 vis=0
	debug. ConvertObject: 00 0b 00 09   00 01 00 90   00 00 02 5b   00 5e 00 a0
	debug.              : 00 64 00 a9   6e 74 01 6f   00 00 02 40   06 a8 0e 20
	debug.              : 23 d0 65 73   57 41 00 05   
	debug. ConvertObject: pL=10 type=2 xd=144 sel=0 vis=1
	debug. ConvertObject: 00 00 00 0a   00 00 ff ff   00 00 01 20   00 00 00 00
	debug.              : 00 00 00 00   00 00 00 6c   00 00 00 00   00 00 00 00
	debug.              : 5f 10 02 4e   00 00 00 07   
	debug. ConvertObject: pL=11 type=1 xd=-1 sel=0 vis=0
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	ERROR. PROGRAM ERROR: GetSpTimeInfo: can't handle object type 0 (at L0)

The hex dumps are of the first 40 bytes of each object. Comparing the one from
ConvertObject() for the SYSTEM object to the one for ConvertSYSTEM() is after it's
supposedly copied the SYSTEM's systemRect to its new location: they're identical -- and
both nonsense! According to 5.8.x, it should be d576,1704,3616,9168. But maybe it just
hasn't been computed yet? Nope: After the file's opened w/ 5.9.1, DoDebug() says

	info.  2 L 3 xd=576 yd=576 SYSTEM .VS... oRect.l=p0 sRect(t,l,b,r)=d7595,25971,22337,-4056 s#=3616
	Warning. *DCheckNode: SYSTEM L3 HAS GARBAGE systemRect.

Hmmm. On a previous run, it said

	info.  2 L 3 xd=576 yd=576 SYSTEM .VS... oRect.l=p0 sRect(t,l,b,r)=d9168,25971,22337,-24143 s#=3616
	Warning. *DCheckNode: SYSTEM L3 HAS GARBAGE systemRect.

...an equally nonsensical sysRect, but w/ 2 values the same, and the same (nonsensical) systemNum.
Offset in 'N105' format is +12... Let's see what 5.8.10 says for opening '1CourtesyAcc.ngl'
(the "ConvertObject" label is wrong: from OpenFile() just before the call to ConvertScore()):

	debug. ConvertObject: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	debug.              : 00 00 00 00   1f 2f 02 30   a6 38 00 00   00 01 00 00
	debug.              : 00 02 16 25   54 20 00 08   
	debug. ConvertObject: 00 03 00 01   00 00 00 00   00 00 04 67   00 00 00 00
	debug.              : 00 00 00 00   46 69 00 65   00 00 00 00   00 00 64 65
	debug.              : 46 6f 72 53   61 76 c1 d3   
	debug. ConvertObject: 00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	debug.              : 00 e2 02 3d   46 6f 00 53   00 00 00 00   00 02 00 01
	debug.              : 02 40 06 a8   0e 20 23 d0   
	debug. ConvertObject: 00 05 00 03   00 01 00 00   00 00 06 66   00 00 00 00
	debug.              : 00 00 00 00   65 4c 02 73   00 00 00 00   00 03 c1 d3
	debug.              : a1 b1 c1 d3   a1 b1 c1 d3   
	debug. ConvertObject: 00 06 00 04   00 01 00 50   00 00 0c 61   00 00 00 00
	debug.              : 00 00 00 00   5f 10 02 4e   00 00 a1 b1   c1 d3 a0 77
	debug.              : a6 38 00 00   00 01 00 00   
	debug. ConvertObject: 00 07 00 05   00 01 00 60   00 00 08 73   00 3c 00 71
	debug.              : 00 ca 00 82   2e 74 02 61   00 00 00 07   00 a9 ad 36
	debug.              : 00 02 00 55   00 02 00 00   
	debug. ConvertObject: 00 08 00 06   00 01 01 b0   00 00 09 71   00 00 00 00
	debug.              : 00 00 00 00   73 65 02 73   04 67 00 00   00 00 00 00
	debug.              : 00 00 46 69   00 65 00 00   
	debug. ConvertObject: 00 09 00 07   00 01 01 b0   00 00 0a 76   00 48 00 86
	debug.              : 00 be 00 8e   65 4c 02 73   02 3d 46 6f   00 53 00 00
	debug.              : 00 00 00 03   00 01 02 40   
	debug. ConvertObject: 00 0a 00 08   00 01 02 d0   00 00 07 34   00 24 00 96
	debug.              : 00 e2 00 9a   74 61 02 42   00 00 00 00   00 03 00 04
	debug.              : 00 64 00 24   00 98 00 e2   
	debug. ConvertObject: 00 0b 00 09   00 01 00 90   00 00 02 5b   00 5e 00 a0
	debug.              : 00 64 00 a9   6e 74 01 6f   00 00 00 3c   00 71 00 ca
	debug.              : 00 82 2e 74   02 61 00 08   
	debug. ConvertObject: 00 00 00 0a   00 00 ff ff   00 00 01 20   00 00 00 00
	debug.              : 00 00 00 00   00 00 00 6c   00 00 0a 76   00 48 00 86
	debug.              : 00 be 00 8e   65 4c 02 73   

For every object, the 5.8.10 and 5.9.1 output is identical for at least the first 24
bytes (the header length), but differs at some point after that. If they differ before
the object's length, it could be a sign of something wrong. Objects in 1CourtesyAcc.ngl:

type	size	diff. at	problematic?
type=0	24		+26				n
type=4	38		+30				YES
type=5	44		+29				YES
type=6	30		+29				YES
type=12	26		+26				n
type=8	24		+24				n
type=9	24		+24				n
type=10
type=7
type=2
type=1
type=0
type=4
type=5
type=6
type=12
type=1

-------------------------------------------------------------------------------

24 Nov.(?) - 2 Dec.

Going back to the SYSTEM systemRect problem, in N105, the systemRect is 8 bytes after the
object header = .+24+8 = .+32; systemNum is just before that, .+30. In 5.8.10:

	.		00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	.+16	00 e2 02 3d   46 6f 00 53   00 00 00 00   00 02 00 01
	.+32	02 40 06 a8   0e 20 23 d0   

=> systemRect(t,l,b,r) = 0x0240, 0x06a8, 0x0e20, 0x23d0 = 576,1704,3616,9168 and systemNum = 1:
all just the same as from its Browser. So at what point does 5.9.1 screw it up? Surely
ReadHeaps() is okay... I think.

	debug. ReadObjHeap1: 00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	debug.             : 00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 01
	debug.             : 02 40 06 a8   0e 20 23 d0   65 73 57 41   00 05 
	debug. ReadObjHeap2: 00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	debug.             : 00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 01
	debug.             : 02 40 06 a8   0e 20 23 d0   65 73 57 41   a1 b1 

The only change from ReadObjHeap1 (before BlockMove(src, dst, len)) to ReadObjHeap2 (after
is .+44 & +45, but that's OK: for this type 5 object,objLength_5=44 & len=44. A (small)
relief. Are they the same as what 5.8.10 reads in? The 1st 44 bytes, from 5.8.10:

	00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	00 e2 02 3d   46 6f 00 53   00 00 00 00   00 02 00 01
	02 40 06 a8   0e 20 23 d0  

The 1st 44 bytes of ReadObjHeap1 & ReadObjHeap2 in 5.9.1:

	00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 01
	02 40 06 a8   0e 20 23 d0   65 73 57 41

No! There's one difference, .+29 is 02 in 5.8.10, 03 in 5.9.1!  Y##$!%#!@#*!#(
From ConvertObject in 5.9.1:

	00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 00
	02 40 00 02   0e 20 23 d0

Now +31, +34, and +35 have also changed!

Going back to the 1st change, at .+29, let's see what 5.9.1 has just after the FSRead():

	ioErr = FSRead(refNum, &sizeAllObjsFile, startPos);
DHexDump(LOG_DEBUG, "ReadObjHeap0", (unsigned char *)startPos, 24+38+44, 4, 16);

	debug. ReadObjHeap0: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	debug.             : 00 00 00 00   1f 2f 02 30   00 03 00 01   00 00 00 00
	debug.             : 00 00 04 67   00 00 00 00   00 00 00 00   46 69 00 65
	debug.             : 00 00 00 00   00 00 64 65   46 6f 72 53   61 76 00 04
	debug.             : 00 02 00 00   02 40 02 40   05 61 00 24   00 6b 00 e2
	debug.             : 02 3d 46 6f   00 53 00 00   00 00 00 03   00 01 02 40
	debug.             : 06 a8 0e 20   23 d0 65 73   57 41 

This is 24+38+44 for objs of type 0, 4, 5, so the last 44 bytes are the SYSTEM.

	00 04 00 02 00 00   02 40 02 40   05 61 00 24   00 6b
	00 e2 02 3d 46 6f   00 53 00 00   00 00 00 03   00 01
	02 40 06 a8 0e 20   23 d0 65 73   57 41

F*ck. Byte .+29 is different!!!!!!!!!!!!!!!!! Now what??

Back to 5.8.10. Add DHexDump() as above just after the FSRead:

	debug. ReadObjHeap0: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	debug.             : 00 00 00 00   1f 2f 02 30   00 03 00 01   00 00 00 00
	debug.             : 00 00 04 67   00 00 00 00   00 00 00 00   46 69 00 65
	debug.             : 00 00 00 00   00 00 64 65   46 6f 72 53   61 76 00 04
	debug.             : 00 02 00 00   02 40 02 40   05 61 00 24   00 6b 00 e2
	debug.             : 02 3d 46 6f   00 53 00 00   00 00 00 03   00 01 02 40
	debug.             : 06 a8 0e 20   23 d0 65 73   57 41 

It's exactly the same as with 5.9.1!!! Byte .+29 of the SYSTEM is 03. So the discrepancy
is because 5.8.10 is changing it to 02, not because 5.9.1 is changing it to 03! But
how can that be part of reading Ngale files correctly, which presumably 5.8.10 does??

That _might_ not be significant. Putting it aside for now, the SYSTEM's screwed-up
systemRect and systemNum are definitely a problem. How does this happen between ReadObjHeap2
& ConvertObjects()?

Display LINK 3 (the SYSTEM) at very end of ReadObjHeap() => nothing changed yet.
Display LINK 3 just after call to ReadHeaps() => +31, +34, and +35 have changed.
After ReadObjHeap(), ReadHeaps() just calls HeapFixLinks().

Halfway thru HeapFixLinks(), LINK 3 .+31, +34, and +35 have already changed. Cause:
HeapFixLinks() uses the DSysPAGE & DLinkLSYS macros, which undoubtedly assume the 5.9.x
objects! So write HeapFixN105Links(), using special-purpose macros => the SYSTEM comes
through unscathed. Or rather scathed just as in 5.8.10: .+29 changes from 03 to 02
between ReadObjHeap3 and HeapFixLinks1. Well, scathed that way thru the LogPrintf in
ConvertSYSTEM; after that, +34, and +35 get changed... because ConvertSYSTEM uses the
locations of fields in "standard" (N106) files, not N105 files. Fix it => +34 and +35
are OK!

Debug Full display of all of 1CourtesyAcc.ngl finds 32 errors! E.g.,

	Warning. •DCheckNode: SYSTEM L3 HAS INCONSISTENT LEFT SYSTEM LINK L41393.
	Warning. •DCheckNode: SYSTEM L3 HAS INCONSISTENT RIGHT SYSTEM LINK L49619.

Well, L3 is the only system in the score, so it should have lSystem = rSystem = 0;
but Browser shows them as 1 and 576 => fixed.

Add ConvertPAGE, ConvertSTAFF, ConvertMEASURE => Debug Full display finds only 21? errors,
and all (or almost all) are in subobjects, which I haven't even started to convert.
Hooray! Of course there's a _lot_ Debug doesn't check...

So far I think I'm converting all fields of PAGE, SYSTEM, and STAFF objects correctly, and
some fields of MEASURE objects, but only in the main object list. Still to do: other
objects; all subobjects; and the Master Page object list.

-------------------------------------------------------------------------------

3 - 8 Feb.

Contrary to the above claim, in 1CourtesyAcc.ngl, Debug Check Standard Things/Full finds
(on different runs) 89, 99, 102 errors. The number varies, and Ngale sometimes hangs trying
to open it; not surprisingly, there's some random garbage in the partially-converted object
list!. Debug Display finds 63.

Nothing should be selected when a file is open, but at the moment, lots of subobjects are.

Hmmm. The voice table for 1CourtesyAcc.ngl ends up with zero voices, obviously because
ConvertScoreHeader() sets every field  to 0 instead of copying them :-( . Fix that => Debug
Check Standard Things finds 96, 89, 103, 101 errors; Debug Display/Full finds 67, 62.

Lots of complaints about unconverted fields of MEASURE objs. Add code to ConvertMEASURE()
=> Check Standard Things finds 110, 100, 87; Debug Display/Full finds 65, 66, 54. Think
I'm now converting all fields of MEASUREs correctly.

Implement Convert1STAFF() & call it for each staff subobj => YUCK! Ah: I'm declaring

	SUPEROBJECT tmpSuperSubObj;

-- but we really want either SUPERSUBOBJECT or type-specific variables. But that's not the
whole problem! ??

The GetSubObjectPtr() macro in MemMacros.h should do it:

#define GetSubObjectPtr(link,type)	( ((type *)(*type/**/Heap)->block))+(link) )

...but calls to it don't even compile, and it looks like it's never been used! It also
looks over-complicated. For now at least, have a special-purpose macro for each subobject
heap, e.g.

	#define GetStaffPtr(link) ( ((STAFFheap)->block)+(link) )
	
and use it like this:

	pSSubObj = (unsigned char *)GetStaffPtr(aStaffL);

-------------------------------------------------------------------------------

9-16 Feb.

Using the above GetStaffPtr(), opening 1CourtesyAcc.ngl, STAFF subobjs are a disaster.

debug. ConvObjs1: 00 05 00 03   00 01 00 00   00 00 06 66   00 00 00 00
debug.          : 00 00 00 00   65 4c 02 73   00 00 00 00   00 03 00 00
debug.          : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 
debug. ConvertSTAFF: staffL=4 lStaff=0 rStaff=0 StaffSYS=3
debug. ConvObjs/STAFF: 00 a6 82 00   16 90 15 c0   00 3c 9e 60   16 92 27 40
debug.               : 00 3d 0b c0   16 92 2a 40   16 92 75 c0   00 3e e1 d0
debug.               : 16 92 05 00   16 92 07 f0   00 3d 74 00   00 39 32 30
debug.               : 00 a7 8e 00   00 3f 
debug. Convert1STAFF: aStaffL=1 staffn=0 staffLines=0 staffHeight=1638
debug. ConvObjs/STAFF: 16 90 15 c0   00 3c 9e 60   16 92 27 40   00 3d 0b c0
debug.               : 16 92 2a 40   16 92 75 c0   00 3e e1 d0   16 92 05 00
debug.               : 16 92 07 f0   00 3d 74 00   00 39 32 30   00 a7 8e 00
debug.               : 00 3f 7d 80   00 39 
debug. Convert1STAFF: aStaffL=2 staffn=0 staffLines=0 staffHeight=1638
debug. ConvObjs/STAFF: 96 0d 83 44   95 c6 48 fc   95 8f c9 a0   96 0d 83 44
debug.               : 95 ef 21 70   95 88 68 38   96 0d 83 44   95 ef 21 6c
debug.               : 95 89 e1 24   96 0d 83 44   95 c7 2e 9c   95 90 6b e4
debug.               : 96 0d 83 44   95 be 
debug. Convert1STAFF: aStaffL=2080 staffn=0 staffLines=0 staffHeight=1638

Of course the 3rd subobject is trash; there are really only 2, buit ignore that
for now.

The "ConvObjs/STAFF" dumps should be N105 ASTAFFs; do they look anything like 
it? Nope! ?? Ah, a more plausible GetStaffPtr:

	#define GetStaffPtr(link) ( *((STAFFheap)->block)+(link)*sizeof(ASTAFF) )

Results:

	debug. ConvObjs1: 00 05 00 03   00 01 00 00   00 00 06 66   00 00 00 00
	debug.          : 00 00 00 00   65 4c 02 73   00 00 00 00   00 03 00 00
	debug.          : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 
	debug. ConvertSTAFF: nEntries=2 staffL=4 lStaff=0 rStaff=0 StaffSYS=3
	debug. ->block=8383852 aStaffL=1 sizeof(ASTAFF)*aStaffL=54 pSSubObj=4043526
	debug. ConvObjs/STF 2: 00 02 01 40   02 40 00 00   1c c8 01 80   05 34 00 18
	debug.               : 00 00 00 00   00 00 00 6c   00 60 00 00   03 06 00 00
	debug.               : 00 00 00 00   02 87 00 00   01 ac 00 00   00 01 04 04
	debug.               : 1f 00 00 00   02 40 
	debug. Convert1STAFF: aStaffL=1 staffn=0 staffLines=0 staffHeight=1638
	debug. ->block=8383852 aStaffL=2 sizeof(ASTAFF)*aStaffL=108 pSSubObj=4043580
	debug. ConvObjs/STF 2: 08 20 00 00   1c c8 01 80   05 ff 00 18   00 00 00 00
	debug.               : 00 00 00 6c   00 60 00 00   0a 06 00 03   c5 a6 40 3b
	debug.               : 00 27 00 00   00 00 00 00   00 01 04 04   1f 00 00 04
	debug.               : 01 40 02 40   00 00 
	debug. Convert1STAFF: aStaffL=2 staffn=0 staffLines=0 staffHeight=1638
	debug. ->block=8383852 aStaffL=2080 sizeof(ASTAFF)*aStaffL=112320 pSSubObj=4155792
	(etc. etc.)

The 1st subobj starts very reasonably with "00 02 01 40" (next = 2, staffn = 1, then
flags) but after that, I'm not sure. The 2nd starts with 08 20 00 00 (next = 2080,
staffn = 0): nonsense.

!! Despite its name, GetObjectPtr looks like it should work with subobjects; MemMacros.h
even gives an example:

	astaff = GetObjectPtr(heap+STAFFtype,n,ASTAFF);
	
Use it => the 1st subobj starts 

	debug. ConvObjs1: 00 05 00 03   00 01 00 00   00 00 06 66   00 00 00 00
	debug.          : 00 00 00 00   65 4c 02 73   00 00 00 00   00 03 c1 d3
	debug.          : a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 
	debug. ConvertSTAFF: nEntries=2 staffL=4 lStaff=0 rStaff=0 StaffSYS=3
	debug. ->block=8383852 aStaffL=1 sizeof(ASTAFF)*aStaffL=54 pSSubObj=4028054
	debug. ConvObjs/STF 2: 00 02 01 40   02 40 00 00   1c c8 01 80   05 34 00 18
	debug.               : 00 00 00 00   00 00 00 6c   00 60 00 00   03 06 00 00
	debug.               : 00 00 00 00   02 87 00 00   01 ac 00 00   00 01 04 04
	debug.               : 1f 00 00 00   02 40 
	debug. Convert1STAFF: aStaffL=1 staffn=1 staffLines=5 staffHeight=384
	debug. ->block=8383852 aStaffL=2 sizeof(ASTAFF)*aStaffL=108 pSSubObj=4028108
	debug. ConvObjs/STF 2: 08 20 00 00   1c c8 01 80   05 ff 00 18   00 00 00 00
	debug.               : 00 00 00 6c   00 60 00 00   0a 06 00 03   c5 a6 40 3b
	debug.               : 00 27 00 00   00 00 00 00   00 01 04 04   1f 00 00 04
	debug.               : 01 40 02 40   00 00 
	debug. Convert1STAFF: aStaffL=2 staffn=0 staffLines=0 staffHeight=24
	debug. ->block=8383852 aStaffL=2080 sizeof(ASTAFF)*aStaffL=112320 pSSubObj=4140320
	(etc. etc.)

The 1st subobj is identical to the previous version; so is the 2nd! ??
The 1st subobj says:
	info. Convert1STAFF: st=1 top,left,ht,rt=d0,7368,384,384 lines=5 fontSz=0 SV TS=4,4/4

Need to see what the STAFF subobjs really look like! Via 5.8.10:

	debug. ConvertScore/STF: 00 02 01 40   02 40 00 00   1c c8 01 80   05 34 00 18
	debug.                 : 00 00 00 00   00 00 00 6c   00 60 00 00   03 06 00 00
	debug.                 : 00 00 00 00   02 87 00 00   01 ac 00 00   00 01 04 04
	debug.                 : 1f 00 
	debug. ConvertScore/STF: 00 00 02 40   08 20 00 00   1c c8 01 80   05 ff 00 18
	debug.                 : 00 00 00 00   00 00 00 6c   00 60 00 00   0a 06 00 03
	debug.                 : c5 a6 40 3b   00 27 00 00   00 00 00 00   00 01 04 04
	debug.                 : 1f 00 
	
Back to 5.9.1, showing only sizeof(ASTAFF_5) bytes for (all that are significant):

	debug. ConvObjs/STF 2: 00 02 01 40   02 40 00 00   1c c8 01 80   05 34 00 18
	debug.               : 00 00 00 00   00 00 00 6c   00 60 00 00   03 06 00 00
	debug.               : 00 00 00 00   02 87 00 00   01 ac 00 00   00 01 04 04
	debug.               : 1f 00 
	info. Convert1STAFF: st=1 top,left,ht,rt=d0,7368,384,384 lines=5 fontSz=0 SV TS=4,4/4
	debug. ->block=8383852 aStaffL=2 sizeof(ASTAFF)*aStaffL=108 pSSubObj=4048684
	debug. ConvObjs/STF 2: 08 20 00 00   1c c8 01 80   05 ff 00 18   00 00 00 00
	debug.               : 00 00 00 6c   00 60 00 00   0a 06 00 03   c5 a6 40 3b
	debug.               : 00 27 00 00   00 00 00 00   00 01 04 04   1f 00 00 04
	debug.               : 01 40 
	info. Convert1STAFF: st=0 top,left,ht,rt=d384,1535,24,24 lines=0 fontSz=0 .V TS=4,0/4

The first is identical. The 2nd is identical, except it starts 4 bytes too late! And
the N106 ASTAFF is 4 bytes longer than the N105. Reason: ReadSubHeaps() isn't moving
subobjects around after they've been read in to allow for changes in their sizes the way
ReadObjHeap() is!

Let's pull the code to move stuff around out of ReadObjHeap() => MoveObjSubobjs().
Run on 1CourtesyAcc.ngl => oops: it hangs in HeapFixN105Links()  :-( .

Using the old ReadObjHeap() (works):
	debug. HeapFixLinks1 L1: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	debug.                 : 00 00 00 00   1f 2f 02 30   00 00 c1 d3   02 b1 c1 d3
	debug.                 : a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 
	debug. HeapFixLinks1 L2: 00 03 00 01   00 00 00 00   00 00 04 67   00 00 00 00
	debug.                 : 00 00 00 00   46 69 00 65   00 00 00 00   00 00 64 65
	debug.                 : 46 6f 72 53   61 76 c1 d3   a1 b1 c1 d3   a1 b1 
	debug. HeapFixLinks1 L3: 00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	debug.                 : 00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 01
	debug.                 : 02 40 06 a8   0e 20 23 d0   65 73 57 41   a1 b1 
	debug. HeapFixLinks1 L4: 00 05 00 03   00 01 00 00   00 00 06 66   00 00 00 00
	debug.                 : 00 00 00 00   65 4c 02 73   00 00 00 00   00 04 c1 d3
	debug.                 : a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 

Using new ReadObjHeap() (hangs):
	debug. HeapFixLinks1 L1: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	debug.                 : 00 00 00 00   1f 2f 02 30   00 00 00 00   02 00 00 03
	debug.                 : 00 01 00 00   00 00 00 00   04 67 00 00   00 00 
	debug. HeapFixLinks1 L2: 00 00 00 00   64 65 46 6f   72 53 61 76   00 01 00 00
	debug.                 : 00 00 00 04   00 02 00 00   02 40 02 40   05 61 00 24
	debug.                 : 00 6b 00 e2   02 3d 46 6f   00 53 00 00   00 00 
	debug. HeapFixLinks1 L3: 23 d0 65 73   57 41 00 00   00 00 00 00   00 05 00 03
	debug.                 : 00 01 00 00   00 00 06 66   00 00 00 00   00 00 00 00
	debug.                 : 65 4c 02 73   00 00 00 00   00 04 00 00   00 00 
	debug. HeapFixLinks1 L4: 00 00 0c 61   00 00 00 00   00 00 00 00   5f 10 02 4e
	debug.                 : 00 00 00 00   00 00 00 00   00 07 00 05   00 01 00 60
	debug.                 : 00 00 08 73   00 3c 00 71   00 ca 00 82   2e 74 

The 1st 26 bytes are identical; after that, they're wildly different. %^$@#&*(@*#$

Let's look further back. Using the old ReadObjHeap() (works):

	info. nFObjs=17 sizeAllObjsFile=516 sizeAllObjsHeap=952  (ReadObjHeap)
	debug. ReadObjHeap: src=ace5ec dst=ace438 dst-src:-436 offset:0 type=0
	debug. ReadObjHeap2: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	debug.             : 00 00 00 00   1f 2f 02 30   00 00 c1 d3   02 b1 c1 d3
	debug.             : a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 
	debug. ReadObjHeap: src=ace604 dst=ace470 dst-src:-404 offset:24 type=4
	debug. ReadObjHeap2: 00 03 00 01   00 00 00 00   00 00 04 67   00 00 00 00
	debug.             : 00 00 00 00   46 69 00 65   00 00 00 00   00 00 64 65
	debug.             : 46 6f 72 53   61 76 c1 d3   a1 b1 c1 d3   a1 b1 
	debug. ReadObjHeap: src=ace62a dst=ace4a8 dst-src:-386 offset:62 type=5
	debug. ReadObjHeap2: 00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	debug.             : 00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 01
	debug.             : 02 40 06 a8   0e 20 23 d0   65 73 57 41   a1 b1 

Using new ReadObjHeap() (hangs):

	info. nFObjs=17 sizeAllObjsFile=516 sizeAllObjsHeap=952  (ReadObjHeap)
	debug. ReadObjHeap0: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	debug.             : 00 00 00 00   1f 2f 02 30   00 03 00 01   00 00 00 00
	debug.             : 00 00 04 67   00 00 00 00   00 00 00 00   46 69 00 65
	debug.             : 00 00 00 00   00 00 64 65   46 6f 72 53   61 76 00 04
	debug.             : 00 02 00 00   02 40 02 40   05 61 00 24   00 6b 00 e2
	debug.             : 02 3d 46 6f   00 53 00 00   00 00 00 03   00 01 02 40
	debug.             : 06 a8 0e 20   23 d0 65 73   57 41 
	debug. MoveObjSubobjs: src=accdec dst=accc38 dst-src:-436 offset:0 type=0
	debug. MoveObjSubobjs: type 0 obj: objLength=30 objLength_5=24 src=
	debug. MoveObjSubobjs2: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	debug.                : 00 00 00 00   1f 2f 02 30   00 00 c1 d3   02 b1 c1 d3
	debug.                : a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 
	debug. MoveObjSubobjs: src=acce04 dst=accc56 dst-src:-430 offset:24 type=4
	debug. MoveObjSubobjs: type 4 obj: objLength=44 objLength_5=38 src=
	debug. MoveObjSubobjs2: 00 03 00 01   00 00 00 00   00 00 04 67   00 00 00 00
	debug.                : 00 00 00 00   46 69 00 65   00 00 00 00   00 00 64 65
	debug.                : 46 6f 72 53   61 76 00 01   00 00 a1 b1   00 00 
	debug. MoveObjSubobjs: src=acce2a dst=accc82 dst-src:-424 offset:62 type=5
	debug. MoveObjSubobjs: type 5 obj: objLength=50 objLength_5=44 src=
	debug. MoveObjSubobjs2: 00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	debug.                : 00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 01
	debug.                : 02 40 06 a8   0e 20 23 d0   65 73 57 41   c1 d3 

Let's strip away irrelevent stuff! The NHexDump()s are just after BlockMove().
		
		BlockMove(src, dst, len);
	NHexDump(LOG_DEBUG, "(whatever)", (unsigned char *)dst, { 46* | len **} , 4, 16);

Using the old ReadObjHeap() (works) [NHexDump 46 bytes]:

	dst-src:-436 offset:0 type=0
	00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	00 00 00 00   1f 2f 02 30   00 00 c1 d3   02 b1 c1 d3
	a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 c1 d3   a1 b1 
	dst-src:-404 offset:24 type=4
	00 03 00 01   00 00 00 00   00 00 04 67   00 00 00 00
	00 00 00 00   46 69 00 65   00 00 00 00   00 00 64 65
	46 6f 72 53   61 76 c1 d3   a1 b1 c1 d3   a1 b1 
	dst-src:-386 offset:62 type=5
	00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 01
	02 40 06 a8   0e 20 23 d0   65 73 57 41   a1 b1 

Using new ReadObjHeap() (hangs) [NHexDump 46 bytes]:

	dst-src:-436 offset:0 type=0
	type 0 obj: objLength=30 objLength_5=24
	00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	00 00 00 00   1f 2f 02 30   
	dst-src:-430 offset:24 type=4
	type 4 obj: objLength=44 objLength_5=38
	00 03 00 01   00 00 00 00   00 00 04 67   00 00 00 00
	00 00 00 00   46 69 00 65   00 00 00 00   00 00 64 65
	46 6f 72 53   61 76 
	dst-src:-424 offset:62 type=5
	type 5 obj: objLength=50 objLength_5=44
	00 04 00 02   00 00 02 40   02 40 05 61   00 24 00 6b
	00 e2 02 3d   46 6f 00 53   00 00 00 00   00 03 00 01
	02 40 06 a8   0e 20 23 d0   65 73 57 41   

So just after the BlockMove(), the relevant bytes starting at dst are identical --
but dst-src is different! In fact, for the new ReadObjHeap(), it changes by just
6 each time, which is very suspicious! Ah: After the BlockMove, MoveObjSubobjs() is
doing

	dst += objLength[type];

The equivalent of this was

	dst += sizeof(SUPEROBJECT);

...which is _not_ the same. Change that => OK!

Modify MoveObjSubobjs() to handle subobject heaps as well as the object heap =>

	debug. ReadObjHeap0: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	...
	debug. MoveObjSubobjs: src=acd3ec dst=acd238 dst-src:-436 offset:0 curType=0
	debug. MoveObjSubobjs: type 0 obj: objLength=30 objLength_5=24 src=
	debug. MoveObjSubobjs2: 00 02 00 00   00 01 00 00   00 00 00 27   00 00 00 00
	debug.                : 00 00 00 00   1f 2f 02 30   00 03 00 01   00 00 00 00
	debug.                : 00 00 04 67   00 00 00 00   00 00 00 00   46 69 
	debug. MoveObjSubobjs: src=acd41a dst=acd270 dst-src:-426 offset:46 curType=70
	ERROR. Object type=70 is illegal. hType=24  (MoveObjSubobjs)
	ERROR. Can't open the file. errCode=998 errInfo=24  (OpenError)
	Warning. Error ID=998 (heap object type=24).
	Warning. * StopInform alertID=370
	debug. OpenFile L3: 00 04 00 00   00 00 00 00   00 00 00 00   00 00 00 00
	debug.            : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 00 00
	debug.            : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 

Everything up to the 2nd "MoveObjSubobjs:" line looks OK, but that line has dst-src:-426,
offset:46; they should be -404 and 24. Cause: for the object heap, MoveObjSubobjs() is
setting len = subObjLength_5[curType], but it should use objLength_5[curType]! Fix =>
1CourtesyAcc.ngl opens again & displays one staff (as it has for a few days); Debug Check
usual => finds ca. 100 (105, 94) errors; Debug Display finds 64, 58 -- but now we have
MoveObjSubobjs(), which can handle the subobject heaps too!

Add to ReadSubHeaps() ??

ReadSubHeaps() is a mess. Move the loop across heaps to ReadHeaps(); replace the body with
code modified from ReadObjHeap() => it gets sizeAllInFile=131326 -- nonsense -- but it's at
the same position, 2558, in the same file, 1CourtesyAcc.ngl! *@#$&*O@#QI$!@  How can this be?
But 2558 is the beginning of the header, no?

Ah. 131326 = 0x000200fe, the correct first four bytes of the first HEADER subobject! Explanation:
Objects in the object heap in a file are variable-length, so the file precedes the objects with
their total length; but subobjects in their heaps are fixed-length, and there's nothing between
the heap header and the subobjects. Debug Check usual => finds 51, 50, 55 errors; Debug Display finds
26, 26, 26. MUCH better! Yippee!

Commited & pushed.

-------------------------------------------------------------------------------

16 - 20 Feb.

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED STAFF L4.
	Feb 16 16:30:41: --- last message repeated 1 time ---
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD STAFF -1 OR 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L5.
	Feb 16 16:30:41: --- last message repeated 1 time ---
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED CLEF L6.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED CLEF L6.
	Warning. *DCheckNode: SUBOBJ IN TIMESIG L8 HAS BAD TIMESIG denom.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED TIMESIG L8.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED TIMESIG L8.
	Warning. DCheckNode: Object L9 HAS A ZERO-WIDTH/HEIGHT objRect.
	Warning. *DCheckMeasSubobjs: SUBOBJ IN MEASURE L9 HAS BAD clefType.
	Warning. *DCheckMeasSubobjs: SUBOBJ IN MEASURE L9 HAS BAD TIMESIG denominator -104.
	Warning. *DCheckMeasSubobjs: SUBOBJ ON STAFF 2 IN MEASURE L9 HAS BAD connStaff.
	Warning. *DCheckMeasSubobjs: SUBOBJ IN MEASURE L9 HAS BAD clefType.
	Warning. *DCheckMeasSubobjs: 1 SUBOBJS IN MEASURE L9 HAVE connAbove BUT NO CONNECTED STAFF.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED MEASURE L9.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED MEASURE L9.
	Warning. *DCheckNode: CAN'T FIND TUPLET FOR VOICE 95 IN SYNC L10.
	Warning. *DCheckNode: NOTE/REST IN SYNC L10 HAS BAD voice -4.
	Warning. DCheckSyncSlurs: NOTE slurredL IN VOICE -4 IN SYNC L10, MEASURE 6649, HAS NO SLUR.
	Warning. DCheckSyncSlurs: NOTE slurredR IN VOICE -4 IN SYNC L10, MEASURE 6649, HAS NO SLUR.
	Warning. DCheckSyncSlurs: NOTE tiedR IN VOICE -4 IN SYNC L10, MEASURE 6649, HAS NO TIE.
	Warning. DCheckNode: GARBAGE MODNR LINK 16203 IN VOICE -4 IN SYNC L10.
	Warning. DCheckNodeSel: SELECTED NOTE IN VOICE -4 IN UNSELECTED SYNC L10.
	Notice. * CautionAdvise alertID=550!
	Warning. *DCheckVoiceTable: NOTE IN SYNC L10 STAFF 1 IN ANOTHER PART'S VOICE, -4.
	Warning. *DCheckHeirarchy: CLEF L6 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckHeirarchy: KEYSIG L7 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckHeirarchy: TIMESIG L8 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckOttavas: OTTAVA'D NOTE IN SYNC L10 STAFF 1 WITHOUT OTTAVA.
	Warning. *DCheckContext: clefType FOR STAFF 1 IN MEASURE 6649 (L9) INCONSISTENCY.
	Warning. DCheckContext: TIMESIG FOR STAFF 1 IN MEASURE 6649 (L9) INCONSISTENCY.
	Warning. *DCheckContext: clefType FOR STAFF 2 IN MEASURE 6649 (L9) INCONSISTENCY.
	Warning. DCheckContext: dynamicType FOR STAFF 2 IN MEASURE 6649 (L9) INCONSISTENCY.
	Warning. DCheckPlayDurs: Note in Sync L10 voice -4 in measure 6649 playDur is longer than full dur. of 0
	Warning. DCheckCautionaryTS: Timesig at start of system in measure 0, staff 1 (L8) not anticipated.
	Warning. DCheckCautionaryTS: Timesig at start of system in measure 0, staff 2 (L8) not anticipated.
	info. Discont. sel, 0 objs in range, 0 sel, 11 total.  0 voices.
	info. --CHECK MASTER: DCheckNode: PAGE L13 sheetNum 12895 IS NEGATIVE OR SUSPICIOUSLY LARGE.
	Warning. •DCheckNode: SYSTEM L14 HAS INCONSISTENT LEFT SYSTEM LINK L41393.
	Warning. •DCheckNode: SYSTEM L14 HAS INCONSISTENT RIGHT SYSTEM LINK L213.
	Warning. *DCheckNode: SYSTEM L14 HAS GARBAGE systemRect.
	Warning. *DCheckNode: SYSTEM L14 RECT BELOW BOTTOM MARGIN (pt1767 vs. 774).
	Warning. •DCheck1NEntries: OBJ L15 HAS nEntries=0 BUT 2 SUBOBJECTS.
	Warning. •DCheckNode: Object L15 HAS BAD nEntries FOR ITS TYPE.
	Warning. *DCheckNode: SUBOBJ IN FIRST STAFF, L15 (staffn=1), staffHeight DISAGREES WITH srastral.
	Warning. *DCheckNode: SUBOBJ IN STAFF L15 staffLeft IS ILLEGAL.
	Warning. *DCheckNode: SUBOBJ IN STAFF L15 staffRight IS ILLEGAL.
	Warning. *DCheckNode: SUBOBJ IN FIRST STAFF, L15 (staffn=2), staffHeight DISAGREES WITH srastral.
	Warning. *DCheckNode: SUBOBJ IN STAFF L15 staffLeft IS ILLEGAL.
	Warning. *DCheckNode: SUBOBJ IN STAFF L15 staffRight IS ILLEGAL.
	Warning. •DCheck1NEntries: OBJ L16 HAS nEntries=116 BUT 2 SUBOBJECTS.
	Warning. •DCheckNode: Object L16 HAS BAD nEntries FOR ITS TYPE.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF -1 OR 88.
	info.  Done.    --CHECK CLIPBOARD:  Done. 55 ERROR(S). 

Convert1MEASURE() should get rid of the 4 erros in "6649 (L9)". Implement & call Convert1MEASURE
=> it does; down to 51 errors! Fix ASTAFF dynamType & AMEASURE selected => down to 45, 40,
41! Implement ConvertSYNC and (very incomplete) Convert1NOTER => down to 31, 36, 31, 34! -- e.g.:

	Notice. Opened file '1CourtesyAcc.ngl'.
	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD STAFF -1 OR 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L5.
	Feb 19 07:01:45: --- last message repeated 1 time ---
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED CLEF L6.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED CLEF L6.
	Warning. *DCheckNode: SUBOBJ IN TIMESIG L8 HAS BAD TIMESIG denom.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED TIMESIG L8.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED TIMESIG L8.
	Warning. DCheckNode: Object L9 HAS A ZERO-WIDTH/HEIGHT objRect.
	Warning. *DCheckMeasSubobjs: SUBOBJ ON STAFF 2 IN MEASURE L9 HAS BAD connStaff.
	Warning. *DCheckMeasSubobjs: 1 SUBOBJS IN MEASURE L9 HAVE connAbove BUT NO CONNECTED STAFF.
	Warning. DCheckSyncSlurs: NOTE tiedR IN VOICE 1 IN SYNC L10, MEASURE 6649, HAS NO TIE.
	Warning. *DCheckHeirarchy: KEYSIG L7 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckHeirarchy: TIMESIG L8 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. DCheckContext: TIMESIG FOR STAFF 1 IN MEASURE 6649 (L9) INCONSISTENCY.
	Warning. DCheckCautionaryTS: Timesig at start of system in measure 0, staff 1 (L8) not anticipated.
	Warning. DCheckCautionaryTS: Timesig at start of system in measure 0, staff 2 (L8) not anticipated.
	Warning. DCheckNoteNums: Note in Sync L10 in measure 6649, staff 1 notenum 63 and notation disagree.
	info. Discont. sel, 0 objs in range, 0 sel, 11 total.  1 voices.
	info. --CHECK MASTER: DCheckNode: PAGE L13 sheetNum 12895 IS NEGATIVE OR SUSPICIOUSLY LARGE.
	Warning. •DCheckNode: SYSTEM L14 HAS INCONSISTENT LEFT SYSTEM LINK L99.
	Warning. •DCheckNode: SYSTEM L14 HAS INCONSISTENT RIGHT SYSTEM LINK L213.
	Warning. *DCheckNode: SYSTEM L14 HAS GARBAGE systemRect.
	Warning. *DCheckNode: SYSTEM L14 RECT BELOW BOTTOM MARGIN (pt1767 vs. 774).
	Notice. * CautionAdvise alertID=550!
	Warning. •DCheck1NEntries: OBJ L15 HAS nEntries=0 BUT 2 SUBOBJECTS.
	Warning. •DCheckNode: Object L15 HAS BAD nEntries FOR ITS TYPE.
	Warning. *DCheckNode: SUBOBJ IN FIRST STAFF, L15 (staffn=1), staffHeight DISAGREES WITH srastral.
	Warning. *DCheckNode: SUBOBJ IN STAFF L15 staffLeft IS ILLEGAL.
	Warning. *DCheckNode: SUBOBJ IN FIRST STAFF, L15 (staffn=2), staffHeight DISAGREES WITH srastral.
	Warning. *DCheckNode: SUBOBJ IN STAFF L15 staffLeft IS ILLEGAL.
	Warning. •DCheck1NEntries: OBJ L16 HAS nEntries=116 BUT 2 SUBOBJECTS.
	Warning. •DCheckNode: Object L16 HAS BAD nEntries FOR ITS TYPE.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF -1 OR 88.
	info.  Done.    --CHECK CLIPBOARD:  Done. 34 ERROR(S). 

Most of the errors now, and all of the most serious ones, are from checking the Master Page:
no wonder, since I'm not converting anything in it! Add code to ConvertObjects() to convert
the Master Page object list exactly the same way as the main list => only 23 errors, and
none of "bullet" level! Voila:

	Notice. Opened file '1CourtesyAcc.ngl'.
	debug. DrawToolPalette: MemBitCount(palPortBits, 1000)=947 portRect tlbr=0,0,399,271
	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD STAFF -1 OR 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L5.
	Feb 19 16:14:51: --- last message repeated 1 time ---
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED CLEF L6.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED CLEF L6.
	Warning. *DCheckNode: SUBOBJ IN TIMESIG L8 HAS BAD TIMESIG denom.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED TIMESIG L8.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED TIMESIG L8.
	Warning. DCheckNode: Object L9 HAS A ZERO-WIDTH/HEIGHT objRect.
	Warning. *DCheckMeasSubobjs: SUBOBJ ON STAFF 2 IN MEASURE L9 HAS BAD connStaff.
	Warning. *DCheckMeasSubobjs: 1 SUBOBJS IN MEASURE L9 HAVE connAbove BUT NO CONNECTED STAFF.
	Warning. DCheckSyncSlurs: NOTE tiedR IN VOICE 1 IN SYNC L10, MEASURE 6649, HAS NO TIE.
	Warning. *DCheckHeirarchy: CLEF L6 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckHeirarchy: KEYSIG L7 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckHeirarchy: TIMESIG L8 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. DCheckContext: TIMESIG FOR STAFF 1 IN MEASURE 6649 (L9) INCONSISTENCY.
	Warning. DCheckCautionaryTS: Timesig at start of system in measure 0, staff 1 (L8) not anticipated.
	Warning. DCheckCautionaryTS: Timesig at start of system in measure 0, staff 2 (L8) not anticipated.
	info. Discont. sel, 0 objs in range, 0 sel, 11 total.  1 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF -1 OR 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L16.
	Feb 19 16:14:52: --- last message repeated 1 time ---
	Notice. * CautionAdvise alertID=550!
	info.  Done.    --CHECK CLIPBOARD:  Done. 23 ERROR(S). 
	 
-------------------------------------------------------------------------------

21 - 24 Feb.

Add more conversion stuff to Convert1MEASURE() =>

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD STAFF -1 OR 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L5.
	Feb 23 08:13:29: --- last message repeated 1 time ---
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED CLEF L6.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED CLEF L6.
	Warning. *DCheckNode: SUBOBJ IN TIMESIG L8 HAS BAD TIMESIG denom.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED TIMESIG L8.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED TIMESIG L8.
	Warning. *DCheckHeirarchy: CLEF L6 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckHeirarchy: KEYSIG L7 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckHeirarchy: TIMESIG L8 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. DCheckContext: TIMESIG FOR STAFF 1 IN MEASURE 1 (L9) INCONSISTENCY.
	Warning. DCheckCautionaryTS: Timesig at start of system in measure 0, staff 1 (L8) not anticipated.
	Warning. DCheckCautionaryTS: Timesig at start of system in measure 0, staff 2 (L8) not anticipated.
	info. Discont. sel, 0 objs in range, 0 sel, 11 total.  1 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF -1 OR 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L16.
	Feb 23 08:13:29: --- last message repeated 1 time ---
	info.  Done.    --CHECK CLIPBOARD:  Done. 19 ERROR(S). 

...but then:

	Warning. DCheckNode: Object L6: objrect.left relative to next is suspicious.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED CLEF L6.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED CLEF L6.
	Warning. DCheckNode: Object L7: objrect.left relative to previous is suspicious.
	Warning. DCheckNode: Object L8: objrect.left relative to next is suspicious.
	Warning. *DCheckNode: SUBOBJ IN TIMESIG L8 HAS BAD TIMESIG denom.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED TIMESIG L8.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED TIMESIG L8.
	Warning. DCheckNode: Object L9: objrect.left relative to previous is suspicious.
	Warning. DCheckVoiceTable: VOICE 2 HAS NO NOTES, RESTS, OR GRACE NOTES.
	Warning. *DCheckHeirarchy: CLEF L6 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckHeirarchy: KEYSIG L7 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckHeirarchy: TIMESIG L8 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. DCheckContext: TIMESIG FOR STAFF 1 IN MEASURE 1 (L9) INCONSISTENCY.
	Warning. DCheckCautionaryTS: Timesig at start of system in measure 0, staff 1 (L8) not anticipated.
	Warning. DCheckCautionaryTS: Timesig at start of system in measure 0, staff 2 (L8) not anticipated.
	Warning. DCheckMeasDur: Measure 1 (L9) duration of 480 is  different from time sig.
	Warning. DCheckMeasDur: Measure 1 (L9), staff 1 duration 480 is different from time sig.
	Notice. * CautionAdvise alertID=550!
	info. Discont. sel, 0 objs in range, 0 sel, 11 total.  1 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF -1 OR 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L16.
	Feb 23 13:49:08: --- last message repeated 1 time ---
	info.  Done.    --CHECK CLIPBOARD:  Done. 26 ERROR(S). 

Time signatures are a big problem! Implement ConvertTIMESIG() & Convert1TIMESIG() =>

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD STAFF -1 OR 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L5.
	Feb 23 14:25:48: --- last message repeated 1 time ---
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED CLEF L6.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED CLEF L6.
	info. Discont. sel, 0 objs in range, 0 sel, 11 total.  1 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF 0 OR 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD STAFF -1 OR 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L16.
	Feb 23 14:25:48: --- last message repeated 1 time ---
	info.  Done.    --CHECK CLIPBOARD:  Done. 10 ERROR(S). 
 
 Give separate error messages for  staffAbove  and  staffBelow  in CONNECTs =>
 
	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD staffAbove 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD staffBelow 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD staffAbove -1.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 HAS BAD staffBelow 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L5.
	Feb 25 14:36:07: --- last message repeated 1 time ---
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED CLEF L6.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED CLEF L6.
	info. Discont. sel, 0 objs in range, 0 sel, 11 total.  1 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD staffAbove 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD staffBelow 0.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD staffAbove -1.
	Warning. *DCheckNode: SUBOBJ IN CONNECT L16 HAS BAD staffBelow 88.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED CONNECT L16.
	Feb 25 14:36:07: --- last message repeated 1 time ---
	info.  Done.    --CHECK CLIPBOARD: *DCheckNode: SUBOBJ IN CONNECT L6 staffAbove>=staffBelow.
	info.  Done. 15 ERROR(S). 
 
-------------------------------------------------------------------------------

25 - 28 Feb.

Implement Convert1CONNECT() =>

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 staffAbove>=staffBelow.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 1 IN UNSELECTED CLEF L6.
	Warning. DCheckNodeSel: SELECTED ITEM ON STAFF 2 IN UNSELECTED CLEF L6.
	Warning. *DCheckHeirarchy: CLEF L6 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	Warning. *DCheckHeirarchy: KEYSIG L7 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	info. Discont. sel, 0 objs in range, 0 sel, 11 total.  1 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L16 staffAbove>=staffBelow.
	info.  Done.    --CHECK CLIPBOARD: *DCheckNode: SUBOBJ IN CONNECT L6 staffAbove>=staffBelow.
	info.  Done. 7 ERROR(S). 

Implement ConvertCLEF & Convert1CLEF =>

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 staffAbove>=staffBelow.
	Warning. *DCheckHeirarchy: KEYSIG L7 inMeasure FLAG DISAGREES WITH OBJECT ORDER.
	info. Discont. sel, 0 objs in range, 0 sel, 11 total.  1 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L16 staffAbove>=staffBelow.
	info.  Done.
	info. --CHECK CLIPBOARD: *DCheckNode: SUBOBJ IN CONNECT L6 staffAbove>=staffBelow.
	info.  Done. 4 ERROR(S). 

Implement ConvertKEYSIG() => only 3 errors!; all for the same problem, and the error
message is almost certainly wrong.

Now for a more difficult test file: AllObjTypes.ngl => opens & draws something
coherent; Check Standard gives 63 errors.

Implement ConvertBEAMSET() & Convert1BEAMSET() => down to 54 errors.

Status of converting object types (I think).
. = no work needed; - = not done; + = done. 

	obj
	 subobj
0	.. HEADER_5		Object has only OBJHEADER; subobjs are unchanged
	++ TAIL_5		Has no subobjs & no fields other than header
	++ SYNC_5
	-- RPTEND_5
	+. PAGE_5
5	+. SYSTEM_5
	++ STAFF_5
	++ MEASURE_5
	++ CLEF_5
	++ KEYSIG_5
10	++ TIMESIG_5
	++ BEAMSET_5
	++ CONNECT_5
	+- DYNAMIC_5
	.- (MODNR)		Has no objects, only subobjects
15	-- GRAPHIC_5
	-- OTTAVA_5
	-- SLUR_5
	-- TUPLET_5
	-- GRSYNC_5
20	-. TEMPO_5
	-. SPACER_5
	-. ENDING_5
	-- PSMEAS_5
	++ (OBJECT)

-------------------------------------------------------------------------------

29 Feb. - 2 Mar.

Implement Convert1Dynamic(). ((DYNAMIC status now: ++) Open AllObjTypes.ngl =>

	info.  24 L25 xd=-118 yd=0 DYNAMIC .V.V.. oRect.l=p482 type=4 1stS=L27 lastS=L0 n=1
	info.      st=1 xd=0 yd=520 endxd=0 S..
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED DYNAMIC L25.

...and Browser shows mouthWidth=0; can that be right?

Oops, I didn't implement Convert1Dynamic() correctly :-) . Fix it => no complaint
about SELECTED ITEM IN UNSELECTED DYNAMIC, but it still shows mouthWidth=0. And
that _can_ be right, because this dynamic isn't a hairpin!

	++ DYNAMIC_5

Debug Check Standard of AllObjTypes.ngl gives:

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 staffAbove>=staffBelow.
	Warning. •DCheckNode: TEMPO L8 HAS GARBAGE firstObjL.
	Warning. *DCheckNode: TEMPO L8 HAS BAD staffn.
	Warning. *DCheckNode: TEMPO L8 string IS BAD.
	Warning. *DCheckNode: TEMPO L8 metroStr IS BAD.
	Warning. DCheckNode: Illegal MODNR code 80 in voice 1 in Sync L11.
	Warning. *DCheckNode: SUBOBJ ON STAFF 1 IN PSEUDOMEAS L12 HAS connAbove.
	Warning. •DCheckNode: GRAPHIC L13 HAS GARBAGE firstObj.
	Warning. *DCheckNode: GRAPHIC L13 HAS BAD staffn 4.
	Warning. *DCheckNode: TUPLET L16 HAS BAD staffn.
	Warning. DCheckNode: Object L17 IN MEASURE 1 HAS A GARBAGE (UNSELECTABLE) objRect.
	Warning. *DCheckNode: SLUR L17 HAS BAD staffn.
	Warning. *DCheckNode: SLUR L17 HAS BAD voice.
	Warning. •DCheckNode: SLUR L17 HAS GARBAGE SYNC LINK.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED SLUR L17.
	Warning. DCheckNode: SYNC L18: TIMESTAMP 1440 REL TO NEXT IS WRONG.
	Warning. *DCheckNode: CAN'T FIND TUPLET FOR VOICE 1 IN SYNC L18.
	Warning. DCheckSyncSlurs: NOTE slurredR IN VOICE 1 IN SYNC L18, MEASURE 1, HAS NO SLUR.
	Warning. DCheckNode: SYNC L20: TIMESTAMP 1439 REL TO PREVIOUS IS WRONG.
	Warning. DCheckNode: SYNC L20: TIMESTAMP 1439 REL TO NEXT IS WRONG.
	Warning. *DCheckNode: CAN'T FIND TUPLET FOR VOICE 1 IN SYNC L20.
	Notice. * CautionAdvise alertID=550!
	Warning. DCheckNode: SYNC L21: TIMESTAMP 1438 REL TO PREVIOUS IS WRONG.
	Warning. DCheckNode: SYNC L21: TIMESTAMP 1438 REL TO NEXT IS WRONG.
	Warning. *DCheckNode: CAN'T FIND TUPLET FOR VOICE 1 IN SYNC L21.
	Warning. DCheckNode: SYNC L22: TIMESTAMP 1437 REL TO PREVIOUS IS WRONG.
	Warning. DCheckSyncSlurs: NOTE slurredL IN VOICE 1 IN SYNC L22, MEASURE 1, HAS NO SLUR.
	Warning. *DCheckNode: SUBOBJ IN ENDING L26 HAS BAD staffn.
	Warning. DCheckNode: Object L28 IN MEASURE 2 HAS A GARBAGE (UNSELECTABLE) objRect.
	Warning. *DCheckNode: OTTAVA L29 HAS BAD staffn.
	Warning. *DCheckNode: SUBOBJ IN ENDING L32 HAS BAD staffn.
	Warning. *DCheckMeasSubobjs: SUBOBJ IN MEASURE L35 HAS BAD nKSItems.
	Warning. *DCheckVoiceTable: NOTE IN GRSYNC L24 STAFF 1 IN ANOTHER PART'S VOICE, -18.
	Warning. •DCheckJDOrder: GRAPHIC ON STAFF 4 L13 firstObj=41393 NOT IN MAIN OBJECT LIST.
	Warning. *DCheckBeams: BEAMED NOTE IN GRSYNC 24 VOICE -18 WITHOUT BEAMSET.
	Warning. *DCheckOttavas: OTTAVA L29 HAS BAD STAFF NUMBER 0.
	Warning. *DCheckOttavas: OTTAVA'D NOTE IN SYNC L30 STAFF 1 WITHOUT OTTAVA.
	Warning. *DCheckSlurs: SLUR L17 HAS BAD voice.
	Warning. *DCheckSlurs: SLUR L17 IN MEASURE 1 AND ITS firstSyncL ARE IN WRONG ORDER.
	Warning. *DCheckSlurs: SLUR L17 IN MEASURE 1 AND ITS lastSyncL ARE IN WRONG ORDER.
	Warning. *DCheckTuplets: TUPLET L16 SYNC LINK INCONSISTENT.
	Feb 29 21:28:00: --- last message repeated 2 times ---
	Warning. *DCheckTuplets: TUPLET L16 HAS AN UNKNOWN OR ILLEGAL DURATION NOTE.
	Warning. *DCheckContext: nKSItems FOR STAFF 2 IN MEASURE 1 (L10) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 2 (L23) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 2 IN MEASURE 3 (L31) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 4 (L35) INCONSISTENCY.
	Warning. DCheckPlayDurs: Note in Sync L18 voice 1 in measure 1 playDur is longer than full dur. of 0
	Warning. DCheckPlayDurs: Note in Sync L20 voice 1 in measure 1 playDur is longer than full dur. of 0
	Warning. DCheckPlayDurs: Note in Sync L21 voice 1 in measure 1 playDur is longer than full dur. of 0
	Warning. DCheckNoteNums: Note in Sync L11 in measure 1, staff 1 notenum 73 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L20 in measure 1, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L30 in measure 2, staff 1 notenum 90 and notation disagree.
	info. Discont. sel, 0 objs in range, 0 sel, 36 total.  2 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L41 staffAbove>=staffBelow.
	info.  Done.
	info. --CHECK CLIPBOARD: *DCheckNode: SUBOBJ IN CONNECT L6 staffAbove>=staffBelow.
	info.  Done. 55 ERROR(S).
	
Implement ConvertTEMPO() => down to 49 errors! (TEMPO status now: +.)
Implement ConvertGRSYNC() => no change. (GRSYNC status now: +-)

-------------------------------------------------------------------------------

3 - 5 Mar.

What fields of GRNOTEs are unused? We don't seem to have a list! Besides those unused
for NOTEs (rspIgnore, playAsCue, micropitch, ??), I'm pretty sure these aren't:

	inTuplet
	merged
	playTimeDelta
	slurredL
	slurredR

So make a list... Done; it's ANOTEFieldUsage.xls. But I'm not too confident of its
accuracy!

Implement Convert1GRNOTE() => no change in no. of errors. (GRSYNC status now: ++)

Implement ConvertRPTEND() => 52, 51 errors, probably not a significant change.
Implement Convert1RPTEND() => 50 errors, probably not a significant change.
(RPTEND status now: ++)

Implement ConvertTUPLET() => down to 34 errors! (TUPLET status now: +.)

Debug Check Standard of AllObjTypes.ngl gives:

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 staffAbove>=staffBelow.
	Warning. DCheckNode: Illegal MODNR code 80 in voice 1 in Sync L11.
	Warning. *DCheckNode: SUBOBJ ON STAFF 1 IN PSEUDOMEAS L12 HAS connAbove.
	Warning. •DCheckNode: GRAPHIC L13 HAS GARBAGE firstObj.
	Warning. *DCheckNode: GRAPHIC L13 HAS BAD staffn 4.
	Warning. DCheckNode: Object L17 IN MEASURE 1 HAS A GARBAGE (UNSELECTABLE) objRect.
	Warning. *DCheckNode: SLUR L17 HAS BAD staffn.
	Warning. *DCheckNode: SLUR L17 HAS BAD voice.
	Warning. •DCheckNode: SLUR L17 HAS GARBAGE SYNC LINK.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED SLUR L17.
	Warning. DCheckSyncSlurs: NOTE slurredR IN VOICE 1 IN SYNC L18, MEASURE 1, HAS NO SLUR.
	Warning. DCheckSyncSlurs: NOTE slurredL IN VOICE 1 IN SYNC L22, MEASURE 1, HAS NO SLUR.
	Warning. *DCheckNode: SUBOBJ IN ENDING L26 HAS BAD staffn.
	Warning. *DCheckNode: OTTAVA L29 HAS BAD staffn.
	Warning. *DCheckNode: SUBOBJ IN ENDING L32 HAS BAD staffn.
	Warning. *DCheckMeasSubobjs: SUBOBJ IN MEASURE L35 HAS BAD nKSItems.
	Warning. *DCheckVoiceTable: NOTE IN GRSYNC L24 STAFF 1 IN ANOTHER PART'S VOICE, 0.
	Warning. •DCheckJDOrder: GRAPHIC ON STAFF 4 L13 firstObj=0 NOT IN MAIN OBJECT LIST.
	Warning. *DCheckOttavas: OTTAVA L29 HAS BAD STAFF NUMBER 0.
	Warning. *DCheckOttavas: OTTAVA'D NOTE IN SYNC L30 STAFF 1 WITHOUT OTTAVA.
	Warning. *DCheckSlurs: SLUR L17 HAS BAD voice.
	Warning. *DCheckSlurs: SLUR L17 IN MEASURE 1 AND ITS firstSyncL ARE IN WRONG ORDER.
	Warning. *DCheckSlurs: SLUR L17 IN MEASURE 1 AND ITS lastSyncL ARE IN WRONG ORDER.
	Notice. * CautionAdvise alertID=550!
	Warning. *DCheckContext: nKSItems FOR STAFF 2 IN MEASURE 1 (L10) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 2 (L23) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 2 IN MEASURE 3 (L31) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 4 (L35) INCONSISTENCY.
	Warning. DCheckNoteNums: Note in Sync L11 in measure 1, staff 1 notenum 73 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L20 in measure 1, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L30 in measure 2, staff 1 notenum 90 and notation disagree.
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 2 notenum 50 and notation disagree: wrong accidental?
	info. Discont. sel, 0 objs in range, 0 sel, 36 total.  2 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L41 staffAbove>=staffBelow.
	info.  Done.
	info. --CHECK CLIPBOARD: *DCheckNode: SUBOBJ IN CONNECT L6 staffAbove>=staffBelow.
	info.  Done. 34 ERROR(S). 
 
-------------------------------------------------------------------------------

7 - 10 Mar.

The tempo mark in AllObjTypes.ngl gets a duration unit (subType) 0, which is "unknown
duration", but Browser doesn't know that... Fixed. Also, ConvertTEMPO() isn't
converting the subType... Fixed.

The 1st note on staff 1 of AllObjTypes.ngl isn't drawn because its VISIBLE flag isn't
set... Fixed.

Implement ConvertGRAPHIC() => down to 29 errors! (GRAPHIC status now: +-) (But it looks
like AGRAPHICs need no conversion! So let's say tentatively +. )

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 staffAbove>=staffBelow.
	Warning. DCheckNode: Illegal MODNR code 80 in voice 1 in Sync L11.
	Warning. *DCheckNode: SUBOBJ ON STAFF 1 IN PSEUDOMEAS L12 HAS connAbove.
	Warning. DCheckNode: Object L17 IN MEASURE 1 HAS A GARBAGE (UNSELECTABLE) objRect.
	Warning. *DCheckNode: SLUR L17 HAS BAD staffn.
	Warning. *DCheckNode: NON-CROSS-SYS SLUR L17 firstSync OR lastSync ISN'T A SYNC.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED SLUR L17.
	Warning. DCheckSyncSlurs: NOTE slurredR IN VOICE 1 IN SYNC L18, MEASURE 1, HAS NO SLUR.
	Warning. DCheckSyncSlurs: NOTE slurredL IN VOICE 1 IN SYNC L22, MEASURE 1, HAS NO SLUR.
	Warning. *DCheckNode: SUBOBJ IN ENDING L26 HAS BAD staffn.
	Warning. *DCheckNode: OTTAVA L29 HAS BAD staffn.
	Warning. *DCheckNode: SUBOBJ IN ENDING L32 HAS BAD staffn.
	Warning. *DCheckMeasSubobjs: SUBOBJ IN MEASURE L35 HAS BAD nKSItems.
	Warning. *DCheckOttavas: OTTAVA L29 HAS BAD STAFF NUMBER 0.
	Warning. *DCheckOttavas: OTTAVA'D NOTE IN SYNC L30 STAFF 1 WITHOUT OTTAVA.
	Warning. *DCheckSlurs: NEXT SYNC AFTER SLUR/TIE L17 HAS NO NOTES IN VOICE 0.
	Warning. *DCheckSlurs: SLUR L17 IN MEASURE 1 AND ITS firstSyncL ARE IN WRONG ORDER.
	Warning. *DCheckSlurs: SLUR L17 IN MEASURE 1 AND ITS lastSyncL ARE IN WRONG ORDER.
	Warning. *DCheckContext: nKSItems FOR STAFF 2 IN MEASURE 1 (L10) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 2 (L23) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 2 IN MEASURE 3 (L31) INCONSISTENCY.
	Notice. * CautionAdvise alertID=550!
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 4 (L35) INCONSISTENCY.
	Warning. DCheckNoteNums: Note in Sync L11 in measure 1, staff 1 notenum 73 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L20 in measure 1, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L30 in measure 2, staff 1 notenum 90 and notation disagree.
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 2 notenum 50 and notation disagree: wrong accidental?
	info. Strict contin. sel, 1 objs in range, 1 sel, 36 total.  2 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L41 staffAbove>=staffBelow.
	info.  Done.
	info. --CHECK CLIPBOARD: *DCheckNode: SUBOBJ IN CONNECT L6 staffAbove>=staffBelow.
	info.  Done. 29 ERROR(S).
	
-------------------------------------------------------------------------------

11 - 15 March

SPACERs definitely need work; do 'em next.

Status of converting object types (I think).
. = no work needed; - = not done; + = done. 

	obj
	 subobj
0	.. HEADER_5		Object has only OBJHEADER; subobjs are unchanged
	++ TAIL_5		Has no subobjs & no fields other than header
	++ SYNC_5
	++ RPTEND_5
	+. PAGE_5
5	+. SYSTEM_5
	++ STAFF_5
	++ MEASURE_5
	++ CLEF_5
	++ KEYSIG_5
10	++ TIMESIG_5
	++ BEAMSET_5
	++ CONNECT_5
	++ DYNAMIC_5
	.- (MODNR)		Has no objects, only subobjects
15	+. GRAPHIC_5
	-. OTTAVA_5		Subobject has two LINKs & that's all
	-- SLUR_5
	+. TUPLET_5		Subobject has two LINKs & that's all
	++ GRSYNC_5
20	+. TEMPO_5
	-. SPACER_5
	-. ENDING_5
	-- PSMEAS_5
	++ (OBJECT)

Implement ConvertSPACER() => still 30 errors, but the SPACER works now.
(SPACER status now: +. )

Implement ConvertOTTAVA() => only 27 errors, but the OTTAVA still isn't drawn! Why? It
looks OK in Browser, & Debug has no complaints. ??

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 staffAbove>=staffBelow.
	Warning. DCheckNode: Illegal MODNR code 80 in voice 1 in Sync L11.
	Warning. *DCheckNode: SUBOBJ ON STAFF 1 IN PSEUDOMEAS L12 HAS connAbove.
	Warning. DCheckNode: Object L17 IN MEASURE 1 HAS A GARBAGE (UNSELECTABLE) objRect.
	Warning. *DCheckNode: SLUR L17 HAS BAD staffn.
	Warning. *DCheckNode: NON-CROSS-SYS SLUR L17 firstSync OR lastSync ISN'T A SYNC.
	Warning. DCheckNodeSel: SELECTED ITEM IN UNSELECTED SLUR L17.
	Warning. DCheckSyncSlurs: NOTE slurredR IN VOICE 1 IN SYNC L18, MEASURE 1, HAS NO SLUR.
	Warning. DCheckSyncSlurs: NOTE slurredL IN VOICE 1 IN SYNC L22, MEASURE 1, HAS NO SLUR.
	Warning. *DCheckNode: ENDING L26 staffn 0 IS BAD.
	Warning. *DCheckNode: ENDING L32 staffn 17 IS BAD.
	Warning. *DCheckMeasSubobjs: SUBOBJ IN MEASURE L35 HAS BAD nKSItems.
	Warning. *DCheckSlurs: NEXT SYNC AFTER SLUR/TIE L17 HAS NO NOTES IN VOICE 0.
	Warning. *DCheckSlurs: SLUR L17 IN MEASURE 1 AND ITS firstSyncL ARE IN WRONG ORDER.
	Warning. *DCheckSlurs: SLUR L17 IN MEASURE 1 AND ITS lastSyncL ARE IN WRONG ORDER.
	Warning. *DCheckContext: nKSItems FOR STAFF 2 IN MEASURE 1 (L10) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 2 (L23) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 2 IN MEASURE 3 (L31) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 4 (L35) INCONSISTENCY.
	Warning. DCheckNoteNums: Note in Sync L11 in measure 1, staff 1 notenum 73 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L20 in measure 1, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L30 in measure 2, staff 1 notenum 90 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 2 notenum 50 and notation disagree: wrong accidental?
	Notice. * CautionAdvise alertID=550!
	info. Discont. sel, 0 objs in range, 0 sel, 36 total.  2 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L41 staffAbove>=staffBelow.
	info.  Done.
	info. --CHECK CLIPBOARD: *DCheckNode: SUBOBJ IN CONNECT L6 staffAbove>=staffBelow.
	info.  Done. 26 ERROR(S).

Implement ConvertSLUR() => only 17-18 errors! And the slur is drawn, though it's the wrong
dashedness and shape. (SLUR status now: +- )

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 staffAbove>=staffBelow.
	Warning. DCheckNode: Illegal MODNR code 80 in voice 1 in Sync L11.
	Warning. *DCheckNode: SUBOBJ ON STAFF 1 IN PSEUDOMEAS L12 HAS connAbove.
	Warning. *DCheckNode: ENDING L26 staffn 0 IS BAD.
	Warning. *DCheckNode: ENDING L32 staffn 17 IS BAD.
	Warning. *DCheckMeasSubobjs: SUBOBJ IN MEASURE L35 HAS BAD nKSItems.
	Warning. *DCheckContext: nKSItems FOR STAFF 2 IN MEASURE 1 (L10) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 2 (L23) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 2 IN MEASURE 3 (L31) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 4 (L35) INCONSISTENCY.
	Warning. DCheckNoteNums: Note in Sync L11 in measure 1, staff 1 notenum 73 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L20 in measure 1, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L30 in measure 2, staff 1 notenum 90 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 2 notenum 50 and notation disagree: wrong accidental?
	info. Strict contin. sel, 1 objs in range, 1 sel, 36 total.  2 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L41 staffAbove>=staffBelow.
	info.  Done.
	info. --CHECK CLIPBOARD: *DCheckNode: SUBOBJ IN CONNECT L6 staffAbove>=staffBelow.
	info.  Done. 17 ERROR(S). 

-------------------------------------------------------------------------------

16 - 19 March

Implement Convert1SLUR() => still 17 errors, but the slur is now drawn correctly.
(SLUR status now: ++ )

Looks like the AMEASURE nKSItems is garbage. Ah: Convert1MEASURE isn't copying the
WHOLE_KSINFO... Fixed.

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN CONNECT L5 staffAbove>=staffBelow.
	Warning. DCheckNode: Illegal MODNR code 80 in voice 1 in Sync L11.
	Warning. *DCheckNode: SUBOBJ ON STAFF 1 IN PSEUDOMEAS L12 HAS connAbove.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 1 (L10) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 2 (L23) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 3 (L31) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 1 IN MEASURE 4 (L35) INCONSISTENCY.
	Warning. DCheckNoteNums: Note in Sync L11 in measure 1, staff 1 notenum 73 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L20 in measure 1, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L30 in measure 2, staff 1 notenum 90 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 1 notenum 66 and notation disagree: wrong accidental?
	info. Discont. sel, 0 objs in range, 0 sel, 36 total.  2 voices.
	info. --CHECK MASTER: *DCheckNode: SUBOBJ IN CONNECT L41 staffAbove>=staffBelow.
	info.  Done.
	info. --CHECK CLIPBOARD: *DCheckNode: SUBOBJ IN CONNECT L6 staffAbove>=staffBelow.
	info.  Done. 13 ERROR(S).
	 
Implement ConvertENDING() => only 13 errors, and none for ENDINGs!
(ENDING status now: +. )

Implement ConvertPSMEAS() => still 13 errors. (PSMEAS status now: +- )

Hmmm. DCheckNode() has been giving incorrect complaints "SUBOBJ IN CONNECT L%u staffAbove>=staffBelow."
for awhile, Why? I see... Fixed. Now only 10 errors for AllObjTypes.ngl (and none for
1CourtesyAcc.ngl).

Implement Convert1PSMEAS() => only 9 errors; the PSMEAS complaint went away! (PSMEAS
status now: ++ )

-------------------------------------------------------------------------------

21 - 25 March

Status of converting object types (I think).
. = no work needed; - = not done; ? = not done but may not need work; + = done. 

	obj
	 subobj
0	.. HEADER_5		Object has only OBJHEADER; subobjs are unchanged
	++ TAIL_5		Has no subobjs & no fields other than header
	++ SYNC_5
	++ RPTEND_5
	+. PAGE_5
5	+. SYSTEM_5
	++ STAFF_5
	++ MEASURE_5
	++ CLEF_5
	++ KEYSIG_5		But we end up with nKSItems=0 on staff 1! ??
10	++ TIMESIG_5
	++ BEAMSET_5
	++ CONNECT_5
	++ DYNAMIC_5
	.- (MODNR)		Has no objects, only subobjects
15	+? GRAPHIC_5	Subobject has only LINK & STRINGOFFSET. Is it really OK as is?
	±? OTTAVA_5		Subobject has two LINKs & that's all. But isn't drawn! ??
	++ SLUR_5
	+? TUPLET_5		Subobject has two LINKs & that's all. Is it OK as is?
	++ GRSYNC_5
20	+. TEMPO_5
	+. SPACER_5
	+. ENDING_5
	++ PSMEAS_5
	++ (OBJECT)

Now, almost all of the remaining error messages for AllObjTypes.ngl obviously result
from the zero-sharp/flat key sig. on staff 1. Is this a bug in Convert1KEYSIG()? Ah,
Convert1KEYSIG is doing nothing with several fields, including subType and WHOLE_KSINFO!
Fix that => results are different, alright; now both staves get nonsensical keysigs :-( .
In fact, the AKEYSIG_5 looks bad before Convert1KEYSIG massages it. I'll bet this is
related to the strange comment about WHOLE_KSINFO in NBasicTypes.h ??

	typedef struct						/* Key signature item: */
	{
		char letcode;					/* LG: Code for letter name: A=5,B=4,C=3,D=2,E=1,F=0,G=6  */
		Boolean sharp;					/* LG: Is it a sharp? (False=flat) */
	} KSITEM;

	#define MAX_KSITEMS 7		/* Maximum no. of items in key signature */

	#define WHOLE_KSINFO					/* Complete key sig. w/o context. */			\
		KSITEM		KSItem[MAX_KSITEMS];	/* The sharps and flats */						\
		SignedByte	nKSItems;				/* No. of sharps and flats in key sig. */
		
	typedef struct						/* Complete key sig. */
	{
		WHOLE_KSINFO
	} KSINFO, *PKSINFO;

Console output for AllObjTypes.ngl:

	debug. ConvertKEYSIG: keySigL=L7 inMeasure=0
	debug. Convert1KEYSIG<:  lets=0:# 1:b
	debug. Convert1KEYSIG: 00 02 01 00   40 00 00 00   01 00 07 00   00 00 02 87
	debug.               : 00 00 01 ac   00 00 02 04   00 00 02 87   00 00 00 00
	debug.               : 02 0a 40 00   
	debug. Convert1KEYSIG: aKeySigL=1 small=0 xd=0 lets=1:b 7:b
	debug. Convert1KEYSIG<:  (0 sharps/flats)
	debug. Convert1KEYSIG: 00 00 02 00   40 00 00 00   01 00 07 bb   00 00 00 02
	debug.               : 7f ff ff ff   16 8a 02 60   ff ff 16 8a   02 60 00 00
	debug.               : 02 0a 40 00   
	debug. Convert1KEYSIG: aKeySigL=2 small=0 xd=0 lets=1:b 7:#

Debug/Full sez:

	info.  6 L7 xd=360 yd=0 KEYSIG .VSV.. oRect.l=p159 . n=2
	info.      st=1 xd=0 .V. nKSItems=2 lets=1:b 7:b
	info.      st=2 xd=0 .V. nKSItems=2 lets=1:b 7:#
	Warning. *DCheckNode: ILLEGAL LETTER CODES FOR SUBOBJ IN KEYSIG L7 staffn 1 ACCIDENTAL NO(S).:  1.
	Warning. *DCheckNode: ILLEGAL LETTER CODES FOR SUBOBJ IN KEYSIG L7 staffn 2 ACCIDENTAL NO(S).:  1.


00 02 01 00   40			next=02 staffn=1 subType=0 .V. (SUBOBJHEADER_5): OK
00 00 00					1 byte of bitfields (nonstandard, etc.); xd=0: OK
01 00 07 00					apparently interpreted as KSItem[0 & 1]: 1:b 7:b . ?!?
00 00 02 87					...so interpreted as KSItem[2 & 3]
00 00 01 ac   00 00 02 04	...and KSItem[4, 5, & 6] and nKSItems=2. 

Ah-hah! Neither KeysigCopy nor KEYSIG_COPY knows about AKEYSIG's N105 format!! Duh. Need
KeySigN105Copy(PAKEYSIG_5 pAKeySig, PKSINFO pKSDst) => done. But it doesn't change anything!

Can running Ngale 5.8.x help? With 5.8.9, Debug/Full sez:

	info.  6 L 7 xd=360 yd=0 KEYSIG .VSV.. oRect.l=p159 . n=2
	info.      st=1 xd=0 .V. nKSItems=2 lets=0:# 3:#
	info.      st=2 xd=0 .V. nKSItems=2 lets=0:# 3:#

..exactly as expected, and not helpful.

Create KeySigs.ngl, with keysigs of 1 sharp, 3 flags, & 5 sharps. From 5.8.9:

	info.  6 L 7 xd=288 yd=0 KEYSIG .VSV.. oRect.l=p151 . n=2
	info.      st=1 xd=0 .V. nKSItems=1 lets=0:#
	info.      st=2 xd=0 .V. nKSItems=1 lets=0:#
	
	info.  10 L11 xd=192 yd=0 KEYSIG .V.V.. oRect.l=p196 M n=2
	info.      st=1 xd=0 .V. nKSItems=3 lets=4:b 1:b 5:b
	info.      st=2 xd=0 .V. nKSItems=3 lets=4:b 1:b 5:b
	
	info.  12 L13 xd=696 yd=0 KEYSIG .V.V.. oRect.l=p244 M n=2
	info.      st=1 xd=0 .V. nKSItems=5 lets=0:# 3:# 6:# 2:# 5:#
	info.      st=2 xd=0 .V. nKSItems=5 lets=0:# 3:# 6:# 2:# 5:#
	
But need to see the entire AKEYSIG! Here 'tis for AllObjTypes.ngl, from 5.8.10:

	info.  6 L 7 xd=360 yd=0 KEYSIG .VSV.. oRect.l=p159 . n=2
	info.      st=1 xd=0 .V. nKSItems=2 lets=0:# 3:#
	debug. DisplayNode/aKeySig->KSItem[]: 01 00 07 00   00 00 02 87   00 00 01 ac   00 00 02 04
	debug.                              : 00 00 02 00   40 00 00 00   
	info.      st=2 xd=0 .V. nKSItems=2 lets=0:# 3:#
	debug. DisplayNode/aKeySig->KSItem[]: 01 00 07 bb   00 00 00 02   7f ff ff ff   16 8a 02 60
	debug.                              : 00 04 49 44   20 32 30 5d   

Looks like the "01 00 07 00" is the first bytes of the AKEYSIG, not of the WHOLE_KSINFO!

Create KeySigs.ngl, with keysigs of 1 sharp, 3 flags, & 5 sharps. From 5.8.10:
	info.  6 L 7 xd=288 yd=0 KEYSIG .VSV.. oRect.l=p151 . n=2
	info.      st=1 xd=0 .V. nKSItems=1 lets=0:#
	debug. DisplayNode/aKeySig->KSItem[]: 01 00 00 00   00 00 02 78   00 00 01 bb   00 00 01 02
	debug.                              : 00 00 02 00   40 00 00 00   
	info.      st=2 xd=0 .V. nKSItems=1 lets=0:#
	debug. DisplayNode/aKeySig->KSItem[]: 01 00 00 00   00 00 00 02   c0 00 00 03   c0 00 01 03
	debug.                              : 00 04 01 00   40 00 00 00   
	
	info.  10 L11 xd=192 yd=0 KEYSIG .V.V.. oRect.l=p196 M n=2
	info.      st=1 xd=0 .V. nKSItems=3 lets=4:b 1:b 5:b
	debug. DisplayNode/aKeySig->KSItem[]: 08 00 02 01   0a 83 ed 90   00 00 00 01   16 83 03 20
	debug.                              : 00 00 02 00   40 00 00 00   
	info.      st=2 xd=0 .V. nKSItems=3 lets=4:b 1:b 5:b
	debug. DisplayNode/aKeySig->KSItem[]: 08 00 02 00   0a 00 00 06   80 00 00 00   00 00 03 02
	debug.                              : 00 06 01 00   40 00 00 00   
	
	info.  12 L13 xd=696 yd=0 KEYSIG .V.V.. oRect.l=p244 M n=2
	info.      st=1 xd=0 .V. nKSItems=5 lets=0:# 3:# 6:# 2:# 5:#
	debug. DisplayNode/aKeySig->KSItem[]: 01 ff 07 00   0d ff 05 00   0b 00 04 38   00 01 05 07
	debug.                              : 00 00 02 00   40 00 00 00   
	info.      st=2 xd=0 .V. nKSItems=5 lets=0:# 3:# 6:# 2:# 5:#
	debug. DisplayNode/aKeySig->KSItem[]: 01 00 07 00   0d 02 05 01   0b 00 00 00   00 00 05 00
	debug.                              : 00 00 20 5b   46 61 63 69   

Ah-hah! The declaration of 	AKEYSIG_5  includes a  WHOLE_KSINFO; but WHOLE_KSINFO includes
an array of KSITEMs, and an N105 KSITEM is not the same as a N106 one. Fix that => only 5
errors in AllObjTypes.ngl!

	Warning. DCheckNode: Illegal MODNR code 80 in voice 1 in Sync L11.
	Warning. DCheckNoteNums: Note in Sync L11 in measure 1, staff 1 notenum 73 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L20 in measure 1, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L30 in measure 2, staff 1 notenum 90 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 1 notenum 66 and notation disagree: wrong accidental?
	info. Discont. sel, 0 objs in range, 0 sel, 36 total.  2 voices.

-------------------------------------------------------------------------------

27-30 March

The only thing we're not even trying to convert yet is MODNRs, which have no objects,
just subobjects attached to notes/rests (ANOTEs). So conversion code can't be invoked by
encountering a MODNR object; instead, add it to Convert1NOTER => Done, but: in AllObjTypes.ngl,
it says (for the only noter modifier)

	debug. Convert1MODNR: aModNRL=1 code=3 x=1 yqpit=-14

Heap Browser agrees on the values of coe, xstd, & ystdpit. 
The correct values are code, 12; xstd, 16; yqpit, -8. The modifier is displayed far to
the left of the note, and Modifier Info says x = -15, but Heap Browser shows it as being
1. Open ExuberentT+N.ngl => all modifiers display as "3" or "4" (codes are 3 & 4, natch), and
way too far to left. ??


	debug. ConvertSYNC: syncL=L11 timeStamp=0
	debug. Convert1NOTER:MODNR: 00 00 50 0c   00 f8 
	debug. Convert1MODNR: aModNRL=1 code=3 xstd=1 ystdpit=-14
	debug. Convert1NOTER: aNoteRL=1 voice=1 vis=1 yqpit=-14 xd=0 yd=120 playDur=912

The hex dump in "Convert1NOTER:MODNR" is correct. Ah, the BlockMove in Convert1MODNR
is wrong! Fix that => all OK!  (MODNR status now: ++ )

Status of converting object types (I think).
. = no work needed; - = not done; ? = not done but may not need work; + = done. 

	obj
	 subobj
0	.. HEADER_5		Object has only OBJHEADER; subobjs are unchanged
	+. TAIL_5		Has no subobjs & no fields other than header
	++ SYNC_5
	++ RPTEND_5
	+. PAGE_5
5	+. SYSTEM_5
	++ STAFF_5
	++ MEASURE_5
	++ CLEF_5
	++ KEYSIG_5		But we end up with nKSItems=0 on staff 1! ??
10	++ TIMESIG_5
	++ BEAMSET_5
	++ CONNECT_5
	++ DYNAMIC_5
	.+ (MODNR)		Has no objects, only subobjects
15	+? GRAPHIC_5	Subobject has only LINK & STRINGOFFSET. Is it really OK as is?
	±? OTTAVA_5		Subobject has two LINKs & that's all. But isn't drawn! ??
	++ SLUR_5
	+? TUPLET_5		Subobject has two LINKs & that's all. Is it OK as is?
	++ GRSYNC_5
20	+. TEMPO_5
	+. SPACER_5
	+. ENDING_5
	++ PSMEAS_5
	++ (OBJECT)

What about the question marks in the status list? TBDone.

-------------------------------------------------------------------------------

31 March - 3 April

First, I'm still getting lots of complaints like these, for AllObjTypes.ngl:

	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. DCheckNoteNums: Note in Sync L11 in measure 1, staff 1 notenum 73 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L20 in measure 1, staff 1 notenum 66 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L30 in measure 2, staff 1 notenum 90 and notation disagree: wrong accidental?
	Warning. DCheckNoteNums: Note in Sync L33 in measure 3, staff 1 notenum 66 and notation disagree: wrong accidental?

Staff 1 has two sharps, and the above notes are all the C#'s and F#'s on that staff. Well, the
MEASUREs after the 1st say the keysig is no sharps/flats -- a weird bug -- but that doesn't explain
the complaint about the note in L11!

From Browser, for KEYSIG L7 (subobjs 1 & 2), then MEASURE L10 (subobj 1 twice):

	debug. BrowseKeySig: 00 01 03 01   01 ac 00 00   02 04 00 00   02 87 02 00
	debug.             : 00 00 02 00   00 01 00 00   00 00 00 bb   00 00 
	debug. BrowseKeySig: 00 01 03 01   ff ff 16 8a   02 60 ff ff   16 8a 02 60
	debug.             : 00 04 00 00   00 00 c0 00   00 03 c0 0d   ec 37 
	debug. BrowseMeasure1: link=1 nKSItems=2
	debug. BrowseMeasure1: 01 00 07 00   00 00 02 01   05 04 00 00   00 00 02 01
	debug.               : 05 04 00 00   00 00 02 01   00 00 00 01   01 00 
	debug. BrowseMeasure2: link=1 nKSItems=2
	debug. BrowseMeasure2: 01 00 07 00   00 00 02 01   05 04 00 00   00 00 02 01
	debug.               : 05 04 00 00   00 00 02 01   00 00 00 01   01 00 
 
The 1st row of each BrowseKeySig dump is a complete WHOLE_KSINFO:
 		KSITEM		KSItem[7];	/* The sharps and flats */
		SignedByte	nKSItems;	/* No. of sharps and flats */
		
KSITEM is:
		char letcode;					/* LG: Code for letter name: A=5,B=4,C=3,D=2,E=1,F=0,G=6  */
		Boolean sharp;					/* LG: Is it a sharp? (False=flat) */

KSItem[0] = 00 01, KSItem[1] = 03 01 (C#, F#); after 10 garbage bytes, nKSItems = 2.
Nothing in the BrowseMeasure dumps looks anything like that! But for each MEASURE subobj,
Browser shows nKSItems=2, lets=1:b 7:b ..and that's what "01 00 07 00" means! Try a new
score w/ 4 flats => Browser displays that correctly too. So Browser is OK.

Add to ConvertObjects()

	DKeySigPrintf((PKSINFO)(MeasKSITEM(1)));

before converting each object. Result for the 1st few objects:

	debug. ConvObjs1/AMEASURE 1 (0 sharps/flats)

Starting after the Convert1MEASURE():

	debug. ConvObjs1/AMEASURE 1 lets=1:b 7:b

...all the way to the end.  $#&**)(^*$%^%*&^^$*  Conclusion: Convert1MEASURE() stores
garbage where the WHOLE_KEYSIG should be! Likely cause: I'm using KeySigCopy() :-( .
Per above, it assumes N106 keysigs, which differ from N105. But KeySigN105Copy() isn't
right either: it expects an AKEYSIG object, and all we have is a WHOLE_KSINFO -- unlike
KeySigCopy. Change KeySigN105Copy to use WHOLE_KSINFO => all OK!

-------------------------------------------------------------------------------

3 - 9 April

What about the question marks in the status list? TBDone again.

Open T+MInCounterpoint.ngl, Debug Check => dozens of messages about inconsistent nKSItems
in STAFF objects; that should be easy to fix! Add to Convert1STAFF() a call to KeySigN105Copy;
open T+MInCounterpoint.ngl => no such complaints! -- but now Debug Check says

	Warning. *DCheckMeasSubobjs: SUBOBJ L109 IN MEASURE L526 staffn 0 IS BAD.
	Warning. *DCheckMeasSubobjs: MEASURE L526 HAS 1 MISSING STAVES.
	Warning. DCheckContext: dynamicType FOR STAFF 1 IN MEASURE 9 (L167) INCONSISTENCY.
	Warning. *DCheckContext: clefType FOR STAFF 0 IN MEASURE 31 (L526) INCONSISTENCY.
	Warning. *DCheckContext: nKSItems FOR STAFF 0 IN MEASURE 31 (L526) INCONSISTENCY.
	Warning. DCheckContext: TIMESIG FOR STAFF 0 IN MEASURE 31 (L526) INCONSISTENCY.
	Warning. DCheckContext: dynamicType FOR STAFF 0 IN MEASURE 31 (L526) INCONSISTENCY.
	info. Discont. sel, 0 objs in range, 0 sel, 904 total. *4 voices.
	info. --CHECK MASTER:  Done.
	info. --CHECK CLIPBOARD:  Done. 7 ERROR(S). 

It might have had one of those complaints last time, I forget, but no more than one! ??

Open it again, Debug Check =>  no complaints.

Quit Ngale, relaunch it, open T+MInCounterpoint.ngl, Debug Check =>

	Warning. *DCheckMeasSubobjs: 1 SUBOBJS IN MEASURE L328 HAVE connAbove BUT NO CONNECTED STAFF.

That's all.

Open it again, Debug Check =>  no complaints.  Again => same thing.

Quit Ngale, relaunch it, open T+MInCounterpoint.ngl, Debug Check =>

	Warning. *DCheckMeasSubobjs: 1 SUBOBJS IN MEASURE L328 HAVE connAbove BUT NO CONNECTED STAFF.

Same message as a few minutes ago. L328 is the barline ending m. 18, at the bottom of p.
1; the AMEASURE for staff 3 correctly says _connAbove_, but the one for staff 2 has
connStaff=0; it should be 3.

Open it again, Debug Check =>  no complaints.

Ah, all the complaints in all these runs are about AMEASUREs!

!! Every ConvertMEASURE up to L307 is followed by three calls to Convert1MEASURE, one
for each of the three staves; but L307 has only two calls to Convert1MEASURE, as do many
following measures, and some have only one! However, the score ends up with every
MEASURE object having three subobjects. So the problem is that somehow Convert1MEASURE
isn't getting called for every AMEASURE. Which could explain all of these problems. Why?

Cut T+MInCounterpoint.ngl to half its length => T+MInCounterpointBug.ngl; open it; Debug
Check => the only complaint is

	Warning. *DCheckContext: clefType FOR STAFF 3 IN STAFF L169 INCONSISTENCY.

!! The clef type should be 10, but it's 0. In the next STAFF it's back to 10. ??

Back to the full T+MInCounterpointBug.ngl. Open, Debug Check =>

	Warning. *DCheckBeams: BEAMSET L803 SYNC LINK INCONSISTENT.
	Warning. *DCheckBeams: BEAMED NOTE IN SYNC L804 (MEASURE 50) VOICE 2 NOT IN VOICE'S LAST BEAMSET.
	Warning. DCheckContext: TIMESIG FOR STAFF 2 IN STAFF L332 INCONSISTENCY.

Open it again, Debug Check => no complaints.

Back to T+MInCounterpointBug.ngl. Open, Debug Check => no complaints.

Same thing again =>

	Warning. *DCheckContext: clefType FOR STAFF 3 IN STAFF L169 INCONSISTENCY.

Somewhat of a pattern here! Again the clef type should be 10, but it's 0; again, in the
next STAFF it's back to 10. But we have

	debug. ConvertSTAFF: staffL=L169 nEntries=3 lStaff=L96 rStaff=L251 StaffSYS=L168
	debug. Convert1STAFF: st=2 top,left,ht,rt=d1024,0,256,8496 lines=5 fontSz=14 .V clef=3 TS=1,5/4
	debug. Convert1STAFF: st=3 top,left,ht,rt=d1664,0,256,8496 lines=5 fontSz=14 .V clef=10 TS=1,5/4
	debug. Convert1STAFF: st=1 top,left,ht,rt=d384,0,256,8496 lines=5 fontSz=14 .V clef=3 TS=1,5/4

So Convert1STAFF() _is_ getting called for each staff (which strongly suggests we have
two bugs, not one :-( ), and it had the correct clefType! Where does it get changed?

Open T+MInCounterpointBug.ngl again, Debug Check => no complaints.

Open (full) T+MInCounterpoint.ngl, Check =>

	Warning. *DCheckMeasSubobjs: 1 SUBOBJ(S) IN MEASURE L328 HAVE connAbove BUT NO CONNECTED STAFF.

Back to T+MInCounterpointBug.ngl: open, Debug Check =>

	Warning. *DCheckContext: clefType FOR STAFF 3 IN STAFF L169 INCONSISTENCY.

Let's keep a closer eye on staff 3 in L169. Add code to ConvertObject to display ASTAFF 8 =>

	debug. Convert1NOTER: aNoteRL=154 voice=3 vis=1 yqpit=26 xd=0 yd=352 playDur=228
	debug. ConvObjs1/ASTAFF 8: st=3 top,left,ht,rt=d1664,0,256,8496 clef=10
	debug. ConvertSLUR: slurL=L188 staff=1 voice=1 tie=1
	debug. Convert1SLUR: aSlurL=10 dashed=0 firstInd=0 lastInd=0
	debug. ConvObjs1/ASTAFF 8: st=3 top,left,ht,rt=d1664,0,256,8496 clef=0
	debug. ConvertSYNC: syncL=L189 timeStamp=1200

Sure looks like somewhere in ConvertSLUR!! Another try:

	debug. Convert1DYNAMIC: aDynamicL=9 mouthWidth=0 xd=0
	debug. ConvObjs1/ASTAFF 8: st=3 top,left,ht,rt=d1664,0,256,8496 clef=10
	debug. ConvertBEAMSET: beamsetL=L186
	debug. Convert1BEAMSET: aBeamsetL=61 startend=1 fracs=0
	debug. Convert1BEAMSET: aBeamsetL=62 startend=-1 fracs=0
	debug. Convert1MEASURE: aMeasureL=35 staffn=2 measNum=9 connStaff=3
	debug. ConvObjs1/ASTAFF 8: st=3 top,left,ht,rt=d1664,0,256,8496 clef=0
	debug. ConvertTIMESIG: timeSigL=L196 inMeasure=1

Oops. No. I forgot this problem occurs inconsistently; it also seems to surface at
inconsistent points in the code. :-(

Add code elsewhere to check staff. Open T+MInCounterpointBug.ngl & Debug Check repeatedly
=> the first four times, no complaints; the fifth, just

	Warning. *DCheckMeasSubobjs: 1 SUBOBJ(S) IN MEASURE L328 HAVE connAbove BUT NO CONNECTED STAFF.

...which doesm't help.

Add code to optionally call HeapBrowser() from ConvertObject(); open T+MInCounterpointBug.ngl
several times => no complaints, and it's not at all clear that'll help :-( .

-------------------------------------------------------------------------------

10 - 15 April

Open T+MInCounterpointBug.ngl & Debug Check repeatedly =>
* the 1st time, warning "clefType FOR STAFF 3 IN STAFF L169 INCONSISTENCY", and clef in
	ASTAFF 8 changed from 10 to 0 in ConvertSLUR for slur L188, as it did a couple days ago
* 2nd time, no complaints
* 3rd time, warning the usual clef in staff L169 is inconsistent, & clef in ASTAFF 8
	changed from 10 to 0 in ConvertSLUR for SLUR L188 -- but Convert1SLUR wasn't called!!
	I wonder if HeapFixN105Links() is doing everything it should? Almost surely yes: it's
	just the standard HeapFixN105Links but with the N105 object format.
* 4th time: warning "*DCheckNode: TEMPO L370 HAS AN EMPTY metroStr."
* 5th time: warning the usual clef in staff L169 is inconsistent, & clef in ASTAFF 8 changed
	from 10 to 0 in ConvertSLUR for slur L188. As a couple of days ago and in the 1st time
	just above, Convert1SLUR was called for SLUR L188.
* 6th time: no complaints.
* 7th time: Ngale crashes in InstallDocMenus().

Re-launch Ngale; open T+MInCounterpointBug.ngl & Debug Check repeatedly =>
*1. no complaints
*2. crashed in DoEvent!

Quit & re-launch Xcode. Re-launch Ngale; open T+MInCounterpointBug.ngl, Debug Check
repeatedly =>
*1. no complaints
*2. no complaints
*3. warning "*DCheckNode: TEMPO L370 HAS AN EMPTY metroStr."
*4. no complaints
*5. no complaints
*6. no complaints
*7. warning "*DCheckContext: clefType FOR STAFF 3 IN STAFF L169 INCONSISTENCY."

	debug. ConvertDYNAMIC: dynamicL=L185 dynamicType=5
	debug. Convert1DYNAMIC: aDynamicL=9 mouthWidth=0 xd=0
	debug. ConvObjs1/ASTAFF 8: st=3 top,left,ht,rt=d1664,0,256,8496 clef=10
	debug. ConvertBEAMSET: beamsetL=L186
	debug. ConvertSYNC: syncL=L187 timeStamp=960
	debug. Convert1NOTER: aNoteRL=151 voice=4 vis=1 yqpit=-10 xd=0 yd=160 playDur=912
	debug. Convert1NOTER: aNoteRL=158 voice=2 vis=1 yqpit=-18 xd=0 yd=32 playDur=228
	debug. Convert1NOTER: aNoteRL=159 voice=3 vis=1 yqpit=12 xd=0 yd=128 playDur=228
	debug. ConvObjs1/ASTAFF 8: st=3 top,left,ht,rt=d1664,0,256,8496 clef=0
	debug. ConvertSYNC: syncL=L191 timeStamp=1680
	
!! ConvertObjects() seems to have skipped _objects_, not just subobjs!, going from L187
to L191!! How is it possible to do that yet end up with a valid object list???? Of course
this is just what I've been seeing with subobjects. Ah, but I don't know it skipped L188
thru 190: ConvertObjects isn't guaranteed to display anything for every object! Add
display for "default" type.

-------------------------------------------------------------------------------
	
16 - 22 April

Hmmm. I haven't seen (1) the utterly bizarre bug of objects or subobjects being skipped
in quite awhile, and I haven't seen the so-far unexplained bug of (2a) "clefType FOR STAFF
3 IN STAFF L169 INCONSISTENCY" or (2b) "TIMESIG FOR STAFF 2 IN STAFF L332 INCONSISTENCY"
in a few days -- and I don't know why either would have gone away! Try opening
T+MInCounterpointBug.ngl and T+MInCounterpoint.ngl each a few times => with
T+MInCounterpointBug.ngl, one occurrence of #2b:

	Warning. *DCheckContext: clefType FOR STAFF 2 IN STAFF L332 INCONSISTENCY.

...and the log, T+MInCounterpointBugLog.txt, indicates neither ConvertSTAFF nor Convert1STAFF
was ever called; that's the utterly bizarre bug #1!  $@%*^!$@$^%&*$@$*(*&^^%#@

Need to give a message for remaining subobjs even they don't need conversion. Add LogPrintf()
for subobjs of GRAPHICs, OTTAVAs, TUPLETs => done.

Status of ConvertObjects() (and functions it calls) DISPLAYING MESSAGES for object & subobj types.
. = non-existent; - = no; + = yes. 

	obj
	 subobj
0	+- HEADER_5		Object has only OBJHEADER; subobjs are unchanged
	-. TAIL_5		Has no subobjs & no fields other than header
	++ SYNC_5
	++ RPTEND_5
	+. PAGE_5
5	+. SYSTEM_5
	++ STAFF_5
	++ MEASURE_5
	++ CLEF_5
	++ KEYSIG_5		
10	++ TIMESIG_5
	++ BEAMSET_5
	++ CONNECT_5
	++ DYNAMIC_5
	.+ (MODNR)		Has no objects, only subobjects
15	++ GRAPHIC_5	Subobject has only LINK & STRINGOFFSET
	++ OTTAVA_5		Subobject has two LINKs & that's all. But isn't drawn! ??
	++ SLUR_5
	++ TUPLET_5		Subobject has two LINKs & that's all
	++ GRSYNC_5
20	+. TEMPO_5
	+. SPACER_5
	+. ENDING_5
	++ PSMEAS_5
	+. (DEFAULT)	I.e., illegal object type
	
OK, Rename it T+MInCounterpointBug1p5p.ngl & open again ??

Trim it w/ 5.8.x => T+MInCounterpointBug.ngl (NB: later renamed T+MInCounterpointBug25mm.ngl).
Open =>

	Warning. *DCheckNode: SUBOBJ IN FIRST STAFF, L6 (staffn=2), staffHeight DISAGREES WITH srastral.

In the 1st System (L6), staff 2 has height zero!

Open again => no more messages appear in the System log!!! Quit Ngale & Xcode, relaunch => 
no change. I don't think _any_ new messages from any program are appearing there!

Reboot, launch Xcode, run Ngale => messages appear normally in the System log. Open
T+MInCounterpointBug.ngl, Debug Check =>

	Warning. *DCheckMeasSubobjs: SUBOBJ IN MEASURE L431 HAS BAD TIMESIG numerator 0.
	Warning. *DCheckContext: TIMESIG FOR STAFF 2 IN MEASURE 25 (L431) INCONSISTENCY.

Tweak debug messages, recompile, re-run, open T+MInCounterpointBug.ngl, Debug Check =>

	Warning. *DCheckMeasSubobjs: 1 SUBOBJ(S) IN MEASURE L328 HAVE connAbove BUT NO CONNECTED STAFF.

Open it again, Debug Check => no complaints.
Open it again, Debug Check =>

	Warning. *DCheckMeasSubobjs: 1 SUBOBJ(S) IN MEASURE L328 HAVE connAbove BUT NO CONNECTED STAFF.

Open it again, Debug Check => no complaints.

Quit Ngale; relaunch it; open T+MInCounterpointBug.ngl, Debug Check => no complaints.
Open it again, Debug Check => no complaints.
Open it again, Debug Check => no complaints.
Open it again, Debug Check => no complaints.
Open it again, Debug Check =>

Apr 21 07:02:33 DonDualG5 Ngale[737]: info. --CHECK MASTER: *DCheckNode: SUBOBJ IN FIRST STAFF, L449 (staffn=2), staffHeight DISAGREES WITH srastral.

But L449 is in Master Page -- and the log ends like this:

	debug. ConvertMEASURE: measL=L444 lMeasure=L431 rMeasure=L0 systemL=L410
	debug. ConvertHEADER: headL=L446
	debug. ConvObjs1/ASTAFF 8: st=3 top,left,ht,rt=d1664,0,256,8496 clef=10
	debug. Convert1STAFF: st=2 top,left,ht,rt=d1024,0,0,8496 lines=5 fontSz=14 .V clef=3 TS=1,4/4
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	Notice. Opened file 'T+MInCounterpointBug.ngl'.

L445 is TAIL of the main object list, which ConvertObject() doesn't mention. But what
happened to Master Page??

Quit; make ConvertObject() list TAIL. Re-launch, open T+MInCounterpointBug.ngl, Debug
Check => no complaints -- but ConvertObject is skipping objects _all over the place_!
356 jumps to 371,then 373, then 378; 432 jumps to 435, 437, 444, 448, 449. So it skipped
main obj list TAIL and resumed in the middle of Master Page, but didn't finish Master
Page either. What????? Links 1 thru 54 are all there. From 188 it jumps to 192; this may
be the first jump.

Add code to ConvertObject() to print a message for jumps => there are still jumps, but it
doesn't print them! Huh???? Print out the link number every time through => there are
still jumps -- the first is 159 to 164 -- but the jump-detecting code still doesn't print,
though there are print statements for objects between. Even worse, sometimes print
statements for subobjects without their objects! :-( The only explanations I can think
of: a bizarre software bug, an even more bizarre CPU hardware problem, or a clobber. If
it's the 1st two, I'm dead; fortunately a clobber is much more likely than either.

A minimal test file might help. Trim T+MInCounterpointBug25mm.ngl => T+MInCp14mm.ngl and
T+MInCp12mm.ngl.

Open T+MInCp12mm.ngl => crashes in ShowWindow called from ShowDocument() (line 388 of
Documents.c). What does this mean? Unclear.

Open T+MInCp12mm.ngl again => opens & looks OK, but it skipped obj 230? No; just a bug in
my checking, sigh.

-------------------------------------------------------------------------------

23 - 25 April

Stuff missing from the log always seems to be worst at the end; with larger files, I
don't think it ever shows all 6 Master Page objects! What's the smallest file that
happens with?

Launch Ngale, open AllObjTypes.ngl (36 objs) 2x => both times, shows all 6, and 2 subobjs
each for STAFF & CONNECT; shows all 6 "******* ConvertObject:" messages.

Launch Ngale, open T+MInCounterpointBug12mm.ngl (229 objs) 2x => the 1st time, shows only
4 objs, and 1 subobj each for STAFF & CONNECT; shows 5 "******* ConvertObject:" messages.

	debug. ConvertObject: pL=229 is TAIL.
	debug.  ******************** ConvertObject: pL=230 prevL=229
	debug. ConvertHEADER: headL=L230
	debug.  ******************** ConvertObject: pL=231 prevL=230
	debug.  ******************** ConvertObject: pL=232 prevL=231
	debug. ConvertSYSTEM: sysL=L232 type=5 xd=576 sel=0 vis=1
	debug.  ******************** ConvertObject: pL=233 prevL=232
	debug. ConvertSTAFF: staffL=L233 nEntries=3 lStaff=L0 rStaff=L0 StaffSYS=L232
	debug.     Convert1STAFF: st=1 top,left,ht,rt=d384,0,256,8496 lines=5 fontSz=14 .V clef=3 TS=1,4/4
	debug.  ******************** ConvertObject: pL=234 prevL=233
	debug.     Convert1CONNECT: aConnectL=8 staffAbove=2 staffBelow=3
	debug. ConvertObject: pL=235 is TAIL.

The 2nd time, shows considerably less:

	debug.  ******************** ConvertObject: pL=228 prevL=227
	debug.     Convert1MEASURE: aMeasureL=43 staffn=1 measNum=12 connStaff=0
	debug.  ******************** ConvertObject: pL=230 prevL=229
	debug.  ******************** ConvertObject: pL=231 prevL=230
	debug.  ******************** ConvertObject: pL=232 prevL=231
	debug.  ******************** ConvertObject: pL=233 prevL=232
	debug.     Convert1STAFF: st=1 top,left,ht,rt=d384,0,256,8496 lines=5 fontSz=14 .V clef=3 TS=1,4/4
	debug.     Convert1STAFF: st=3 top,left,ht,rt=d1664,0,256,8496 lines=5 fontSz=14 .V clef=3 TS=1,4/4
	debug. ConvertObject: pL=235 is TAIL.
 
Launch Ngale, open T+MInCounterpointBug5mm.ngl (121 objs) 2x => both times, shows all 6
objs, 3 subobjs for STAFF and 2 for CONNECT; shows all 6 "******* ConvertObject:" messages.

Launch Ngale, open T+MInCounterpointBug8mm.ngl (168 objs) 2x => both times, shows all 6,
3 subobjs for STAFF and 2 for CONNECT; shows all 6 "******* ConvertObject:" messages.

Looks like it's fine with 168 objs or less but not with 229. How reliable is that, in
slightly different contexts?

W/o quitting, open T+MInCounterpointBug12mm.ngl (229 objs) 2x more => the 1st time,
system.log shows _no_ messages for opening; the 2nd, 4 of the 6 "******* ConvertObject:"
messages; a different 4 of the 6 objects; and 4 of the 5 subobjs. Open
T+MInCounterpointBug8mm.ngl (168 objs) again => shows all 6 objects, 3 subobjs for STAFF
and 2 for CONNECT; shows all 6 "******* ConvertObject:" messages. Open
T+MInCounterpointBug8mm.ngl yet again => "PROGRAM ERROR: BuildBeamDrawTable: couldn't find
an unfinished segment", then other misbehavior. ?!? But this could be the result of damage
from opening the 229-object file.

Quit Ngale, relaunch, open AllObjTypes.ngl 3x => no problems. Open T+MInCounterpointBug8mm.ngl
3x => no problems; open it a 4th time => shows only 4 objects, 2 subobjs for STAFF
and none for CONNECT; shows only 5 "******* ConvertObject:" messages; in display of score
"Donald Byrd (2020)" is much too small; Debug Check has two complaints. Okay, so opening
three 36-object and four 168-object scores causes problems.

The morning of 22 April, I opened T+MInCounterpointBug2p.ngl (723 objects); not only did
the log show only 3 objects in the Master Page list, but it skipped many objects in the
main list, including in the main list 671 to 679 and 696 to 712. Hypothesis: the longer
the object list, the more skipping.

-------------------------------------------------------------------------------

26 - 30 April

Ottavas are never drawn because their <numberVis> is always False. How does that happen?
It's set to True when the Ottava is created; anyway, it's obviously a file conversion
problem. ConvertOTTAVA() says

		OttavaNUMBERVIS(ottavaL) = (&aOttava)->numberVis;

...but the log output for AllObjTypes.ngl is

	debug. ConvertOTTAVA: ottavaL=L29 staff=1 type=1 nVis=0 xdFirst=-32 xdLast=8
	
So it"s not getting converted correctly, but xdFirst & xdLast are what they should be!
Ah: It _is_ converted correctly, but gets stomped on by a mistaken definition of
OttavaUNUSED2! Fixed.

BACK TO Flow in Text for the moment. With the latest, Pasting a few words into the Flow
In dialog doesn't work, i.e., no text appears in the dialog; I'm quite sure it used to!
In fact, I think it worked yesterday w/ v. 5.8.9 but not 5.8.10.
W/ 5.9 (inside Xcode), open AllObjTypes.obj, Paste " found all 7 screen sizes of the
Sonata music font." appears to do nothing.  W/ Ngale 5.8.9, likewise. W/ 5.7, Paste
" found all 7 screen sizes of the Sonata music font." works.  Back to 5.8.9 => fails.
Hmmm; this isn't behaving consistently!

Test with the same string minus the initial space, i.e., "Found all 7 screen sizes of the Sonata music font."
Log out, log back in, same test w/ 5.8.9 => it's OK; same w/ 5.8.10 => fails as before.
Log out, log back in, same test w/ 5.8.10 => OK!
Log out, log back in, same test w/ 5.9.1 (built, 25 Apr. version) => OK!
Log out, log back in, same test w/ 5.9.1 inside Xcode => OK!

So it's context sensitive in some way, at least as far back as 5.8.9: it seems to always
work after rebooting, otherwise it very often, maybe always fails. A nasty bug, and
maybe Apple's bug, not ours -- though it probably is ours :-) .

-------------------------------------------------------------------------------

1 - 5 May

BACK TO the bizarre and inconsistent bug in opening longer 'N105' format files. To review,
symptoms are: towards the end of the call to ConvertObjects() for the main obj list, lines
missing from the log file, apparently more & more; in the call to ConvertObjects() for
the Master Page obj list that follows, lots of lines missing. Bizarre. In addition, rare
problems like "clefType FOR STAFF 3 IN STAFF L169 INCONSISTENCY", "TIMESIG FOR STAFF 2 IN
STAFF L332 INCONSISTENCY", or messed-up beams, e.g., the beam itself invisible with stems
extending off the page!

The only explanations I can think of: (1) a bizarre software bug, (2) an even more bizarre
CPU hardware problem, or (3) a clobber. If it's the 1st two, I'm dead; fortunately a clobber
is much more likely than either. Let's look for evidence of #2 and (to some extent) #1
by using Torrey's old white MacBook (running OS 10.6): Copy Ngale PPC of 30 April and
test files to it.

<<<<<<<< FOLLOWING TESTS RUN ON TORREY'S OLD WHITE MACBOOK >>>>>>>>
Open AllObjTypes => looks OK; Debug Check => no complaints.
Open T+MInCounterpointBug5mm.ngl => looks OK; Debug Check => no complaints.
Open T+MInCounterpointBug12mm.ngl => looks OK; Debug Check => no complaints, BUT log
is truncated after 1st note of Sync L131 w/ message
	*** process 257 exceeded 500 log message per second limit -- remaining messages this
		second discarded ***
!! Could smthg like that be the cause of missing log messages on the G5? Seems very
unlikely, but...

Open T+MInCounterpointBug2p.ngl => looks OK; log is truncated after 1st note of Sync
L681 w/ the same message "exceeded 500 log message per second limit". Debug Check
=> 6 complaints "TIMESTAMP REL. TO NEXT/PREVIOUS IS WRONG", 1 about tuplet total
duration, 3 about playDur longer than dur. of 0; also,  Play it => sounds fine.
Open it again => looks OK; log is truncated after 1st note of Sync L345 w/ the
""exceeded 500 log message per second limit" message. Debug Check => one complaint about
note no. of note in Sync L280 and two about note no./notation disagree in other Syncs.
Similar (enough) symptoms to on my G5, so explanation #1 is even less likely &
#2 is way, way unlikely!

So almost certainly a clobber; that'd almost have to be in ReadHeaps(). Are there any
tools to help find it, like Even Better Bus Error of decades ago? There's a lot of stuff
in the Xcode Debug menu!

-------------------------------------------------------------------------------

6 May

Let's tighten up compiler warnings; it might reveal something!

Clean up CombineParts.c, recompile all => 859 warnings instead of 868.

Turn on checking everywhere Mismatched Return Type, Missing Function Prototypes,
Typecheck calls to printf/scanf, Initializer Not Fully Bracketed, Missing Braces and
Parentheses, Check Switch Statements, Unused Functions/Labels/Parameters/Variables/Values,
Uninitialized Automatic Variables, Unknown Pragma, Hidden Local Variables, Sign
Comparison => no new warnings, so nothing revealed. Oh well.

Clean up a few details => 852 warnings.

-------------------------------------------------------------------------------

9 - 15 May

BACK TO Flow in Text. David Alpher reported Flow In Text tends to crash when he uses two
consecutive hyphens at the end of a phrase; but he later reported there's no pattern
he can see. Oh well. He's now using a version of Ngale 5.8.10 that puts info to debug
this in the log file. Awaiting more info from him.

BACK TO bug in opening longer 'N105' format files.

It seems likely the problem is in ReadHeaps(). It relies on ReadObjHeap() and
ReadSubHeap(); both use our own ExpandFreeList() to get more memory. The latter calls
Apple's SetHandleSize; I don't see a variant of SetHandleSize that sets memory to 0
or anything else. I should be able to make SetHandleSize use GuardMalloc via Xcode.
But as an alternative, I could set all of the allocated memory to, e.g., 0 or 0xFF, or
(if I cast it to short or long) other values likely to crash quickly.

Clean Heaps.c slightly, test => opening 2ndMovement9-2017V.ngl hangs; from the log, looks
like it finished converting the file & was trying to draw it. Open same file again =>
crashes into gdb, but I can't get anything more from gdb !@TU!@$@#&*( . Still, this is
interesting. Same thing again => hangs; this time, the last log message is ConvertSLUR
with slurL=L4009, not very close to the end of the file, so it looks like it died while
converting -- but maybe not! How to tell when log messages are all f*cked up??

Let's try GuardMalloc as described in the Xcode 2 User Guide, using the Xcode Debugger! I
gave up on the Xcode Debugger years ago -- it never seemed to do anything useful -- but
it's worth another try. Turn it on; then Debug Executable => says "Nightingale exited with
status(1). The Debugger is still running. Use 'Restart' to debug again.", apparently
instantly. But Restart is greyed out! Build and Debug => no change. Set a breakpoint at
1st stmt of main() => no change! #@$^%@*)(#!*%^&*=  Ngale occasionally crashes into the
Debugger, and then it's at least somewhat usable, though it tends to say "value
temporarily available" a lot. But I can't see how to get into it otherwise. Sigh.

It's probably time to add a way to optionally have ExpandFreeList initialize newly
allocated memory; this could be useful in the future for similar bugs, so it should be
something the user can control, maybe w/ modifier keys.

-------------------------------------------------------------------------------

16 - 19 May

Idea: when Ngale starts up, offer a way to set something to tell ExpandFreeList() to
initialize every byte (or word?) of newly allocated memory to, say, a choice of 0 and ??

First, let's see what ExpandFreeList is being asked to do... Uh-oh! Lines that should
be in the log are missing!!!

debug.     ExpandFreeList: 02 ae 00 00   00 00 00 00   00 00 00 00   00 00 
debug.     ExpandFreeList: 02 af 00 00   00 00 00 00   00 00 00 00   00 00 
debug.     ExpandFreeList: 02 b0 00 00   00 00 00 00   00 00 00 00   00 00 
debug.     ExpandFreeList: 02 c6 00 00   00 00 00 00   00 00 00 00   00 00 ??SKIP BEFORE THIS

There should be lines beginning  02 b1  thru  02 c5 : about 29 lines are missing! As
described above, in a log generated on Torrey's old white MacBook, I got the message
"exceeded 500 log message per second limit -- remaining messages this second discarded"
and speculated smthg like that might be the cause of missing log messages on the G5. But
I've never seen any such message on the G5, and there've been 2312-1591 = ca. 721 messages
timestamped "May 18 15:23:43" before the skip! Let's slow it down & see if all the
expected messages from ConvertObject() appear.

First, have ExpandFreeList give a message for each heap it does anything with, i.e., that has
subobjects (all but six: the initialNumbers[] are set in Heaps.cp as if TEMPO, SPACER,
and ENDING have subobjs!), it does.

Every obj should have exactly two messages from ConvertObject(): "ConvertXXXL:
xxxL=Lnnn" and "  ******************** ConvertObject: pL=nnn", and the nnn's should be
consecutive. Open tiny file (AllObjTypes.ngl) => all objs have both. Open
T+MInCounterpointBug2p.ngl => yep: starting at L358, lots of objs are missing one or
both!

Quit Ngale, change LogPrintfs in ExpandFreeList; recompile, run, open MInCounterpointBug2p.ngl
again => starting w/ L344, many objs are missing one or both messages. L344 is preceded by
2003-1260 = ca. 743 lines w/ same timestamp, "May 19 08:08:16".

Quit Ngale, remove a LogPrintf from ExpandFreeList; recompile and run; open
MInCounterpointBug2p.ngl again => jumps from L354 to 357; many objs from then on are missing
one or both messages. L354 is preceded by ca. 744 lines w/ same timestamp, "May 19 09:59:48".

So it's almost certain the log starts dropping messages after "too many" messages in a second,
where "too many" looks to be around 720 to 750. Amazing! But let's see if I can get all the
messages to apper, both to double-check and because the missing messages could have useful
information.

Next step: try adding a delay per object to loop in ConvertObject. Probably delay for at
least 3 millisec. to be sure we're well below 500 messages per second; use SleepMS().

-------------------------------------------------------------------------------

20 - 22 May

BACK TO the Flow In Text problem: as David puts it , it's now "dysfunction, not crash".
Using the 11 May 2020 version of Ngale 5.8.10, in the exact same situation where it used
to crash, Flow In Text doesn't crash! Instead, it appears to do nothing at all, and he can
get out of Flow In via command-period. He then adds the first syllable with the regular
text tool, then goes back to Flow In Text for the rest of what he wants to add, and it
works fine. See Avid He system log1_11May.txt, AHeLog_InsertNewGraphic.txt and his emails
of 11 - 19 May. ?? Anyway, the dysfunction is much less of a problem for him than the
crash.

BACK TO the "lines in log file missing" problem. Add to main loop in ConvertObject:

	SleepMS(3);

Open MInCounterpointBug2p.ngl => looks like there are no lines missing in the log file!
Lines w/ timestamp "May 21 07:53:49": 655-285 = 370; "May 21 07:53:49": 1315-655 = 660

Same thing again:
Lines w/ timestamp "May 22 08:41:16": 418-14 = 404; "May 22 08:41:17": 1068-419 = 649

Sigh. So 660 messages in a second for the log seems to be safe, while 720 isn't; but
the OS 10.6 more conservative limit of 500 is based on Apple's (surely far more careful)
analysis.

-------------------------------------------------------------------------------

23 - 29 May

AFAIK, opening large 'N105' files with Ngale 5.9.1 is still a large problem. Open
2ndMovement.ngl (of my Violin Concerto) => it hangs; the last lines of the log are

	debug. ConvertBEAMSET: beamsetL=L4577
	debug.  ******************** ConvertObject: pL=4578 prevL=4577
 
L4577 is in the viola at the beginning of m. 233; 4578 is the Sync on the downbeat, w/
15 "notes" (all but 2 actually rests). Nothing obviously weird about it!

Kill Ngale, relaunch it, open 2ndMovement.ngl again => log goes all the way to the end,
including Master Page, but it hangs anyway. With thousands of lines of log output, there
could be a very helpful error message or three, and I probably wouldn't see it! So cut
the "********************" messages; relaunch Ngale, open 2ndMovement.ngl again => log
(of only about 1/2 the previous length) stops after these messages:

	debug. ConvertSLUR: slurL=L4622 staff=10 voice=10 tie=1
	debug. ConvertGRAPHIC: graphicL=L4623 staff=15 type=3 info=4
	
...and it hangs again.

Kill Ngale, relaunch it, open 2ndMovement.ngl again => log goes all the way to the end,
including Master Page, and followed by

	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)

but it again hangs anyway. Pretty reliable behavior! And the log is still over 5,000
lines. Any instances of "warning" or "err"? No. 2ndMovement.ngl is 888K; can I find a
much smaller file that fails reliably? Maybe 1stMovement_Cadenza.ngl (200K)? No: it
opens w/ no problems. 1stMovement_Part3.ngl (600K)? No, same thing. Follow that w/o
relaunching Ngale by opening 2ndMovement.ngl => brings up debugger stopped at line
1609 of FileConversion.cp! -- that's in ConvertSLUR(), the line

	SlurFILLER(slurL) = 0;

...with slurL = 513; the call stack is as expected.
But why? Did something bad happen? All it says is "GDB: Program loaded." And there's no
breakpoint within 50 lines! ??

The last few lines of the log:

	debug. ConvertSYNC: syncL=L510 timeStamp=420
	debug. ConvertDYNAMIC: dynamicL=L511 dynamicType=8
	debug. ConvertGRAPHIC: graphicL=L512 staff=14 type=3 info=4
	fseventsd[35]: callback_client: ERROR: d2f_callback_rpc() => (ipc/send) timed out (268435460) for pid 80744
	fseventsd[35]: client: 0x815800 : USER DROPPED EVENTS!
	fseventsd[35]: callback_client: ERROR: d2f_callback_rpc() => (ipc/send) timed out (268435460) for pid 80744
	 --- last message repeated 1 time ---
	fseventsd[35]: client: 0x815800 : USER DROPPED EVENTS!
	(etc. etc.)

The "USER DROPPED EVENTS!" and "ERROR" messages from fseventsd continue, the set of three
repeating every 30 sec., until I finally killed Ngale almost 12 hours later.

Relaunch Ngale, open 2ndMovement.ngl again => log from ConvertObject() goes all the way to
the end, including Master Page, and is followed by

	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	Notice. Opened file '2ndMovement.ngl'.
	debug. DrawToolPalette: MemBitCount(palPortBits, 1000)=970 portRect tlbr=0,0,399,271

The score is drawn, it looks OK at a glance, and Debug Check has no complaints!

Kill Ngale, relaunch it, open 2ndMovement.ngl again => log from ConvertObject() goes all
the way to the end, including Master Page, and is followed by

	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)

and it again hangs. In Debugger (GDB) window, click Debug => 
says "Nightingale exited with status(1). The Debugger is still running. Use 'Restart' to
debug again." But Restart is greyed out, just like under _9 - 15 May_ above; all the other
buttons are greyed out, too, except the Breakpoints buttons and Console button at right.
Ah, the Console button shows a "Debugger Console" window saying

	A problem internal to GDB has been detected,
	further debugging may prove unreliable.
	
	The Debugger has exited with status 1.The Debugger has exited with status 1.

The system log says

	Saved crashreport to /Library/Logs/CrashReporter/bash_2020-05-24-085700_don-byrds-power-mac-g5.crash using uid: 0 gid: 0, euid: 0 egid: 0

That file ends "Dyld Error Message: could not load inserted library: /usr/lib/libgmalloc.dylib".
That must be Guard Malloc; too bad!

Relaunch Ngale (outside of Xcode), open 2ndMovement.ngl again => log from ConvertObject()
goes all the way to the end, including Master Page, and is followed by

	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	[0x0-0xf6cf6c].com.amns.nightingale[85688]:   Member Nodes:
	[0x0-0xf6cf6c].com.amns.nightingale[85688]: 	node 1: desc aumu dls  appl, instance 0x810000 O I
	[0x0-0xf6cf6c].com.amns.nightingale[85688]: 	node 2: desc aufx lmtr appl, instance 0x810001 O I
	[0x0-0xf6cf6c].com.amns.nightingale[85688]: 	node 3: desc auou def  appl, instance 0x810002 O I
	[0x0-0xf6cf6c].com.amns.nightingale[85688]:   Connections:
	[0x0-0xf6cf6c].com.amns.nightingale[85688]: 	node   1 bus   0 => node   2 bus   0  [2 ch, 44100 Hz]
	[0x0-0xf6cf6c].com.amns.nightingale[85688]: 	node   2 bus   0 => node   3 bus   0  [2 ch, 44100 Hz]
	[0x0-0xf6cf6c].com.amns.nightingale[85688]:   CurrentState:
	[0x0-0xf6cf6c].com.amns.nightingale[85688]: 	mLastUpdateError=0, eventsToProcess=F, isRunning=F
 
...and it's hung again. 85688 is the process number for com.amns.nightingale; those messages
normally appear only in the Xcode Run Log window. Why did they appear in system.log this
time? I dunno.
 
Relaunch Ngale, open 2ndMovement.ngl again => log from ConvertObject() goes all the way to
the end, including Master Page, and is followed by

	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	
??

Hmmm. TEMPO, SPACER, and ENDING don't have subobjs, but initialNumbers[] are set in Heaps.cp
as if they do. (Tech Note #1 is correct on this.) Could this be causing problems? I really
don't think so: if heap->objSize<=0, ExpandFreeList() immediately quits, and initialNumbers
is used nowhere else! Still, let's fix initialNumbers[]... done.

Launch Ngale; AllObjTypes.ngl => OK, open T+MInCounterpointBug2p.ngl => OK, open
2ndMovement.ngl => crashes into debugger.

SWITCH TO the "Ngale 5.9.1 can't open its own converted files" problem. Open 1CourtesyAcc.ngl,
save result (with default name, "1CourtesyAcc.ngl (converted)"). Open that =>

	Notice. Checking Score header:  err #1, err #2, err #10, err #11, err #23, err #26, err #27,Displaying Score header (ID 4):
	info.   (1)nstaves=0  (2)nsystems=0  (3)feedback=0  (4)used=0  (5)transposed=0
	info.   (6)polyTimbral=0  (7)spacePercent=100  (8)srastral=5  (9)altsrastral=2
	info.   (10)tempo=0  (11)channel=0  (12)velocity=0  (13)headerStrOffset=0  (14)footerStrOffset=0
	info.   (15)dIndentOther=0  (16)firstNames=2  (17)otherNames=0  (18)lastGlobalFont=0
	info.   (19)aboveMN=1  (20)sysFirstMN=1  (21)startMNPrint1=0  (22)firstMNNumber=1
	info.   (23)nfontsUsed=0  (24)musFontName='Briard'
	info.   (25)magnify=0  (26)selStaff=1  (27)currentSystem=0  (28)spaceTable=0  (29)htight=100
	info.   (30)lookVoice=-1  (31)ledgerYSp=0  (32)deflamTime=50  (33)colorVoices=2  (34)dIndentFirst=752
	ERROR.  7 ERROR(S) FOUND (first bad field is no. 1).  (CheckScoreHdr)

6 of the 7 errors are in fields with values of 0 where that's illegal; #26 is weird bcs
selStaff=1 is _always_ valid -- but this score claims to have nstaves=0 :-) . The other
files all appear to have values that are correct, not just legal. So ??

-------------------------------------------------------------------------------

30 - 31 May

Open 1CourtesyAcc.ngl w/ Ngale 5.8.10; Respace at 67%, change staff rastral to 4, change
start meas. no. to 345, change deflamTime to 78 ms., etc.; Save as VUnusualScHdr_1CourtesyAcc.ngl.
Try to open that w/ 5.9.1 => it works; nothing illegal in score header, and the non-default
values seem to have come through!?!

Open AllObjTypes.ngl w/ Ngale 5.8.10; change start meas. no. to 345; Save as
UnusualScHdr_AllObjTypes.ngl. Try to open that w/ 5.9.1 => it works; nothing illegal in score
header, and the non-default value came through!?! No error messages from opening
it, and Debug Check has no complaints! Amazing.

Open 1CourtesyAcc.ngl w/ Ngale 5.8.10; change
start meas. no. to 345; Save as UnusualScHdr_1CourtesyAcc.ngl.
Try to open that w/ 5.9.1 => it works; nothing illegal in score header, and the non-default
value came through!?!

The files 1CourtesyAcc.ngl and UnusualScHdr_1CourtesyAcc.ngl should be byte-for-byte
identical except for the word containing <firstMNNumber> and the date/timestamp; apparently
they're not. Hexdump both; compare dumps w/ TextWrangler => finds 19 differences!! Sigh;
most are probably meaningless garbage. But all that could reasonably be causing the score-
header errors must be at the beginning, almost certainly in the score header; it starts
at offset 80 bytes = 0x50, with length 2148, so ends with offset 2227 = 0x8B3.

-------------------------------------------------------------------------------

1 - 9 June

What's where in the N105 score header?

	debug. OFFSET ('N105' format) OF feedback=268 fontNameMN=310 nfontsUsed=850 magnify=1564
	debug. OFFSET OF noteInsFeedback=268 fontNameMN=328 nfontsUsed=988 magnify=1702

The 1st difference between 1CourtesyAcc.ngl and UnusualScHdr_1CourtesyAcc.ngl is the
the date/timestamp. The 2nd is this:

	Dump1CourtesyAcc.txt
	00000050  00 01 00 02 00 02 00 02  00 02 00 01 00 00 00 00  |................|
	
	DumpUnusualScHdr_1CourtesyAcc.txt
	00000050  00 01 00 0b 00 0a 00 0a  00 02 00 01 00 00 00 00  |................|

Offset 0x50 = 80 decimal, so this is the very start of the score header:

	LINK 		headL,				/* links to header and tail objects */						\
				tailL,																			\
				selStartL,			/* currently selected range. */								\
				selEndL;			/*		Also see the <selStaff> field. */					\																	\
	short		nstaves,			/* number of staves in a system */							\
				nsystems;			/* number of systems in score */							\

For these six fields, 1CourtesyAcc has 1, 2, 2, 2, 2, 1: some questionable or wrong -- but
nstaves=2, nsystems=1: not only not the values DisplayScoreHdr() shows (0 and 0), but
correct! UnusualScHdr_1CourtesyAcc has 1, 11, 10, 10, 2, 1: all reasonable. Still...

Maybe the offending values in the score header don't matter bcs Ngale recomputes them after
reading the header!? Seems unlikely, but try ignoring the errors. Open AllObjTypes.ngl =>

	info. Displaying Score header (ID 3):
	info.   (1)nstaves=0  (2)nsystems=0  (3)noteInsFeedback=0  (4)used=0  (5)transposed=0
	info.   (6)polyTimbral=0  (7)spacePercent=100  (8)srastral=5  (9)altsrastral=2
	info.   (10)tempo=0  (11)channel=0  (12)velocity=0  (13)headerStrOffset=0  (14)footerStrOffset=0
	info.   (15)dIndentOther=0  (16)firstNames=2  (17)otherNames=0  (18)lastGlobalFont=0
	info.   (19)aboveMN=1  (20)sysFirstMN=1  (21)startMNPrint1=0  (22)firstMNNumber=1
	info.   (23)nfontsUsed=0  (24)musFontName='Briard'
	info.   (25)magnify=0  (26)selStaff=1  (27)currentSystem=0  (28)spaceTable=0  (29)htight=100
	info.   (30)lookVoice=-1  (31)ledgerYSp=0  (32)deflamTime=50  (33)colorVoices=2  (34)dIndentFirst=752
	Notice. Checking Score header:  err #1, err #2, err #10, err #11, err #23, err #26, err #27, 7 ERROR(S) FOUND (first bad field is no. 1).  (CheckScoreHdr)
	Warning. * StopInform alertID=464
	ERROR. LAST OBJECT TYPE=-24008 BUT SHOULD BE 25.
	ERROR. CAN'T OPEN THE FILE. errCode=-996 errInfo=-999  (OpenError)
	
!! <origin> is (-24008, -24008); this is not a coincidence! But <origin> is way back near the
beginning of the Document header, and we've already read that _and_ the Score header. So ??
<lastType> is really at offset 2228; is that where we're getting it? No: GetFPos() says 10;
that's because, for a 'N106' format file, we're simply not reading the Score header or the
Document header!!! But why are almost all of the values reasonable? Because they're default
values that BuildDocument() fills in before calling OpenFile() :-( .

Have OpenFile() read Document and Score headers for 'N106' format files; launch & open
'1CourtesyAcc.ngl (converted)' => "All staves are the same size, but the score's 'standard'
size is different..."; then "ERROR. PROGRAM ERROR: MEAdjustCaret: can't handle type 0"! All
messages from ConvertObjects() look OK, but Ngale draws a completely blank page, and Browser
shows the object list as containing head and tail and that's all :-( . Shift-Browser crashes
with "EXC_BAD_ACCESS".

Add LogPrintf() to both loops in HeapFixLinks() =>

	debug. pL=1 type=0 in main obj list  (HeapFixLinks)
	debug. pL=2 type=1 in main obj list  (HeapFixLinks)
	debug. pL=0 type=99 in Master Page obj list  (HeapFixLinks)
	ERROR. PROGRAM ERROR: Can't set links in memory for the file!  (HeapFixLinks)
	
I'm not sure why I'm now getting a fatal error in HeapFixLinks.

Launch Ngale again & open 'AllObjTypes.ngl (converted)' => exactly the same four messages
from HeapFixLinks.

-------------------------------------------------------------------------------

10 - 14 June

What happens with an N106 format "native" (not converted) file? Launch Ngale 5.9.1, New,
insert a C5 half note, Save as "1NoteC5_N106Native.ngl", Close it. Open 1NoteC5_N106Native.ngl
=> same four messages from HeapFixLinks.

The problem must be in ReadObjHeap(). OK, let's compare code and/or behavior to Ngale 5.8.10.
Ah-hah! In 5.8.10, ReadObjHeap has a loop that "moves the contents of the object heap around
so each object is filled out to the expected SUPEROBJECT size." In 5.9.1, that loop is in
a separate function, MoveObjSubobjs(); fine, but it's called only for 'N105' files! QED.

Fix that; try to open 1NoteC5_N106Native.ngl =>

	info. nFObjs=17 sizeAllObjsFile=620 sizeAllObjsHeap=952  (ReadObjHeap)
	debug. MoveObjSubobjs: curType=0 len=30 newLen=56
	debug. MoveObjSubobjs: curType=4 len=44 newLen=56
	debug. MoveObjSubobjs: curType=5 len=50 newLen=56
	debug. MoveObjSubobjs: curType=6 len=36 newLen=56
	debug. MoveObjSubobjs: curType=12 len=32 newLen=56
	debug. MoveObjSubobjs: curType=8 len=30 newLen=56
	debug. MoveObjSubobjs: curType=9 len=30 newLen=56
	debug. MoveObjSubobjs: curType=10 len=30 newLen=56
	debug. MoveObjSubobjs: curType=7 len=54 newLen=56
	debug. MoveObjSubobjs: curType=2 len=32 newLen=56
	debug. MoveObjSubobjs: curType=1 len=30 newLen=56
	debug. MoveObjSubobjs: curType=0 len=30 newLen=56
	debug. MoveObjSubobjs: curType=4 len=44 newLen=56
	debug. MoveObjSubobjs: curType=5 len=50 newLen=56
	debug. MoveObjSubobjs: curType=6 len=36 newLen=56
	debug. MoveObjSubobjs: curType=12 len=32 newLen=56
	debug. MoveObjSubobjs: curType=1 len=30 newLen=56
	debug. ReadObjHeap_1: 00 02 00 00   00 01 00 00   00 00 00 00   00 01 00 00
	debug.              : 00 00 00 00   00 00 00 00   00 00 00 8e   02 00 00 00
	debug.              : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 
	debug. ReadObjHeap_2: 00 03 00 01   00 00 00 00   00 00 04 00   01 01 00 00
	debug.              : 00 00 00 00   00 00 00 00   00 00 00 e5   00 00 00 00
	debug.              : 00 00 00 00   00 00 01 67   00 00 01 7f   00 00 
	debug. HeapFixLinks: pL=1 type=0 in main obj list
	debug. HeapFixLinks: pL=2 type=4 in main obj list
	debug. HeapFixLinks: pL=3 type=5 in main obj list
	debug. HeapFixLinks: pL=4 type=6 in main obj list
	debug. HeapFixLinks: pL=5 type=12 in main obj list
	debug. HeapFixLinks: pL=6 type=8 in main obj list
	debug. HeapFixLinks: pL=7 type=9 in main obj list
	debug. HeapFixLinks: pL=8 type=10 in main obj list
	debug. HeapFixLinks: pL=9 type=7 in main obj list
	debug. HeapFixLinks: pL=10 type=2 in main obj list
	debug. HeapFixLinks: pL=11 type=1 in main obj list
	debug. HeapFixLinks: pL=0 type=0 in Master Page obj list
	ERROR. PROGRAM ERROR: Can't set links in memory for the file!  (HeapFixLinks)

?? Ah, a silly block-structure error in HeapFixLinks. Fix it; open 1NoteC5_N106Native.ngl
=> OK! Open 1CourtesyAcc.ngl (converted) = OK! Open AllObjTypes.ngl => OK! Open
AllObjTypes.ngl (converted) => OK! Open T+MInCounterpointBug12mm.ngl => OK!!!

-------------------------------------------------------------------------------

15 - 21 June

Looks like the "Ngale can't open files it just saved" bug has been fixed. Now what about
the bug in opening large files? Try opening T+MInCounterpointBug2p.ngl => looks OK, and
Debug Check has no complaints! Open T+MInCounterpoint.ngl => looks OK, and Debug Check has
no complaints! Open 2ndMovement.ngl (of Violin Concerto) => crashes into debugger stopped
at line 1616 of FileConversion.cp, in ConvertSLUR(), the line

	SlurFILLER(slurL) = 0;

...with slurL = 513 and the call stack as expected. This is precisely what happened
before; see 23 - 29 May :-( . Not that surprising, since I had, and have, only the vaguest
idea what causes it :-( .

Open 'AllObjTypes.ngl' => no problems.
Open 'T+MInCounterpointBug2p.ngl' => no problems.
Open 'T+MInCounterpoint.ngl' => Debug Check sez

	Warning. *DCheckContext: clefType FOR STAFF 1 IN STAFF L332 INCONSISTENCY.

?!?!?

OK, HeapFileIO.c already has a constant

	#define EXTRAOBJS 10L

to make it allocate more memory than it thinks is necessary for each heap. Up it to 500L,
then open T+MInCounterpoint.ngl => crashes into GDB in ConvertSLUR() at the line

	SlurFILLER(slurL) = 0;

...with slurL = 513; the call stack is as expected. Exactly what I've seen several times
before, including at the beginning of this note! T+MInCounterpoint.ngl isn't even a very
large score, so it's pretty clear (and not surprising) that the sizes of the heaps aren't
the problem.

Open 'AllObjTypes.ngl' => no problems.
Open 'T+MInCounterpointBug2p.ngl' => no problems.
Open 'T+MInCounterpoint.ngl' 3x => no problems twice; the 3rd time, Debug Check sez

	Warning. •DCheckNode: TUPLET L1084 HAS BAD SYNC LINK 65.
	Warning. *DCheckTuplets: TUPLET L1084 SYNC LINK INCONSISTENT.
	Warning. *DCheckTuplets: TUPLET L1084 TOTAL DURATION OF 5520 DOESN'T MAKE SENSE.

-------------------------------------------------------------------------------

24 - 27 June

InitTrackingLinks() (for many years part of ComputeObjCounts) allocates three arrays of
links -- firstSubLINKA, objA, and modA -- but fills in only objA. After it's called, we
call CreateModTable(), which fills in modA , but what about firstSubLINKA? Besides
which, it's a ridiculously confusing way to do things! First, move the call to
CreateModTable into InitTrackLinks => done. And firstSubLINKA is filled in by
WriteSubObjs(), called from WriteSubHeaps: not exactly obvious, though it seems it works
(and has been working for years). It's also not obvious (yet) if it can be done sooner.

Open T+MInCounterpoint.ngl => Debug Check has no complaints and it looks OK. Open
2ndMovement.ngl => no complaints, but the gliss. in the soloist's part on p. 3 is _way_ too
wide: its width is 245 (?? or 285?) (it should be 20). Open it again => same result! Is
this finally really reproducible?

Remove an unused variable in CountObjSubobjs(), recompile, relaunch, open 2ndMovement.ngl
=> crashes into GDB, hilighting the "SlurFILLER(slurL) = 0" in ConvertSLUR :-| .
relaunch, open 2ndMovement.ngl => hangs. 

Relaunch, open 2ndMovement.ngl => no complaints, but again the gliss. in the soloist's part
on p. 3 (a line Graphic, L283) has width 285 = its firstObj! So, it's kind of reproducible,
maybe enough to be useful. Wait-- on p. 29, gliss. L3719 (or 3720?) has width 3723, and
gliss. L3735 has width = firstObj = 3737! So the f*cked-up objects, at least the obvious
ones, are Graphics, and the nonsense values are slightly more than the link values and often
if not always = their firstObjs!!!!  This _has_ to imply, if not exactly what the bug is,
pretty close :-) .

Ahh: in ConvertGRAPHIC(), the statement that should be setting the thickness is commented
out because it didn't compile because... no matter why. That definitely explains the
thicknesses being nonsense; it's quite possible it explains why they're = to the objects'
firstObjs; but it's not at all obvious it'd cause random crashes. Regardless, fix that,
recompile; open 2ndMovement.ngl => log ends with

	debug. ConvertCONNECT: connectL=L4641
	debug. ConvertObject: pL=4642 is TAIL.
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)

...but then Ngale hangs. Try again => the identical result. Try a 3rd time => the identical
result.

Sigh. How about adding a line Graphic to a small file and see what happens. Using 5.8.10,
add a note and a gliss. line to it to AllObjTypes.ngl; save it. Open it in 5.9.1 => looks
OK & Debug Check is happy. Save as "AllObjTypes.ngl (converted)" => Ngale hangs/crashes
twice in a row! -- into GDB, in SaveFileDialog called from GetOutputName.

I wonder if the file conversion results in corrupt heaps? Our checking heap validity is
very feeble! Enhance Heap Browser to show more about Graphics & say if an obj/subobj is
on the free list, etc. => $#&$%^Y*!%^  now Ngale crashes consistently trying to open
T+MInCounterpointBug2p.ngl, which is much smaller than 2ndMovement.ngl. Sigh!

When did new versions of Ngale start crashing opening T+MInCounterpointBug2p.ngl?
The NightingalePPC.app of 21 June crashes; so does the version of 14 June. But the entry
for 15-21 June above shows it opened then with no problems, confirmed by June18Log.txt,
in which I opened it several times and the full T+MInCounterpoint.ngl as well!?!

Log out, log back in. Launch NightingalePPC.app of 14 June; open T+MInCounterpointBug2p.ngl
=> looks OK & Debug Check has no complaints. Launch version of 21 June 21; open same file
=> same results. Start Xcode, launch current version => same results; open full
T+MInCounterpoint.ngl => all OK.So I was chasing a ghost, whew! Now what about the other
files I've been having trouble with?

-------------------------------------------------------------------------------

28 June - 3 July

Open 2ndMovement.ngl => crashes into GDB, hilighting the "SlurFILLER(slurL) = 0" in
ConvertSLUR, just as it has many times before :-| .

Using Ngale 5.8.10,  ut the last few pages of 2ndMovement.ngl to get 2ndMovementCUT3.ngl
(30 pages); launch current Ngale 5.9.1, open => log ends with

	debug. ConvertObject: pL=3870 is TAIL.
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	Help Viewer[92116]: *** -[NSCFArray objectAtIndex:]: index (1) beyond bounds (1)
 
...and it's hung. Same thing again => log ends with

	debug. ConvertKEYSIG: keySigL=L389 inMeasure=0
	info.  (0 sharps/flats)
 
...and it goes into GDB, highlighting the "SlurFILLER(slurL) = 0;" line with slurL = 513!

-------------------------------------------------------------------------------

4 - 7 July

Cut more pages at the end of 2ndMovement.ngl to get 2ndMovementCUT3.ngl (24 pages);
launch Ngale, open => it looks OK & Debug Check has no complaints! Same thing again =>
same results; same thing a 3rd time => same results.

Open 2ndMovementCUT3.ngl => crashes into GDB. Re-launch Ngale, open 2ndMovementCUT3.ngl =>
crashes; log ends with

	Ngale[93367]: debug. ConvertDYNAMIC: dynamicL=L511 dynamicType=8
	Ngale[93367]: debug. ConvertGRAPHIC: graphicL=L512 staff=14 type=3 info=4 thick=0
	ReportCrash[93378]: Formulating crash report for process Nightingale[93367]
	ReportCrash[93378]: Saved crashreport to /Users/donbyrd/Library/Logs/CrashReporter/Nightingale_2020-07-04-074912_don-byrds-power-mac-g5.crash using uid: 501 gid: 20, euid: 501 egid: 20

!! There are about 15 Ngale reports in /Users/donbyrd/Library/Logs/CrashReporter. That's a
surprise! Anyway, the latest (Nightingale_2020-07-04-074912_don-byrds-power-mac-g5.crash)
says:

	Exception Type:  EXC_BAD_ACCESS (SIGSEGV)
	Exception Codes: KERN_INVALID_ADDRESS at 0x000000001c25cc34
	Crashed Thread:  0
	
	Thread 0 Crashed:
	0   com.amns.nightingale                0x001586bc ConvertSLUR(Document*, unsigned short) + 168 (FileConversion.cp:1617)
	1   com.amns.nightingale                0x0015ae84 ConvertObjSubobjs(Document*, unsigned long, long, unsigned char) + 8224 (FileConversion.cp:1936)
	2   com.amns.nightingale                0x00144530 OpenFile(Document*, unsigned char*, short, FSSpec*, long*) + 4032 (FileOpen.cp:492)
	...

Re-launch Ngale, open 2ndMovementCUT3.ngl => it hangs; last messages in log:

	debug. ConvertObject: pL=3870 is TAIL.
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)

It seems that 2ndMovementCUT3.ngl crashes consistently; CUT5 opens consistently. How about
CUT4?

Rename 2ndMovementCUT3.ngl to 2ndMovement_pp1-30.ngl, CUT4.ngl to pp1-28.ngl, CUT5.ngl to 
pp1-24.ngl . Re-launch Ngale, open 2ndMovementpp1-28.ngl => it looks OK & Debug Check has
no complaints. Same thing again => same results. So the 1st 28 pages, no problem; the 1st
30, big problem! How about 29?

Re-launch Ngale, open  => it hangs! Last log messages:

	debug. ConvertObject: pL=3761 is TAIL.
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)

NB there are three line Graphics (glissandi) on p. 29, and I'm suspicious of line Graphics.
Remove them => 2ndMovement_pp1-29Minus.ngl; launch Ngale, open it => it still crashes into
GDB :-( ; last log messages are

	debug. ConvertSYNC: syncL=L393 timeStamp=0
	debug. ConvertSYNC: syncL=L394 timeStamp=96

Remove the entire last three measures => 2ndMovement_pp1-29Minus3mm.ngl;  launch Ngale,
open it => crashes into GDB, highlighting the usual "SlurFILLER(slurL) = 0;".

SWITCH TO David Alpher's problems in "Please come home-s of france 2". In a couple places, e.g.,
m. 35, there's a huge empty space between the key signature and the first note. Respacing m. 35
doesn't help because Show Invisibles shows the space belongs to the before-measure area, i.e.,
it's really between the key signature and the first (invisible) barline; Reformat fixes that but
totally screws up the layout because of the hidden staves! It'd be much better to provide a tool
that simply sets the space to what it should be.

-------------------------------------------------------------------------------

8 - 16 July

DoOpenKeysig() contains code to "update the space before the initial Measure on all systems
affected by [a] keysig change". The heart of it is a call to FixInitialKSxds() -- but
FixInitialKSxds assumes the current space is correct, so it's no use! Looks like we have to
do what CreateSystem() does with <spBefore>, namely:

	spBefore = dLineSp/2;								/* Clef  & key sig. */
	spBefore += std2d(SymWidthRight(doc, pL, maxSofonStaff, False), STHEIGHT, 5);

	pL = MakeMeasure(doc, pL, qMeasureL, staffL, systemL, spBefore, staffTop, where);
		[*where = SuccSystem; (FirstOnPage?)]
	
...and MakeMeasure() sets the system's initial Measure's x coord. with:

	xd = (where==SuccMeas? LinkXD(prevMeasL)+spBefore : LinkXD(prevL)+spBefore);

	debug. MakeMeasure: where=3 SuccMeas=4 LinkXD(prevL)=432 spBefore=0 xd=432

Sigh. How about something simpler: if the Respace command finds the selection is just the
initial clef or keysig of a system, it simply lets the user set the width of the before-
measure area. Harder for the user, but this is a mere workaround for a not-very-common bug!
...Ah, but this could also be useful for "engravers" wanting more control of spacing. True,
though very clumsy for that purpose. Anyway, done!

-------------------------------------------------------------------------------

16 - 19 July

BACK TO problems converting large files from 'N105' to current format, e.g., with 2ndMovement.ngl
and various abbreviated versions of it.

I think 2ndMovement_pp1-29Minus3mm.ngl crashes consistently; 2ndMovement_pp1-28.ngl is OK
consistently. Check:

(1) Launch Ngale; New; open 2ndMovement_pp1-29Minus3mm.ngl => crashes into GDB.
(2) Launch Ngale; Open 2ndMovement_pp1-29Minus3mm.ngl => opens; score looks OK; no Debug complaints.
(3) Launch Ngale; Open 2ndMovement_pp1-29Minus3mm.ngl => crashes into GDB showing usual line of
ConvertSLUR(), but  w/ slurL = 395 (vs. the value on previous runs of 513); last log messages:

	debug. ConvertSYNC: syncL=L393 timeStamp=0
	debug. ConvertSYNC: syncL=L394 timeStamp=96

(4) Launch Ngale; Open 2ndMovement_pp1-29Minus3mm.ngl => crashes into GDB showing exactly the same
symptoms & last log messages as above.
(5) Launch Ngale; Open 2ndMovement_pp1-29Minus3mm.ngl => crashes into GDB showing exactly the same
symptoms as above, but last log messages are

	debug. ConvertSYNC: syncL=L320 timeStamp=1380
	debug. ConvertMEASURE: measL=L321 lMeasure=L304 rMeasure=L335 systemL=L299

(6) Launch Ngale; Open 2ndMovement_pp1-29Minus3mm.ngl => crashes into GDB showing exactly the same
symptoms as above, but last log messages are

	debug. ConvertSYNC: syncL=L312 timeStamp=480
	debug. ConvertSYNC: syncL=L313 timeStamp=660
	
Changing test files:
(1) Launch Ngale; Open 2ndMovement_pp1-28.ngl => opens; score looks OK; no Debug complaints.
(2) Launch Ngale; Open 2ndMovement_pp1-28.ngl => opens; score looks OK; no Debug complaints.
(3) Launch Ngale; Open 2ndMovement_pp1-28.ngl => opens; score looks OK; no Debug complaints.
(4) Launch Ngale; Open 2ndMovement_pp1-28.ngl => opens; score looks OK; no Debug complaints.
(5) Launch Ngale; Open 2ndMovement_pp1-28.ngl => opens; score looks OK; no Debug complaints.
(6) Launch Ngale; Open 2ndMovement_pp1-28.ngl => opens; score looks OK; no Debug complaints.

So 2ndMovement_pp1-29Minus3mm.ngl crashed 5 out of 6 times; 2ndMovement_pp1-28.ngl was OK 6 out 
of 6. Pretty clear! Changing test files again:

(1) Launch Ngale; Open 2ndMovement_pp1-29Minus5mm.ngl => crashes into GDB showing usual line of
ConvertSLUR(), w/ slurL = 395; last log messages:

	debug. ConvertSYNC: syncL=L393 timeStamp=0
	debug. ConvertSYNC: syncL=L394 timeStamp=96

(2) Launch Ngale; Open 2ndMovement_pp1-29Minus5mm.ngl => crashes into GDB showing usual line of
ConvertSLUR(), w/ slurL = 395; last log messages: (same as above)

(3) Launch Ngale; Open 2ndMovement_pp1-29Minus5mm.ngl => crashes into GDB showing usual line of
ConvertSLUR(), w/ slurL = 395; last log messages: (same as above)

(4) Launch Ngale; Open 2ndMovement_pp1-29Minus5mm.ngl => crashes into GDB showing usual line of
ConvertSLUR(), w/ slurL = 395; last log messages: (same as above)

Again, very clear. The first 2 measures on p. 29 make the difference, but there's nothing
obviously different in those mm. from the previous 28 pages. Changing files again:

(1) Launch Ngale; Open 2ndMovement_pp1-29Minus6mm.ngl => opens; score looks OK; no Debug complaints.
(2) Launch Ngale; Open 2ndMovement_pp1-29Minus6mm.ngl => opens; pp. 1-3 looks OK; no Debug complaints.
(3) Launch Ngale; Open 2ndMovement_pp1-29Minus6mm.ngl => opens; pp. 1-3 looks OK; no Debug complaints.

The last object in 2ndMovement_pp1-29Minus6mm.ngl is the 2nd measure on p. 29, m. 181 (L3690).
So the content of that measure makes the difference!! Why? Just because of the total amount of
something, or something specific to that measure? W/ Ngale 5.8.10, Debug "Check all possible"
of 2ndMovement_pp1-29Minus5mm.ngl finds nothing suspicious. Visible in m. 181 are lots of whole
rests, some half & dotted half dyads, a few dynamics, and one txt graphic; is anything _not_
visible in that measure?

DIGRESSION: In PageFixSysRects(), it looks like prevSysBottom is used uninitialized. With
existing code:

	debug. PageFixSysRects: sysL=95 sysHeight=2016 prevSysBottom=3168 ->systemRect.top=3168
	debug. PageFixSysRects: sysL=168 sysHeight=2016 prevSysBottom=5184 ->systemRect.top=5184
	debug. PageFixSysRects: sysL=250 sysHeight=2016 prevSysBottom=7200 ->systemRect.top=7200
	debug. PageFixSysRects: sysL=410 sysHeight=2016 prevSysBottom=2592 ->systemRect.top=2592
	debug. PageFixSysRects: sysL=504 sysHeight=2016 prevSysBottom=4608 ->systemRect.top=4608
	debug. PageFixSysRects: sysL=578 sysHeight=2016 prevSysBottom=6624 ->systemRect.top=6624
	debug. PageFixSysRects: sysL=640 sysHeight=2016 prevSysBottom=8640 ->systemRect.top=8640

Huh. _prevSysBottom_ looks correct every time, and it doesn't just happen to be 3168 the
1st time!; how? Ah, the first time it's used _can't_ be the first time thru the loop:
that's always the first system of the page, and _prevSysBottom_ is set then! So it's no problem.

BACK TO problems converting large files from 'N105' to current format, e.g., with 2ndMovement.ngl
and various abbreviated versions of it. From 2ndMovement_pp1-29Minus5mm.ngl, delete most of p. 27
and most of p. 28 => 2ndMovement_pp1-29Minus5mm+Mo

(1) Launch Ngale; Open 2ndMovement_pp1-29Minus5mm+Mo => opens; p. 29 looks OK.
(2) Launch Ngale; Open 2ndMovement_pp1-29Minus5mm+Mo => opens; pp. 1-3 & 29 look OK; no Debug complaints.
(3) Launch Ngale; Open 2ndMovement_pp1-29Minus5mm+Mo => opens; pp. 1-3 & 29 look OK; no Debug complaints.
(4) Launch Ngale; Open 2ndMovement_pp1-29Minus5mm+Mo => opens; pp. 1-3 & 29 look OK; no Debug complaints.

This suggests there's nothing wrong with m. 181, and the problem is _something_ overflowing at
that point!

-------------------------------------------------------------------------------

22 - 27 July

I'm not comfortable with MoveObjSubobjs(); its way of moving things around within a block of
memory is complex and hard to have confidence in. Rewrite it to move things into their correct
positions in a separate chunk of memory, then copy that block over -- or, better, copy to a
separate chunk, then copy back assuming 'N106' sizes => done (I think). Test W/ 1CourtesyAcc.ngl
=>

	The operation failed because Nightingale has run out of memory (RAM): couldn’t get «0» bytes.
	You can increase Nightingale’s memory allocation with the Finder’s Get Info command.

!!! (1) It's ridiculous that we asked for an amount of memory Ngale couldn't get; (2)
under macOS X, AFAIK, you can't set the amount of memory a program gets; (3) the number
didn't get filled in where the "«0»" is! This is in InstallArg(). #3 is obviously because
the compiled-in guillemet chars are wrong, per the comment "This file was originally
encoded in Macintosh Roman; I converted it to Latin-1 in 2015, and the compiled-in
guillemet chars. look like they got garbled in the process." But what should they be?

	debug. InstallArg: b3 54 68 65   20 6f 70 65   72 61 74 69   6f 6e 20 66
	debug.           : 61 69 6c 65   64 20 62 65   63 61 75 73   65 20 4e 69
	debug.           : 67 68 74 69   6e 67 61 6c   65 20 68 61   73 20 72 75
	debug.           : 6e 20 6f 75   74 20 6f 66   20 6d 65 6d   6f 72 79 20
	debug.           : 28 52 41 4d   29 3a 20 63   6f 75 6c 64   6e d5 74 20
	debug.           : 67 65 74 20   c7 30 c8 20   62 79 74 65   73 2e 0d 0d
	debug.           : 59 6f 75 20   63 61 6e 20   69 6e 63 72   65 61 73 65
	debug.           : 20 4e 69 67   68 74 69 6e   67 61 6c 65   d5 73 20 6d
	debug.           : 65 6d 6f 72   79 20 61 6c   6c 6f 63 61   74 69 6f 6e
	debug.           : 20 77 69 74   68 20 74 68   65 20 46 69   6e 64 65 72
	debug.           : d5 73 20 47   65 74 20 49   6e 66 6f 20   63 6f 6d 6d
	debug.           : 61 6e 64 2e   

In the line after the one beginning with 28, 67 65 74 20 c7 30 c8 20   62 79 74 65 =
"get «0» byte", so "«0»" is c7 30 c8. Ah, c7 and c8 are the guillemets in (ugh)
Macintosh Roman! ...Fixed #3. Change the error message to end with "This is probably due
to a bug in Nightingale; contact AMNF for help." => fixed #2 (though not very well :-| ).

So NewPtr() seems to be unable to get 28 bytes or 1384 bytes, though not consistently;
that makes zero sense. Maybe the error check is wrong?!? We often use GoodNewPtr() to
check success of NewPtr(); it's probably safer (though should be stricter, not less strict).
Try it => no bogus error messages -- and everything works on smallish files (incl.
T+MInCounterpoint.ngl)! Let's see if the new MoveObjSubobjs fixes the "converting large files
crash" bug:

(1) Launch Ngale, open 2ndMovement_pp1-29.ngl => hangs.
(2) Launch Ngale, open 2ndMovement_pp1-29.ngl => crashes into GDB, but GDB window is blank.

:-(

(3) Launch Ngale, open 2ndMovement_pp1-29.ngl => crashes into GDB showing usual line of
ConvertSLUR(), w/ slurL = 395; last log messages:

	debug. ConvertSYNC: syncL=L393 timeStamp=0
	debug. ConvertSYNC: syncL=L394 timeStamp=96

(1) Launch Ngale, open 2ndMovement_pp1-29Minus5mm.ngl => crashes into GDB showing usual line of
ConvertSLUR(), w/ slurL = 395; last log messages:

	debug. ConvertSYNC: syncL=L393 timeStamp=0
	debug. ConvertSYNC: syncL=L394 timeStamp=96

(2) Launch Ngale, open 2ndMovement_pp1-29Minus5mm.ngl => crashes into GDB showing usual section of
ConvertSLUR() but with no highlighting and Variables area blank; same last log messages as above.

(3) Launch Ngale, open 2ndMovement_pp1-29Minus5mm.ngl => crashes into GDB showing usual line of
ConvertSLUR(), w/ slurL = 395; same last log messages as above.

Switching files: (1) Launch Ngale, open 2ndMovement_pp1-29Minus6mm.ngl => opens, & pp. 1-3
look OK -- but while converting the file, gave 3 warnings:

	Warning. •DCheck1NEntries: OBJ L2421 HAS nEntries=15 BUT 22 SUBOBJECTS.
	Warning. •DCheck1NEntries: OBJ L2817 HAS nEntries=15 BUT 16 SUBOBJECTS.
	Warning. •DCheck1NEntries: OBJ L2960 HAS nEntries=15 BUT 21 SUBOBJECTS.

...and Debug Check has 49 complaints: those 3 plus, e.g.:

Warning. *DCheckNode: SUBOBJ IN CLEF L83 staffn 0 IS BAD.
Warning. •DCheckNode: TUPLET L391 HAS BAD SYNC LINK 138.
Warning. *DCheckNode: SUBOBJ IN KEYSIG L2422 staffn 0 IS BAD.
Warning. *DCheckNode: SUBOBJ IN KEYSIG L2961 staffn 0 IS BAD.
Warning. *DCheckTuplets: TUPLET L391 SYNC LINK INCONSISTENT.
Warning. *DCheckContext: FOR STAFF 14 IN CLEF L2421, INCONSISTENT clefType: EXPECTED 3.
Warning. *DCheckContext: clefType FOR STAFF 9 IN MEASURE 115 (L2423) INCONSISTENCY.
Warning. *DCheckContext: clefType FOR STAFF 13 IN MEASURE 115 (L2423) INCONSISTENCY.
Warning. *DCheckContext: clefType FOR STAFF 9 IN MEASURE 117 (L2448) INCONSISTENCY.
Notice. * CautionAdvise alertID=550!
Warning. *DCheckContext: clefType FOR STAFF 13 IN MEASURE 118 (L2458) INCONSISTENCY.
Warning. *DCheckContext: clefType FOR STAFF 9 IN MEASURE 118 (L2458) INCONSISTENCY.
Warning. *DCheckContext: FOR STAFF 13 IN STAFF L2511, INCONSISTENT clefType: EXPECTED 6.
Warning. *DCheckContext: FOR STAFF 9 IN STAFF L2511, INCONSISTENT clefType: EXPECTED 10.
Warning. *DCheckContext: FOR STAFF 14 IN CLEF L2513, INCONSISTENT clefType: EXPECTED 10.
Warning. *DCheckContext: clefType FOR STAFF 13 IN MEASURE 139 (L2962) INCONSISTENCY.
Warning. *DCheckContext: clefType FOR STAFF 13 IN MEASURE 140 (L2968) INCONSISTENCY.
Warning. *DCheckContext: FOR STAFF 14 IN CLEF L3062, INCONSISTENT clefType: EXPECTED 3.

See 3WarningsLog.txt for the whole enchilada.

(2) Launch Ngale, open 2ndMovement_pp1-29Minus6mm.ngl => opens, & pp. 1-3 & 29 look OK; no
warnings during conversion; no Debug complaints.

(3) Launch Ngale, open 2ndMovement_pp1-29Minus6mm.ngl => opens, & pp. 1-3 & 29 look OK; no
warnings during conversion; no Debug complaints.

-------------------------------------------------------------------------------

28 July - 11 Aug.

Since I'm looking for a nasty bug apparently due to memory getting trashed, CODE IS FROZEN
(since 26 July at 9:34 AM).

Cut stuff near end to make a shorter file (27 pp.):
(1) Launch Ngale, open 2ndMovement_pp1-29Minus5mm+Mo.ngl => opens, & pp. 1-3 & last p. look
OK -- but while converting the file, gave 4 warnings:

	Warning. •DCheck1NEntries: OBJ L2124 HAS nEntries=15 BUT 16 SUBOBJECTS.
	Warning. •DCheck1NEntries: OBJ L2422 HAS nEntries=15 BUT 16 SUBOBJECTS.
	Warning. •DCheck1NEntries: OBJ L2817 HAS nEntries=15 BUT 16 SUBOBJECTS.
	Warning. •DCheck1NEntries: OBJ L2961 HAS nEntries=15 BUT 16 SUBOBJECTS.

...and Debug Check has 8 complaints, those 4 plus:

	Warning. *DCheckNode: SUBOBJ IN KEYSIG L389 staffn 0 IS BAD.
	Warning. *DCheckNode: SUBOBJ IN KEYSIG L3257 staffn 0 IS BAD.
	Warning. *DCheckNode: SUBOBJ IN CLEF L3433 staffn 0 IS BAD.
	Warning. *DCheckNode: SUBOBJ IN KEYSIG L3478 staffn 0 IS BAD.

(2) Launch Ngale, open 2ndMovement_pp1-29Minus5mm+Mo.ngl => opens, & pp. 1-3 & last p. look
OK -- but while converting the file, gave 2 warnings:

	Warning. •DCheck1NEntries: OBJ L2202 HAS nEntries=3 BUT 9 SUBOBJECTS.
	Warning. •DCheck1NEntries: OBJ L3477 HAS nEntries=15 BUT 20 SUBOBJECTS.

...and Debug Check has 32 complaints, those 2 plus, e.g.:

	Warning. *DCheckNode: SUBOBJ IN CLEF L1722 staffn 0 IS BAD.
	Warning. *DCheckNode: SUBOBJ IN CLEF L1883 staffn 0 IS BAD.
	Warning. *DCheckNode: SUBOBJ IN KEYSIG L3434 staffn 0 IS BAD.
	Warning. *DCheckContext: clefType FOR STAFF 13 IN MEASURE 109 (L2205) INCONSISTENCY.
	Warning. *DCheckContext: clefType FOR STAFF 7 IN MEASURE 109 (L2205) INCONSISTENCY.
	Warning. *DCheckContext: clefType FOR STAFF 9 IN MEASURE 109 (L2205) INCONSISTENCY.
	Warning. *DCheckContext: clefType FOR STAFF 13 IN MEASURE 110 (L2255) INCONSISTENCY.
	Warning. *DCheckContext: FOR STAFF 13 IN STAFF L2288, INCONSISTENT clefType: EXPECTED 6.

(3) Launch Ngale, open 2ndMovement_pp1-29Minus5mm+Mo.ngl => opens, & pp. 1-3 & last p. look
OK -- but while converting the file, gave one warning:

	Warning. •DCheck1NEntries: OBJ L2961 HAS nEntries=15 BUT 16 SUBOBJECTS.

...and Debug Check has 3 complaints, that one plus:

	Warning. *DCheckNode: SUBOBJ IN KEYSIG L3257 staffn 0 IS BAD.
	Warning. *DCheckNode: SUBOBJ IN KEYSIG L3478 staffn 0 IS BAD.

Cut more near end to make an even shorter file (26 p.):
(1) Launch Ngale, open 2ndMovement_pp1-29Minus5mm26p.ngl => opens; pp. 1-3 & last p. look OK;
Debug Check has no complaints.

(2) Launch Ngale, open 2ndMovement_pp1-29Minus5mm26p.ngl => opens, & last page looks OK --
but while converting the file, gave one warning:

	Warning. •DCheck1NEntries: OBJ L2914 HAS nEntries=3 BUT 5 SUBOBJECTS.

...and trying to display the 1st few pages says "PROGRAM ERROR: BuildBeamDrawTable: couldn't
find an unfinished segment", then "PROGRAM ERROR: NO BEAM ELEMENTS FOR beamL=L120 (DrawBeamset)."

(3) Launch Ngale, open 2ndMovement_pp1-29Minus5mm26p.ngl => opens; pp. 1-3 & last p. look OK;
Debug Check has no complaints.

(4) Launch Ngale, open 2ndMovement_pp1-29Minus5mm26p.ngl => opens; pp. 1-3 & last p. look OK;
Debug Check has no complaints.

Tentative (sic) conclusion: There's a bug in the file-conversion code that leads to corrupting
the object list; the longer the file, the worse it is. Its exact behavior is random (as far as
I know). Since I fixed other bugs in file conversion, it's never been observed with
T+MInCounterpoint.ngl (3 pages, 100K) or anything shorter. 2ndMovement_pp1-29Minus5mm26p.ngl
(26 pp., 664K) opened 4 out of 4 times; 3 out of 4 times, with no complaints during conversion
or from Debug Check Standard Things, and last page & 1-3 look OK... But changes to code other
than file conversion could have caused this!, so and figures below are only for runs since
code freeze.

For all the below, re-launch Ngale for each test.

2ndMovement			Size	Times	opens; pp. 1-3	During			Debug Check St.	Other
file								& last look OK	conversion		complaints
-----------			----	-----	--------------	----------		--------------	-----
pp1-29				764K	1		yes; yes		OK				0				-
"					"		2		no				log ends w/L394	-				shows blank GDB wdw & hangs			
"					"		2		no				log ends w/L394	-				GDB *H
"					"		1		no				log complete	-				hangs
pp1-29Minus5mm		756K	3		no				log ends w/L394	-				GDB *H
"					"		3		no				log ends w/L394	-				GDB *1
pp1-29Minus6mm		752K	2		yes; yes		OK				24, 3			-
"					"		2		yes; yes		3, 2 warns		23, 12			-
pp1-29Minus5mm+Mo	728K	3		yes; yes		4, 2, 1	warns	8, 32, 3		-
pp1-29Minus5mm26p	664K	3		yes; yes		OK				0				-
"					"		1		yes; no			1 warn			(unk)			1 PROGRAM ERROR

2ndMovementCS		348K	1		yes; last NO	OK				7 (+57 legit)	-
"					"		2		yes; yes		1 **1			19 (+57 legit)	-
"					"		1		yes; last NO	1 **1			16 (+57 legit)	-
"					"		1		yes; yes		OK				3 (+57 legit)	-
2ndMovementCSpp1-6	244K	1		yes; p. 1 NO	3 warns			49 (+44 legit)	3 PROGRAM ERRORs (beams)
"					"		1		yes; NO			1 warn			43 (+44 legit)	2 PROGRAM ERRORs (beams)
"					"		1		yes; NO			2 warns			47 (+44 legit)	4 PROGRAM ERRORs (beams)
"					"		1		yes; NO			OK				10 (+44 legit)	beams on p. 6 are a mess
2ndMovementCSpp1-4	172K	1		yes; p. 1 NO	1 warn			22 (+28 legit)	1 PROGRAM ERROR (beams)
"					"		1		yes; p. 1-4 NO	1 warn			23 (+28 legit)	2 PROGRAM ERRORs (beams)
"					"		1		yes; p. 1,4 NO	1 warn			50 (+28 legit)	GDB *1; 6 PROGRAM ERRORs (beams)
2ndMovementCSpp1-3	136K	1		yes; p. 1 NO	OK				12 (+16 legit)	6 PROGRAM ERRORs (beams)
"					"		1		yes; p. 3 NO	OK				19 (+16 legit)	9 PROGRAM ERRORs (beams)
"					"		1		yes; p. 2 NO	1 warn			40 (+16 legit)	8 PROGRAM ERRORs (beams)
T+MInCounterpoint	100K	1		yes; p. 3 NO	OK				4				-
"					"		3		yes; yes		OK				0				-

(after restarting the G5...)
"					"		1		yes; yes		OK				0				-
2ndMovementCSpp1-3	136K	1		yes; p. 1,2 NO	OK				3 (+16 legit)	4 PROGRAM ERRORs (beams)
"					"		1		yes; p. 1-3 NO	OK				23 (+16 legit)	>=6 PROGRAM ERRORs (beams)
T+MInCounterpoint	100K	2		yes; yes		OK				0				-
2ndMovementCSpp1-2	100K	2		yes; yes		OK				0 (+4 legit)	-
"					"		1		yes; yes		OK				5 (+4 legit)	TIMESIG L274 staff 1 has numerator 0
2ndMovementCSpp1-3	136K	2		yes; p. 2,3 NO	1 (L1017)		40 (+16 legit)	5 PROGRAM ERRORs (beams)
"					"		1		yes; p. 3 NO	OK				9 (+16 legit)	4 PROGRAM ERRORs (beams)

"GDB *H" = shows GDB window highlighting line "SlurFILLER(slurL) = 0;" in ConvertSLUR(), with
slurL = 395. "GDB *1" = same except no highlighted line and upper panes blank.

"**1": Each of the three times, the warning during conversion was:

		Warning. •DCheck1NEntries: OBJ L3444 HAS nEntries=7 BUT 8 SUBOBJECTS.

	L3444 is a tuplet. However, Debug Check found that problem only once; that implies that
	it was somehow repaired the other two times before the file opened! Is that lead worth
	pursuing?

So a 3-page, 136K file is enough to catch The Bug: in 8 tries, it opened every time, but
with something wrong with the object list every time, and the corruption in the obj list
involved beams every time!

Revised tentative conclusion: There's a bug in the file-conversion code that leads to
corrupting the object list; it tends to be worse with longer files, but the correlation
doesn't seem very strong. Its exact behavior looks pretty random. Since ca. 20 June, it's
been observed only once out of at least 8 tries, and since code freeze, once of 6 tries,
with T+MInCounterpoint.ngl (3 pages, 100K). But with 2ndMovementCSpp1-3 (136K), it occurred
8 out of 8 tries; with longer versions of 2ndMovement, most of the time. Versions of
2ndMovement of 244K or less always opened, with problems involving beams every time (14 of
14)! Larger versions of 2ndMovement through pp1-29Minus6mm (752K) opened 16 of 16 times, but
with error messages every time but once. Still larger versions (756K & 764K) have such serious
problems they opened only once of 12 tries.

Strategy: maybe look for where beams get corrupted w/ 2ndMovementCSpp1-3? NB it'd be easiest
to pin down the problem if it's detected during conversion. Ngale warned of problems during
conversion of this file 3 of 8 times: not consistently but enough to be useful. However,
adding debugging code might affect that :-| . Can I learn more w/o changing the code? Hold
down shift+control to show full detail & open 2ndMovementCSpp1-3:

2ndMovementCSpp1-3	136K	1		yes; p. 3 NO	OK		15 (+16 legit)	2 PROGRAM ERRORs (beams), then GDB
2ndMovementCSpp1-3	136K	1		yes; p. 1-3 NO	OK		29 (+16 legit)	4 PROGRAM ERRORs (beams)

In 10 tries now, 2ndMovementCS opened every time, but with corruption in the obj list
involving beams every time! Distill log w/ no detail => CSpp1-3Log.txt, w/ detail =>
CS_3ppL+DETAIL_Log.txt. Compare => sure, some additional info; nothing obviously helpful,
but maybe later.

-------------------------------------------------------------------------------

12 - 18 Aug.

2ndMovementCS opens every time, but with corruption in the object list involving beams every
time; however, the corruption isn't detected during conversion. Why? Is the corruption
happening later, or are we just not checking for it during conversion? The drawing code logs
messages like this (from CS_3ppL+DETAIL_Log.txt):

	ERROR. PROGRAM ERROR: BuildBeamDrawTable: couldn't find an unfinished segment.
	Warning. * StopInform alertID=464
	Warning. BuildBeamDrawTable: couldn't find an unfinished segment.
	ERROR. NO BEAM ELEMENTS FOR beamL=L1004.  (DrawBEAMSET)
	ERROR. PROGRAM ERROR: NO BEAM ELEMENTS FOR beamL=L1004.  (DrawBEAMSET)

Debug Check says, e.g.:

	Warning. *DCheckNode: SUBOBJ IN TIMESIG L258 staffn 1 HAS BAD TIMESIG numerator 0.
	Warning. *DCheckNode: BEAMSET L961 HAS BAD startend SEQUENCE.
	Warning. •DCheck1NEntries: OBJ L1004 HAS nEntries=4 BUT 3 SUBOBJECTS.
	Warning. *DCheckNode: BEAMSET L1004 HAS BAD startend SEQUENCE.
	Warning. *DCheckNode: BEAMSET L1092 HAS BAD startend SEQUENCE.
	Warning. *DCheckBeams: BEAMSET L877 SYNC LINK INCONSISTENT.
	Warning. *DCheckBeams: BEAMED NOTE IN SYNC L880 (MEASURE 66) VOICE 3 NOT IN VOICE'S LAST BEAMSET.

UNFREEZE (temporary?): Make minor changes to Beam.cp to give more information; launch Ngale; test:

2ndMovement			Size	Times	opens; pp. 1-3	Conversion:		Debug Check St.	Other
file								look OK			warns & log		complaints
-----------			----	-----	--------------	----------		--------------	-----
2ndMovementCSpp1-3	136K	1		yes; p. 2,3 NO	OK				5 (+16 legit)	4 PROGRAM ERRORs (beams)
"					"		1		yes; p. 1,2 NO	OK				18 (+16 legit)	3 PROGRAM ERRORs (beams)
"					"		1		yes; p. 1,2 NO	OK				17 (+16 legit)	3 PROGRAM ERRORs (beams)
"					"		1		no				1; log complete	-				GDB *2	

Hooray! The Bug is still showing consistently, and with more-or-less the same symptoms!

	ERROR. PROGRAM ERROR: Bad startend sequence at L63: couldn't find an unfinished segment. (BuildBeamDrawTable)
	Warning. * StopInform alertID=464
	Warning. Bad startend sequence at L63: couldn't find an unfinished segment. (BuildBeamDrawTable)
	ERROR. PROGRAM ERROR: NO BEAM ELEMENTS FOR beamL=L63.  (DrawBEAMSET)

Debug Check says, e.g.:

	Warning. *DCheckNode: SUBOBJ IN TIMESIG L10 staffn 0 IS BAD.
	Warning. *DCheckNode: BEAMSET L63 HAS BAD startend SEQUENCE.
	--- last message repeated 4 times ---
	Warning. *DCheckNode: BEAMSET L316 HAS BAD startend SEQUENCE.
	--- last message repeated 3 times ---
	Warning. *DCheckNode: BEAMSET L399 HAS BAD startend SEQUENCE.
	--- last message repeated 2 times ---
	Warning. *DCheckContext: TIMESIG FOR STAFF 3 IN MEASURE 1 (L11) INCONSISTENCY.

GDB *2: Crashes w/ GDB window highlighting line "if (SyncTYPE(pL)) {" in FindMainNote(), with
pL = 52416 (which is way larger than makes sense; TAIL of Master Page is 1226!). Log contains

	Warning. •DCheck1NEntries: OBJ L1079 HAS nEntries=4 BUT 3 SUBOBJECTS.
	debug. ConvertBEAMSET: beamsetL=L1079

...so again a problem with beams. NB the only object-list checking during conversion is in
DebugConversion(), which just calls DCheck1NEntries(); checking more, e.g., with
DCheckNode() -- which calls DCheck1NEntries -- might well provide more useful information
as long as it doesn't make The Bug go into hiding!... and assuming enough of the Document
environment is set up for it to work; is it? No. Or at least it's not obvious it is: I get
messages like

	Warning. •DCheckNode: SYSTEM L4 HAS INCONSISTENT RIGHT SYSTEM LINK L0.
	Warning. *DCheckNode: SYSTEM L4 HAS GARBAGE systemRect.
	
...and Ngale crashes. ?? For the moment, at least, let's go back to DCheck1NEntries.

Change DCheckNode code for "BAD startend SEQUENCE" to give a bit more info and not give the
same message multiple times; is The Bug still visible? Yes! :-)

2ndMovementCSpp1-3	136K	1		yes; p. 1-3 NO	OK				16 (+16 legit)	6 PROGRAM ERRORs (beams)
"					"		1		yes, p. 2,3 NO	1 warn *A		37 (+16 legit)	5 PROGRAM ERRORs (beams)
"					"		1		yes; p. 2,3 NO	OK				14 (+16 legit)	2 PROGRAM ERRORs (beams)
"					"		1		yes; p. 1,2 NO	OK				9  (+16 legit)	1 PROGRAM ERROR (beams)

*A: "Warning. •DCheck1NEntries: OBJ L1017 HAS nEntries=4 BUT 3 SUBOBJECTS." Object L1017 is a Beamset.

NB Pages that "look OK" is based partly on visual inspection. It and "nn PROGRAM ERRORs" may
both be too optimistic.

Made changes to mere comments in MiscUtils.cp; I'm pretty sure I didn't inadvertently change
code, but just in case, verify that 2ndMovementCSpp1-3.ngl still behaves the same:

2ndMovement			Size	Times	opens; pp. 1-3	Conversion:		Debug Check St.	Other
file								look OK			warns & log		complaints
-----------			----	-----	--------------	----------		--------------	-----
2ndMovementCSpp1-3	136K	1		yes; NO			?				9 (+16 legit)	several PROGRAM ERRORs (beams)
"					"		1		yes; NO *B		?				34 (+16 legit)	-

*B: Several Beamsets are obviously bad, though Nale's error checking didn't catch it. In every
case it looks like everything is OK except that one or more of the <bpSync>s is much too small,
i.e., since the file was just read in and LINKs are monotonic, it points to a note far before
the Beamset. It wouldn't be hard to add checking for that, probably in DCheckBeams(); would
that be worthwhile? Probably -- if it doesn't make The Bug go into hiding! But DCheckBeams
is already checking for bpSyncs not in the same system as the owning Beams; why aren't I
getting complaints about that??

Add display of Beamset link and each bpSync to log; open 2ndMovementCSpp1-3.ngl => Beamsets
L961 and 1023 obviously contain bpSyncs on previous pages. Debug Check doesn't detect that,
but for 961 (on p. 3, on staff 3), it shows bpSyncs are 967, 968, 969, 970, 974, which is correct,
and Debug Display Full agrees; but Browser says they're 967, 968, 969, 970 (all OK), and 206
(on p. 1)!!!! -- and DrawBEAMSET seems to agree. How is that discrepancy possible??

According to Browser, 961's subobj links are 457, 458, 459, 460, 461.

Add code to DCheckBeams to show more about link 961, recompile, relaunch.

2ndMovementCSpp1-3	136K	1		no				OK				-				GDB *2
"					"		1		yes; p. 1,2 NO	OK				5 (+16 legit)	no PROGRAM ERRORs but pblms in 5 beams *3
"							4		no				OK				-				hangs w/ no visible indication *4

*2: crashes into GDB no highlighted with all panes blank.

*3: Debug Check complaints about beams:

	Warning. *DCheckNode: BEAMSET L192 HAS BAD startend SEQUENCE (2).
	Warning. *DCheckNode: BEAMSET L229 HAS BAD startend SEQUENCE (1).
	Warning. *DCheckNode: BEAMSET L429 HAS BAD startend SEQUENCE (1).
	Warning. *DCheckBeams: BEAMSET L702 SYNC LINK INCONSISTENT.
	Warning. *DCheckBeams: BEAMED NOTE IN SYNC L706 (MEASURE 58) VOICE 2 NOT IN VOICE'S LAST BEAMSET.

*4: The last log message each time:

	debug. ****** WORKING SLOWLY! DELAYING EACH TIME THRU LOOP TO AID DEBUGGING.  (ConvertObjSubobjs) ******

Four times in a row doing this? Bizarre! Reboot => same result :-( . Well, the last code
changes were to Beam.cp, DebugUtils.cp, & FileConversion.cp on Aug 17 at 16:25 and 16:26;
this behavior started at Aug 17 16:29:39, almost certainly cause and effect. Revert Beam.cp
=> no change. The obviously-questionable change to FileConversion.cp is a call to
DCheckBeams() in DebugConversion(); remove that => back to 2ndMovementCSpp1-3 opening w/
damaged Beamsets! Un-revert Beam.cp => likewise. So the call to DCheckBeams was the problem. (BUT
I was calling it for all objects, beam or not!! Duh...  --DAB, 29 Aug.)

2ndMovementCSpp1-3	136K	1		yes; NO			OK				?				PROGRAM ERRORs (beams) & GDB *5
"					"		1		yes; NO			OK				?				Draws part of music & GDB *5  
"					"		1		yes; NO			OK				5 (+16 legit)	PROGRAM ERROR (beams) & GDB *5
"					"		1		yes; p. 1,2 NO	OK				9 (+16 legit)	3 PROGRAM ERRORs (beams)

*5: Crashes w/ GDB window highlighting line "if (SyncTYPE(pL)) {" in FindMainNote() called from
DrawBEAMSET, with pL = 13856, then 52416, then 54400 (all way larger than makes sense). NB:
The same thing with pL = 52416 has happened before!

It'd really help to know when the Beamsets are getting clobbered! DebugConversion() would be a
good place to check. Calling DCheckBeams there as is is useless, but how about a stripped-down
version? NB: The problems are entirely or almost entirely because the Beamset objects are
getting trashed, not the <beamed> flags of notes!

-------------------------------------------------------------------------------

20 - 26 August

Make tiny change to DCheckNode().

2ndMovement			Size	Times	opens; pp. 1-3	Conversion:		Debug Check St.	Other
file								look OK			warns & log		complaints
-----------			----	-----	--------------	----------		--------------	-----
2ndMovementCSpp1-3	136K	1		yes; NO			?				?				Draws part of music & GDB *6
"					"		1		yes; NO			OK				31 (+16 legit)	PROGRAM ERROR (DrawBEAMSET) *7
"					"		1		yes; NO			OK				8 (+16)			no PROGRAM ERRORs but pblms in 3 beams *8
"					"		1		yes; NO			OK				3 (+15!)		no PROGRAM ERRORs but pblms in 1 beam


*6: Crashes w/ GDB window highlighting line "if (SyncTYPE(pL)) {" in FindMainNote() called from
DrawBEAMSET, with pL = 52400 (again way larger than makes sense), voice 4.

*7: Just one wrong value in simple Beamset 218 (2 notes); more of a mess in the more complex 645 (5 notes).

	Warning. *DCheckNode: BEAMSET L218 HAS BAD startend SEQUENCE (end).
	Warning. •DCheck1NEntries: OBJ L645 HAS nEntries=5 BUT 3 SUBOBJECTS.
	Warning. *DCheckNode: BEAMSET L645 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeams: BEAMSET L645 SYNC LINK INCONSISTENT.
	...
	Warning. *DCheckBeams: BEAMED NOTE IN SYNC L647 (MEASURE 55) VOICE 1 NOT IN VOICE'S LAST BEAMSET.
	...
	
	info.  217 L218 xd=0 yd=0 BEAMSET .V.... oRect.l=p0 stf=2 v=2 n=2
	info.      bpSync=L220 startend=1 fracs=0 R
	info.      bpSync=L221 startend=0 fracs=0 L
	Warning. *DCheckNode: BEAMSET L218 HAS BAD startend SEQUENCE (end).
	info.  218 L219 xd=0 yd=0 BEAMSET .V.... oRect.l=p480 stf=3 v=3 n=2
	info.      ...
	info.  219 L220 xd=72 yd=0 SYNC .V.V.. oRect.l=p480 TS=0 LT=0 n=4
	info.      stf=2 v=2 xd=0 yd=216 ystm=48 yqpit=10 ldur=5 .s=0 acc=0 onV=75 .V.. .B.. ... 1stMod=0
	info.      ...
	info.  220 L221 xd=258 yd=0 SYNC .V.V.. oRect.l=p498 TS=240 LT=240 n=2
	info.      stf=2 v=2 xd=0 yd=216 ystm=48 yqpit=10 ldur=5 .s=0 acc=0 onV=75 .V.. .B.. ... 1stMod=0
	info.      ...

The only problem in L218 is the 2nd subobj should have startend = -1, not 0. In 645, consecutive
bpSyncs are 646 (correct), 121, 122, 3, 14 (all nonsense) -- and it has only 3 subobjs!?

*8: One of the problem beams is again L961.

Open 2ndMovementCSpp1-3.ngl four more times => 1 no problem; 1 beams visibly wrong but no complaints;
2 beams visibly wrong and "PROGRAM ERROR"s involving beams.

Strategy options:

(1) See if The Bug shows up consistently with a smaller file. Cut the last 1/2 page =>
2ndMovementCSpp1-2p5.ngl, test:

2ndMovement			Size	Times	opens; pp. 1-3	Conversion:		Debug Check St.	Other
file								look OK			warns & log		complaints
-----------			----	-----	--------------	----------		--------------	-----
2ndMovementCSpp1-2p5 120K	1		yes; yes		OK				0 (+12 legit)	-
"					"		1		yes; yes		OK				6 (+12 legit)	Timesig problem
"					"		1		yes; yes		OK				0 (+12 legit)	-
"					"		1		yes; yes		OK				4 (+12 legit)	Timesig problem
"					"		1		yes; yes		OK				2 (+12 legit)	Timesig problem

Nope; no Bug shows up consistently. But it's interesting that what _did_ show up 3 out of
5 times was a problem with time signatures, not beams!!

(2) Set relevant memory (mostly heaps) to zero or another known value and see what happens.
ExpandFreeList() calls Apple's SetHandleSize; unfortunately there doesn't seem to be a
version of SetHandleSize analogous to NewPtrClear, so I'll have to set the newly-allocated
bytes of the block myself. (Is SetHandleSize guaranteed to leave the pre-existing bytes of
the block alone?? It sure looks like Ngale assumes that, but it'd be nice to see it in
black-and-white!)

(3) Try to pin down when the Beamsets are getting clobbered! DebugConversion() would be an
excellent place to check. Calling DCheckBeams there just makes Ngale hang, but how about a
stripped-down version? BUT I was calling it for every object regardless of whether it was
a beam!!! $%*^&(()#E^*(%  So how about just calling it for actual Beamsets??  

23 Aug., 8:51-9:00: check my latest minor code changes haven't made The Bug hide:
2ndMovementCSpp1-3	136K	1		yes; yes		OK				0 (+16 legit)	-
"					"		1		yes; NO			1 *9			37 (+16 legit)	PROGRAM ERRORs (4 BEAMSETs)
"					"		1		yes; NO			OK				17 (+16 legit)	PROGRAM ERRORs (3 BEAMSETs)

*9:	Warning. •DCheck1NEntries: OBJ L1017 HAS nEntries=4 BUT 3 SUBOBJECTS.

They haven't.

25 Aug., AM: Working on strategy #2, add code to ExpandFreeList() to dump part of the new area
of expanded heaps; display a bit more in ReadSubHeaps(). Is Bug still visible?

2ndMovementCSpp1-3	136K	1		yes; NO			OK				31 (+16 legit)	PROGRAM ERRORs (1 BEAMSET) *10
"					"		1		yes; NO			OK				3 (+16 legit)	PROGRAM ERRORs (3 BEAMSETs)
"					"		1		yes; NO			OK				31 (+16 legit)	PROGRAM ERRORs (1 BEAMSET) *10

*10: The PROGRAM ERROR is in the simple Beamset 218 (2 notes); we've seen a problem with L218 before!

Yes, it is.

-------------------------------------------------------------------------------

26 - 30 Aug.

Ready to try strategy #2. In ExpandFreeList(), after the call to SetHandleSize, we set <p>
to point to the start of memory for the first added object. Add something like this:

	#define INIT_VALUE 0xAF		/* or other 8-bit value */
	
	for (q = p; q<??; q++) (char *)q = INIT_VALUE;

...or do the same thing with a call to FillMem().

Do preparatory code cleanup in MiscUtils.c, Utility.c, Heaps. Open 2ndMovementCSpp1-3 => The Bug?
1. Debug Check finds problems in 3 Beamsets & 2 Timesigs
2. Beams don't look OK; PROGRAM ERROR (1 BEAMSET) & Debug Check complaints about Beamsets & Timesigs
3. Beams don't look OK; Debug Check complaints about Beamsets & Timesigs

Yes, still visible.

Ca. 5 PM, 27 Aug.: More cleanup in AutoBeam.c, MiscUtils.c.

Open 2ndMovementCSpp1-3 => The Bug?

1. Everything looks OK; Debug Check has no complaints (except the legitimate 16). No signs of Bug.
2. Beams don't look OK; Debug Check complaints about 3 Beamsets
3. Beams don't look OK; PROGRAM ERROR (1 BEAMSET) & Debug Check complaints about Beamsets
4. Beams don't look OK; PROGRAM ERROR (3 BEAMSET) & Debug Check complaints about Beamsets & Timesigs

Yes, still visible.

------------------------------------------------------------------------------- (sic?)

30 Aug. - 6 Sept.

Well, strategy #2 is turning out to be very messy, and #3 is more promising now that I see an
obvious and easily-fixed cause for the hangs! So add to DebugConversion 

	if (BeamsetTYPE(pL)) DCheckBeams(doc, pL);

Open 2ndMovementCSpp1-3 => hangs; remove that line from DebugConversion => goes back to The
Bug :-( . $#%*@!#(*!@!@$(  The 2nd argument to DCheckBeams isn't a LINK; DCheckBeams checks
the entire object list for problems with beams! So pull new function DCheckBeamset, to later
be called directly by DebugConversion, out of DCheckBeams => OK; The Bug is still visible in 3
out of 3 tries (and it popped up in Beamset L218 of 2ndMovementCSpp1-3 again in one!).

Hmmm. Debug Check for the last run begins:

	*DCheckNode: BEAMSET L445 HAS BAD startend SEQUENCE (end).
	*DCheckNode: BEAMSET L489 HAS BAD startend SEQUENCE (mid).
	•DCheckNode: BEAMSET L501 HAS A BAD SYNC LINK.
	•DCheck1NEntries: OBJ L645 HAS nEntries=5 BUT 3 SUBOBJECTS.
	*DCheckNode: BEAMSET L645 HAS BAD startend SEQUENCE (end).
	*DCheckNode: BEAMSET L1023 HAS BAD startend SEQUENCE (end).
	*DCheckBeamset: BEAMSET L12 ISN'T THE 2ND PIECE OF A CROSS-SYS BEAM.
	*DCheckBeams: BEAMED NOTE IN SYNC L14 (MEASURE 1) VOICE 4 WITHOUT BEAMSET.
	*DCheckBeams: BEAMED NOTE IN SYNC L15 (MEASURE 1) VOICE 4 WITHOUT BEAMSET.
	*DCheckBeams: BEAMED NOTE IN SYNC L17 (MEASURE 1) VOICE 4 WITHOUT BEAMSET.

Recently I'm getting huge numbers of "BEAMED NOTE...WITHOUT BEAMSET" messages. 
These are bogus because those notes _are_ in a Beamset, and the Beamset (L11 for Syncs L14 and
15, L16 for L17) is drawn correctly! Huh?

Open Mozart_Andante_2Fl_DMaj.ngl => it behaves the same way: 3 out of 3 times, lots of problems
with Beamsets, both object-list problems we detect and problems drawing them w/ no detected
problems! It's 112K and 1321 objects, vs. 136K and 1220 for 2ndMovementCSpp1-3.ngl, so about
the same size.

Make DCheckBeamset() public; open Mozart_Andante_2Fl_DMaj once and 2ndMovementCSpp1-3 once
=> Bug unchanged. Call DCheckBeamset directly from DebugConversion; open 2ndMovementCSpp1-3
=> hangs, just as before when I was nonsensically calling DCheckBeams for every LINK!!
Last lines in the log (2x):

	debug. ConvertTIMESIG: timeSigL=L10 inMeasure=0
	debug. ConvertMEASURE: measL=L11 lMeasure=L0 rMeasure=L19 systemL=L4

Is the next object, L12, a Beamset? Yes. Ah: DCheckBeamset is using LSSearch(), which assumes
cross-links are valid; it needs to do an unoptimized search. Change that => no hang, but
Debug Check has hundreds and hundreds of bogus errors! It's still assuming Syncs in the Beamset
are valid. That's not justified during ConvertObjects(), so make DCheckBeamset more careful!
Tell it if we're in the middle of opening a file; if so, don't check fields of Syncs in the
Beamset, but do check the Sync LINKs are greater than the Beamset LINK and monotonically
increasing. Open 2ndMovementCSpp1-3.ngl 4x => it finds problems 2 out of 4 times! E.g.:

	debug. ConvertSYNC: syncL=L96 timeStamp=900
	debug. ConvertMEASURE: measL=L97 lMeasure=L87 rMeasure=L110 systemL=L76
	Warning. *DCheckBeamset: BEAMSET L98 SYNC L32 LINK DOESN'T FOLLOW BEAMSET.
	Warning. *DCheckBeamset: BEAMSET L98 SYNC L33 LINK DOESN'T FOLLOW BEAMSET.
	debug. ConvertBEAMSET: beamsetL=L98
	
After fiddling around, it crashes into GDB, showing FindMainNote(), which we've seen before.

So the Beamset object is already screwed up when it's converted, QED, pant pant... But looking
at that Beamset with Browser, the bpSyncs are OK!?! Sigh.

OK, well, DCheckBeamset _could_ also check the startend sequence. Make it do that; open
2ndMovementCSpp1-3 four times => Bug unchanged. A typical Debug Check now begins:

	Warning. *DCheckNode: SUBOBJ IN TIMESIG L51 staffn 0 IS BAD.
	Warning. *DCheckBeamset: BEAMSET L218 HAS BAD startend SEQUENCE (end).
	Warning. •DCheck1NEntries: OBJ L645 HAS nEntries=5 BUT 3 SUBOBJECTS.
	Warning. *DCheckBeamset: BEAMSET L645 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L645 SYNC LINK INCONSISTENT.
	Sep  7 08:44:16: --- last message repeated 1 time ---
	Warning. *DCheckBeamset: BEAMSET L218 HAS BAD startend SEQUENCE (end).
	ep  7 08:44:16 DonDualG5 Ngale[49155]: Warning. *DCheckBeamset: BEAMSET L645 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L645 SYNC LINK INCONSISTENT.
	Sep  7 08:44:16: --- last message repeated 1 time ---
	Warning. *DCheckBeams: BEAMED NOTE IN SYNC L647 (MEASURE 55) VOICE 1 NOT IN VOICE'S LAST BEAMSET.
	Warning. *DCheckBeams: BEAMED NOTE IN SYNC L648 (MEASURE 55) VOICE 1 NOT IN VOICE'S LAST BEAMSET.
	Warning. *DCheckBeams: BEAMED NOTE IN SYNC L649 (MEASURE 55) VOICE 1 NOT IN VOICE'S LAST BEAMSET.
	Warning. *DCheckBeams: BEAMED NOTE IN SYNC L651 (MEASURE 56) VOICE 1 NOT IN VOICE'S LAST BEAMSET.
	Warning. *DCheckContext: TIMESIG FOR STAFF 1 IN MEASURE 7 (L62) INCONSISTENCY.
	Warning. *DCheckContext: TIMESIG FOR STAFF 1 IN MEASURE 8 (L75) INCONSISTENCY.

---------------------------------------------------------------------------------------

8 - 13 Sept.

DebugConversion() now includes the statement

		if (BeamsetTYPE(pL)) (void)DCheckBeamset(doc, pL, False, True, &lastSyncL);

DCheckBeamset is also called by Debug Check, and it checks for startend sequence errors (among
other things). Open 2ndMovementCSpp1-3 => Bug unchanged, and no warnings about Beamset problems
or anything else from DebugConversion!

But I can also call DCheckBeamset directly for _every_ Beamset at the end of ConvertObjSubobj!
Do that => typical results:

	...
	debug. ConvertMEASURE: measL=L1219 lMeasure=L1197 rMeasure=L0 systemL=L1128
	debug. ConvertObject: pL=1220 is TAIL.
	Warning. *DCheckBeamset: BEAMSET L341 HAS BAD startend SEQUENCE (mid).
	Warning. *DCheckBeamset: BEAMSET L377 HAS BAD startend SEQUENCE (end).
	Warning. •DCheckBeamset: BEAMSET L387 HAS A BAD SYNC LINK.
	Warning. *DCheckBeamset: BEAMSET L387 SYNC L139 LINK DOESN'T FOLLOW BEAMSET.
	Warning. *DCheckBeamset: BEAMSET L474 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L545 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L849 SYNC L86 LINK DOESN'T FOLLOW BEAMSET.
	Warning. *DCheckBeamset: BEAMSET L951 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L1214 HAS BAD startend SEQUENCE (end).
	debug. ****** WORKING SLOWLY! DELAYING EACH TIME THRU LOOP TO AID DEBUGGING.  (ConvertObjSubobjs) ******
	debug. ConvertHEADER: headL=L1221
	debug. ConvertPAGE: pageL=L1222 lPage=L0 rPage=L0 sheetNum=0
	debug. ConvertSYSTEM: sysL=L1223 type=5 xd=288 sel=0 vis=1
	debug. ConvertSTAFF: staffL=L1224 nEntries=4 lStaff=L0 rStaff=L0 StaffSYS=L1223
	debug. ConvertCONNECT: connectL=L1225
	debug. ConvertObject: pL=1226 is TAIL.
	Warning. *DCheckBeamset: BEAMSET L341 HAS BAD startend SEQUENCE (mid).
	Warning. *DCheckBeamset: BEAMSET L377 HAS BAD startend SEQUENCE (end).
	Warning. •DCheckBeamset: BEAMSET L387 HAS A BAD SYNC LINK.
	Warning. *DCheckBeamset: BEAMSET L387 SYNC L139 LINK DOESN'T FOLLOW BEAMSET.
	Warning. *DCheckBeamset: BEAMSET L474 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L545 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L849 SYNC L86 LINK DOESN'T FOLLOW BEAMSET.
	Warning. *DCheckBeamset: BEAMSET L951 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L1214 HAS BAD startend SEQUENCE (end).
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	ERROR. PROGRAM ERROR: NO BEAM SEGMENTS FOR beamL=L1214.  (DrawBEAMSET)
	Warning. * StopInform alertID=464
	Warning. NO BEAM SEGMENTS FOR beamL=L1214.  (DrawBEAMSET)
	Notice. Opened file '2ndMovementCSpp1-3.ngl'.  (DoFileMenu)
	debug. DrawToolPalette: MemBitCount(palPortBits, 1000)=970 portRect tlbr=0,0,399,271
	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	debug. DCheckBeamsetL218: staff=2 Beamset=L218 Sync=L220
	debug. DCheckBeamsetL218: staff=2 Beamset=L218 Sync=L221
	Warning. *DCheckBeamset: BEAMSET L341 HAS BAD startend SEQUENCE (mid).
	Warning. *DCheckBeamset: BEAMSET L377 HAS BAD startend SEQUENCE (end).
	Warning. •DCheckBeamset: BEAMSET L387 HAS A BAD SYNC LINK.
	Warning. *DCheckBeamset: BEAMSET L387 SYNC LINK INCONSISTENT.
	Warning. •DCheck1NEntries: OBJ L474 HAS nEntries=2 BUT 1 SUBOBJECTS.
	Warning. *DCheckBeamset: BEAMSET L474 HAS BAD startend SEQUENCE (end).
	
So it appears there are no problems with Beamsets while converting objects until we reach
TAIL; then there are instantly problems all over the place! But need to double-check this.
Print out more... No, that's wrong!!! I'm really not calling DCheckBeamset at all until
TAIL because in all other cases I "continue" the loop after processing the object. Need
to carefully put call to DCheckBeamset in the right place => done. And in 1st test w/
2ndMovementCSpp1-3.ngl, it finds problems during conversion, which really makes sense!
The 1st few problems reported:

debug. ConvertSLUR: slurL=L945 staff=3 voice=3 tie=0
Warning. *DCheckBeamset: BEAMSET L105 HAS BAD startend SEQUENCE (end).
debug. ConvertObjSubobjs: DCheckBeamset found a problem with qL=L105 pL=946.
debug. ConvertSYNC: syncL=L946 timeStamp=0

debug. ConvertSLUR: slurL=L953 staff=2 voice=2 tie=0
Warning. *DCheckBeamset: BEAMSET L186 HAS BAD startend SEQUENCE (end).
debug. ConvertObjSubobjs: DCheckBeamset found a problem with qL=L186 pL=954.
debug. ConvertSYNC: syncL=L954 timeStamp=480

debug. ConvertSLUR: slurL=L966 staff=3 voice=3 tie=0
Warning. •DCheckBeamset: BEAMSET L346 HAS A BAD SYNC LINK.
Warning. *DCheckBeamset: BEAMSET L346 SYNC L92 LINK DOESN'T FOLLOW BEAMSET.
debug. ConvertObjSubobjs: DCheckBeamset found a problem with qL=L346 pL=967.
debug. ConvertSYNC: syncL=L967 timeStamp=0

debug. ConvertSLUR: slurL=L973 staff=2 voice=2 tie=0
Warning. *DCheckBeamset: BEAMSET L419 HAS BAD startend SEQUENCE (mid).
debug. ConvertObjSubobjs: DCheckBeamset found a problem with qL=L419 pL=974.
debug. ConvertSYNC: syncL=L974 timeStamp=240

debug. ConvertSLUR: slurL=L997 staff=1 voice=1 tie=0
Warning. *DCheckBeamset: BEAMSET L734 HAS BAD startend SEQUENCE (mid).
debug. ConvertObjSubobjs: DCheckBeamset found a problem with qL=L734 pL=998.
debug. ConvertSYNC: syncL=L998 timeStamp=0

!! In every case, the corrupt Beamset is first detected just after converting a Slur and
just before converting a Sync. The latter is probably irrelevant, but the former...!

Add two calls to DCheckBeamset in ConvertSLUR and try again. The 1st few problems reported:

Sep 14 15:20:50 DonDualG5 Ngale[4799]:
	Warning. *DCheckBeamset: BEAMSET L104 HAS BAD startend SEQUENCE (mid).
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L104 slurL=933.
	debug. ConvertSLUR: slurL=L933 staff=1 voice=1 tie=0
	
	Warning. *DCheckBeamset: BEAMSET L218 HAS BAD startend SEQUENCE (end).
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L218 slurL=945.
	debug. ConvertSLUR: slurL=L945 staff=3 voice=3 tie=0
	
	Warning. *DCheckBeamset: BEAMSET L330 HAS BAD startend SEQUENCE (mid).
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L330 slurL=953.
	debug. ConvertSLUR: slurL=L953 staff=2 voice=2 tie=0
	
	Warning. •DCheckBeamset: BEAMSET L453 HAS A BAD SYNC LINK.
	Warning. *DCheckBeamset: BEAMSET L453 SYNC L199 LINK DOESN'T FOLLOW BEAMSET.
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L453 slurL=966.
	debug. ConvertSLUR: slurL=L966 staff=3 voice=3 tie=0

OK, but there are very few messages from "ConvertSLUR1" and far more from "ConvertSLUR2".
Does this make sense? Am I _sure_ ConvertSLUR is causing the problem?

---------------------------------------------------------------------------------------

14 - 24 Sept.

Remove loop to call DCheckBeamset for all Beamsets for every object in ConvertObjSubobj,
so that loop is only at beginning and near end of ConvertSLUR; open 2ndMovementCSpp1-3.ngl
=> the 1st occurrences of problem Beamsets (from CSpp1-3Log10.txt):

Sep 18 14:47:16 DonDualG5 Ngale[191]:
	Warning. *DCheckBeamset: BEAMSET L12 HAS BAD startend SEQUENCE (end).
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L12 slurL=913.
	
	Warning. *DCheckBeamset: BEAMSET L208 HAS BAD startend SEQUENCE (mid).
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L208 slurL=933.
	
	Warning. *DCheckBeamset: BEAMSET L360 HAS BAD startend SEQUENCE (end).
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L360 slurL=945.
	
	Warning. *DCheckBeamset: BEAMSET L436 HAS BAD startend SEQUENCE (end).
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L436 slurL=953.

Open it again =>  the 1st occurrences of problem Beamsets, with context (from CSpp1-3Log10.txt):

	Warning. *DCheckBeamset: BEAMSET L218 HAS BAD startend SEQUENCE (end).
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L218 slurL=689.
	debug. ConvertSLUR: slurL=L689 staff=2 voice=2 tie=0
	
	Warning. *DCheckBeamset: BEAMSET L218 HAS BAD startend SEQUENCE (end).
	debug. ConvertSLUR1: DCheckBeamset found a problem with qL=L218 slurL=723.
	Warning. *DCheckBeamset: BEAMSET L218 HAS BAD startend SEQUENCE (end).
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L218 slurL=723.
	Warning. *DCheckBeamset: BEAMSET L645 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L645 SYNC L121 LINK DOESN'T FOLLOW BEAMSET.
	Warning. *DCheckBeamset: BEAMSET L645 SYNC L122 LINK DOESN'T FOLLOW BEAMSET.
	debug. ConvertSLUR2: DCheckBeamset found a problem with qL=L645 slurL=723.
	debug. ConvertSLUR: slurL=L723 staff=2 voice=2 tie=0
	
For all four problem Beamsets the 1st time and for both the 2nd time, the 1st complaint was
from "ConvertSLUR2", near the end of ConvertSLUR, with no complaint from "ConvertSLUR1" at
the beginning. Hence in all six cases the Beamset was corrupted within ConvertSLUR! Hallelujah
(kind of)!

19 Sept.: Shit. I just pulled two debug LogPrintf's out of DCheckEverything(); commented out
the "ConvertSLUR2" error checking; and added identical error checking to ConvertSLUR, calling
it "ConvertSLUR1.1". Now running 2ndMovementCSpp1-3.ngl, the 1st indication of corruption of
each Beamset is "ConvertSLUR1"!!!!!! $#!@&#!&@#(!#!@$@@$!^&*($^&@!*($!@(#$@

Add the two debug LogPrintf's back into DCheckEverything(), run 2ndMovementCSpp1-3.ngl =>
the 1st indication of corruption of each Beamset is _still_ "ConvertSLUR1"!!!!!! $#!@&#!&@#(!

Fiddle around a little more => 20 Sept., 8:05: the 1st indication of corruption of each
Beamset is back to "ConvertSLUR2", with Beamsets L??. Sigh. Does Mozart_Andante_2Fl_DMaj.ngl
do the same thing? Yes, with six Beamsets (L559, 745, 821, 871, 1033, 1107); then it crashes
into GDB showing FindMainNote().

22-23 Sept.: Write DebugConvCheckBeamsets(), which checks all Beamsets up to a given point in
object list but reports problems with a given Beamset only once. Open 2ndMovementCSpp1-3.ngl =>
Sep 23 08:31:54 DonDualG5 Ngale[3469]:
	debug. ConvertBEAMSET: beamsetL=L1085
	Warning. *DCheckBeamset: BEAMSET L877 SYNC L112 LINK DOESN'T FOLLOW BEAMSET.
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L877, at objL=1086. (0: 0, 0)
	debug. ConvertSLUR: slurL=L1086 staff=3 voice=3 tie=0
	
	debug. ConvertBEAMSET: beamsetL=L1092
	Warning. *DCheckBeamset: BEAMSET L961 HAS BAD startend SEQUENCE (end).
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L961, at objL=1093. (1: 877, 0)
	debug. ConvertSLUR: slurL=L1093 staff=2 voice=2 tie=0
	
	debug. ConvertBEAMSET: beamsetL=L1098
	Warning. *DCheckBeamset: BEAMSET L1004 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L1004 SYNC L457 LINK DOESN'T FOLLOW BEAMSET.
	Warning. *DCheckBeamset: BEAMSET L1004 SYNC L458 LINK DOESN'T FOLLOW BEAMSET.
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L1004, at objL=1099. (2: 877, 961)
	debug. ConvertSLUR: slurL=L1099 staff=3 voice=3 tie=0
	
	debug. ConvertDYNAMIC: dynamicL=L1108 dynamicType=3
	Warning. *DCheckBeamset: BEAMSET L1092 HAS BAD startend SEQUENCE (end).
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L1092, at objL=1109. (3: 877, 961)
	debug. ConvertSLUR: slurL=L1109 staff=1 voice=1 tie=1

Open 2ndMovementCSpp1-3.ngl again =>
Sep 23 08:36:08 DonDualG5 Ngale[3491]:
	debug. ConvertTUPLET: tupletL=L688 accNum=3 accDenom=2 staff=1
	Warning. *DCheckBeamset: BEAMSET L218 HAS BAD startend SEQUENCE (end).
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L218, at objL=689. (0: 0, 0)
	debug. ConvertSLUR: slurL=L689 staff=2 voice=2 tie=0
	
	debug. ConvertSYNC: syncL=L722 timeStamp=0
	Warning. *DCheckBeamset: BEAMSET L645 HAS BAD startend SEQUENCE (end).
	Warning. *DCheckBeamset: BEAMSET L645 SYNC L121 LINK DOESN'T FOLLOW BEAMSET.
	Warning. *DCheckBeamset: BEAMSET L645 SYNC L122 LINK DOESN'T FOLLOW BEAMSET.
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L645, at objL=723. (1: 218, 0)
	debug. ConvertSLUR: slurL=L723 staff=2 voice=2 tie=0

Let's try my other test file. Open Mozart_Andante_2Fl_DMaj.ngl =>
Sep 23 10:46:31 DonDualG5 Ngale[3538]:
debug. ConvertSYNC: syncL=L1034 timeStamp=480
Warning. *DCheckBeamset: BEAMSET L423 HAS BAD startend SEQUENCE (end).
Warning. *DCheckBeamset: BEAMSET L423 SYNC L20 LINK DOESN'T FOLLOW BEAMSET.
Warning. *DCheckBeamset: BEAMSET L423 SYNC L21 LINK DOESN'T FOLLOW BEAMSET.
debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L423, at objL=1035. (0: 0, 0)
debug. ConvertSLUR: slurL=L1035 staff=1 voice=1 tie=0

debug. ConvertSYNC: syncL=L1045 timeStamp=240
Warning. *DCheckBeamset: BEAMSET L530 SYNC L20 LINK DOESN'T FOLLOW BEAMSET.
debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L530, at objL=1046. (1: 423, 0)
debug. ConvertSLUR: slurL=L1046 staff=1 voice=1 tie=0

debug. ConvertSYNC: syncL=L1056 timeStamp=720
Warning. *DCheckBeamset: BEAMSET L630 HAS BAD startend SEQUENCE (mid).
debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L630, at objL=1057. (2: 423, 530)
debug. ConvertSLUR: slurL=L1057 staff=1 voice=1 tie=0

debug. ConvertMEASURE: measL=L1061 lMeasure=L1039 rMeasure=L1078 systemL=L1014
Warning. •DCheckBeamset: BEAMSET L679 HAS A BAD SYNC LINK.
Warning. *DCheckBeamset: BEAMSET L679 SYNC L170 LINK DOESN'T FOLLOW BEAMSET.
debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L679, at objL=1062. (3: 423, 530)
debug. ConvertSLUR: slurL=L1062 staff=1 voice=1 tie=0

debug. ConvertSYNC: syncL=L1066 timeStamp=120
Warning. *DCheckBeamset: BEAMSET L721 HAS BAD startend SEQUENCE (end).
Warning. *DCheckBeamset: BEAMSET L721 SYNC L297 LINK DOESN'T FOLLOW BEAMSET.
Warning. *DCheckBeamset: BEAMSET L721 SYNC L299 LINK DOESN'T FOLLOW BEAMSET.
Warning. *DCheckBeamset: BEAMSET L721 SYNC L301 LINK DOESN'T FOLLOW BEAMSET.
Warning. *DCheckBeamset: BEAMSET L721 SYNC L303 LINK DOESN'T FOLLOW BEAMSET.
debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L721, at objL=1067. (4: 423, 530)
debug. ConvertSLUR: slurL=L1067 staff=1 voice=1 tie=1

debug. ConvertSLUR: slurL=L1073 staff=1 voice=1 tie=0
Warning. •DCheckBeamset: BEAMSET L783 HAS A BAD SYNC LINK.
Warning. *DCheckBeamset: BEAMSET L783 SYNC L19 LINK DOESN'T FOLLOW BEAMSET.
debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L783, at objL=1074. (5: 423, 530)
debug. ConvertSLUR: slurL=L1074 staff=2 voice=2 tie=0

debug. ConvertSYNC: syncL=L1101 timeStamp=180
Warning. *DCheckBeamset: BEAMSET L1041 SYNC L20 LINK DOESN'T FOLLOW BEAMSET.
debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L1041, at objL=1102. (6: 423, 530)
debug. ConvertSLUR: slurL=L1102 staff=2 voice=2 tie=0

debug. ConvertDYNAMIC: dynamicL=L1104 dynamicType=6
Warning. *DCheckBeamset: BEAMSET L1070 HAS BAD startend SEQUENCE (mid).
debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L1070, at objL=1105. (7: 423, 530)
debug. ConvertSLUR: slurL=L1105 staff=1 voice=1 tie=0

debug. ConvertBEAMSET: beamsetL=L1290
Warning. *DCheckBeamset: BEAMSET L1290 SYNC L17 LINK DOESN'T FOLLOW BEAMSET.
debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1290, at objL=1291. (8: 423, 530)
debug. ConvertBEAMSET: beamsetL=L1291

In opening 2ndMovementCSpp1-3 twice and Mozart_Andante_2Fl_DMaj once, the alarm was sounded by
"ConvertSLUR1" (after the BlockMove at beginning of ConvertSLUR) in no case; by "ConvertSLUR2"
(at the end of ConvertSLUR)in 14 cases; and by "ConvertObjSubobjs" only in the very last one!

24 Sept., 8:30 AM:
Add "ConvertSLUR1.5", open 2ndMovementCSpp1-3 3X => ...Oops, it couldn't and doesn't give me any
new info.

I'm stuck. This is "obviously" a clobber, but from where in 190,000 lines of code??

Well, the symptoms are slightly different every time, so it's almost certainly from using an
uninitialized value! Unfortunately, the compiler says I have about 350 uninitialized variables.
It could also be from using a byte in a block of memory -- most likely our heaps -- that's
uninitialized. ??

25 Sept., 3 PM:

Do more cleanup, fix a couple of unintialized variables, etc.
Open 2ndMovementCSpp1-3 => Sep 25 15:13:30 DonDualG5 Ngale[8077]:

	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L961, at objL=962. (0: 0, 0)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1023, at objL=1024. (1: 961, 0)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1144, at objL=1145. (2: 961, 1023)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L961, at objL=1221. (0: 961, 1023)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1023, at objL=1221. (1: 961, 1023)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1144, at objL=1221. (2: 961, 1023)

Open 2ndMovementCSpp1-3 again => Sep 25 15:14:04 DonDualG5 Ngale[8085]:

	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L82, at objL=953. (0: 0, 0)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L82, at objL=1221. (0: 82, 0)

Open Mozart_Andante_2Fl_DMaj.ngl => Sep 25 15:14:50 DonDualG5 Ngale[8089]:
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L132, at objL=949. (0: 0, 0)
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L385, at objL=974. (1: 132, 0)
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L523, at objL=990. (2: 132, 385)
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L611, at objL=998. (3: 132, 385)
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L871, at objL=1029. (4: 132, 385)
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L942, at objL=1035. (5: 132, 385)
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L1033, at objL=1046. (6: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1136, at objL=1137. (7: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1175, at objL=1176. (8: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1196, at objL=1197. (9: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1258, at objL=1259. (10: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L132, at objL=1322. (0: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L385, at objL=1322. (1: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L523, at objL=1322. (2: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L611, at objL=1322. (3: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L871, at objL=1322. (4: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L942, at objL=1322. (5: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1033, at objL=1322. (6: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1136, at objL=1322. (7: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1175, at objL=1322. (8: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1196, at objL=1322. (9: 132, 385)
	debug. ****** (ConvertObjSubobjs): DCheckBeamset found a problem with qL=L1258, at objL=1322. (10: 132, 385)

---------------------------------------------------------------------------------------

28 Sept. - 6 Oct.

Summary:  I have two medium-size files that file conversion almost always fails on:
2ndMovementCSpp1-3.ngl (136K, 1226 objects) and Mozart_Andante_2Fl_DMaj.ngl (112K, 1327
objects). The exact symptoms are different almost every time, but there are very clear
patterns to the failures. For one thing, objects that (AFAIK) were read and converted
correctly are corrupted in one of several different ways when a later object is converted.
Maybe 90% of the time, one or more Beamsets get clobbered; something like 20% of the time,
it's one or more time signatures that are damaged (so 10% of the time both Beamsets and
timesigs are clobbered). The corruption always occurs in ConvertObjSubobjs(), starting with
conversion of objects towards the end of the file: the earliest I've noticed is converting
L689 corrupting L218, but it's usually considerably later (in the 900's or above).

What about files that are smaller but not too much smaller? Does 2ndMovementCSpp1-2p5.ngl
(120K, 1041 objs) have similar problems? Open it 3x => Yes, all 3 times! Some corrupting of
Beamsets, some of timesigs. How about 2ndMovementCSpp1-2.ngl (100K, 779 objs)? Open it 3x =>
yes, but only 1 out of 3 times. This is all consistent w/ previous observations.

The randomness strongly suggests The Bug involves using an uninitialized byte of memory. It
might be in our heaps or other blocks we malloc (via NewPtr, SetHandleSize, etc.), an
uninitialized variable, or the result of an invalid pointer or out-of- bounds array reference.
Note however that several smallish changes to the code since about 10 Sept. (mostly adding debug
statements) have no visible effect. I think earlier small changes did, but I'm not sure.

We use ExpandFreeList() to create heaps. Comments on changes of mid-May ff. about it: Time to
"optionally have ExpandFreeList initialize newly allocated memory; this could be useful in the
future for similar bugs, so it should be something the user can control, maybe w/ modifier
keys... Idea: when Ngale starts up, offer a way to set something to tell ExpandFreeList() to
initialize every byte (or word?) of newly allocated memory to, say, a choice of 0 and ?? " (I
got diverted from that idea by several things, then forgot about it, oh well.) Code to do this
should go after the error checks just after SetHandleSize... Say, it's already there!!:

		if (0) FillMem(0, p, heap->objSize);
		
..though inactivated by the "if (0)". OK, so ??

5 Oct.: I've appealed to Doug McKenna for help with The Bug. In the meantime:

SWITCH TO work on the Intel version -- and upgrade my MacBook Air to macOS 10.14 (Mojave).
But does Mojave even support QuickDraw? Compile the latest code for Intel => it runs on the
Air! Mojave is OK, yippee! Ngale for Intel can even save a file it's created; but trying to
open it says "Nightingale can't open the file. The file version is '601N'..."  I.e., it's
either the correct file version, 'N106', being read w/ bytes in reverse order by a
little-Endian processor, or w/bytes _written_ in reverse order by a little-Endian processor
:-) . Which? The latter: the 1st four bytes of the file really are '601N' in that order.

Add "FIX_END(version)" to WriteFile(); save a file w/ Ngale for Intel  => Ngale for Intel and
for PowerPC both recognize the version code, but find errors in the headers: not surprising,
since I haven't thought about FIX_ENDing all the header fields!

---------------------------------------------------------------------------------------

7 - 15 Oct.

To save files on little-Endian CPUs (Intel), most of the code to fix the headers already
exists; FileOpen uses it to open files on Intel, and it certainly seems to work! Endian.c
contains functions like EndianFixRect, which work directly on a parameter, so can be used as
is; EndianFixConfig and EndianFixMIDIModNRTable, which work on the currently-installed
Document; and EndianFixDocumentHdr, EndianFixScoreHdr, and EndianFixHeapHdr, which take a
Document as a parameter. But -- like FIX_END -- almost all swap bytes in place. That's a big
no-no: We can't use routines that do that, thereby corrupting the still-open file!

For the routines that take a Document as a parameter, the easiest and safest solution is to
copy the doc to a temporary doc and use the latter. Do that; on my MB Air, enter one note,
Save =>

	49:34 Dons-2017-Air Ngale[27594]:
	info. Opened new score.  (DoFileMenu)
	debug. DrawToolPalette: MemBitCount(palPortBits, 1000)=945 portRect tlbr=0,0,399,271
	info. Respacing from L10 to L2...  (RespaceBars)
	debug. DrawToolPalette: MemBitCount(palPortBits, 1000)=945 portRect tlbr=0,0,399,271
	debug. firstMNNumber=-8540=0xffffdea4
	debug. firstMNNumber=-23330=0xffffa4de
	ERROR. Error saving the file. errCode=-990 errInfo=-991  (SaveError)
	ERROR. Error ID=-990 (error code=-991).

But the file is written; however, its size is 838,928,914 bytes!? Oops: need to FIX_END the
strHdlSize in

	errCode = FSWrite(refNum, &strHdlSize, *stringHdl);

Done. On my MB Air, enter one note, Save => no complaints, and the file written is
a reasonable size! Try to open it => no; it still has 8 header errors.

Status of combinations of open/save, file format, processor type:

open/save	file format processor	status
----------	-----------	---------	-------
Open		N105		PPC			OK except The Bug (clobbered beams & timesigs)
"			"			Intel		OK: Ngale correctly says "file version too old to open"
"			N106		PPC			OK
"			"			Intel		Bad: Ngale either crashes or opens it badly garbled
Save		N106		PPC			OK
"			"			Intel		Bad: trying to open on PPC or Intel always gives 8 header errors

15 Oct.: Is The Bug still around? On G5, open 2ndMovementCSpp1-3.ngl =>

(1) Debug Check complains about 7 Beamsets and a bunch of Timesigs; 40 errors.
(2) Debug Check complains about ca. 8 Beamsets (some visibly bad) and a bunch of Timesigs; 67 errors.
(3) Debug Check complains about ca. 7 Beamsets (some visibly bad) and a bunch of Timesigs; 40 errors.

Yes, it's still around, and it's behaving more consistently than usual; that could help!

---------------------------------------------------------------------------------------

16 - 20 Oct.

...but I'm not going back to The Bug yet. Files saved on Intel give 8 errors in the Document
header on opening; why? Open 1NoteD5_N106NativeIntel.ngl on PPC =>

	Oct 16 07:28:22 DonDualG5 Ngale[4909]:
	Notice. Checking Document header: err #4, err #5, err #7, err #9, err #10, err #11, err #12, err #13, Displaying Document header (ID 4):
	info.   (1)origin.h=2  (2).v=2  (3)paperRect.top=6657  .left=112  .bottom=-9256  .right=-16385
	info.   (4)origPaperRect.top=39  .left=-16385  .bottom=1  .right=0
	info.   (5)marginRect.top=-9200  .left=-16385  .bottom=-9192  .right=-16385
	info.   (6)currentSheet=6912  (7)numSheets=0  (8)firstSheet=-8072  (9)firstPageNumber=-16385  (10)startPageNumber=12829
	info.   (11)numRows=-27771  (12)numCols=-7896  (13)pageType=-16385  (14)measSystem=-18983
	info.   (15)headerFooterMargins.top=113  .left=27  .bottom=0  .right=10433
	ERROR.  8 ERROR(S) FOUND (first bad field is no. 4).  (CheckDocumentHdr)

At a glance, it looks like an Endian problem, but that doesn't explain numSheets = 0. Besides,
WriteFile always calls EndianFixDocumentHdr! Hmmm -- it'd be helpful to see what the headers
look like when they're written. Let's call DisplayDocumentHdr and DisplayDocumentHdr in
WriteFile, if (!DETAIL_SHOW): done.

17 Oct.: Doug McKenna points out the "Nightingale.rsrc" file in the github repository is 0
bytes; that explains why SourceTree never notices it's changed! Of course it's because
everything is in the resource fork; must keep it in .zip form => ??

---------------------------------------------------------------------------------------

21 - 24 Oct.

Doug also points out SetupToolPalette endian-fixes only the Rect(?) in the palette
PICT, but there are several other multibyte fields; that could explain why it's never drawn
on Intel machines! (Yes, we call EndianFixPaletteGlobals before SetupToolPalette, but that
has nothing to do with the PICT.)  Hmmm... Quickdraw.h says:

struct Picture {
  short               picSize;
  Rect                picFrame;
};

That's all. But Doug points out there are _lots_ of fields in a PICT, as revealed by
Resorcerer's Data button for PICT 2001! ?? Sigh. He thinks I should forget using a PICT
on Intel and use a different format for the palette.

---------------------------------------------------------------------------------------

30 Oct.- 1 Nov.

With the latest code, on PPC, New, insert a note, Save => looks OK; but try to open it =>
8 errors! Try to open 1NoteC5_N106NativePPC.ngl (of 10 June) => same result!  Huh?

Ah. Changes to WriteFile() to facilitate running on little-Endian (Intel) processors also
introduced a disastrous bug; fixed. On PPC, try to open 1NoteC5_N106NativePPC.ngl => OK!
On PPC, try to open 1NoteD5_N106NativeIntel.ngl => no (found 8 errors in header); try to
open aIntel.ngl => no (various error messages, then crashes).

On PPC, try to open 1NoteC5_N106NativePPC.ngl => no (various error messages, then hangs). On
Intel, try to open 1NoteD5_N106NativeIntel.ngl => no (various error messages, then hangs);
try to open aIntel.ngl => no ("The string pool is probably bad", etc., then hangs). So
on Intel, we're definitely still writing f*ck-up files, almost certainly because of failure
to fix Endian-ness.

---------------------------------------------------------------------------------------

3 - 5 Nov.

Doug McK. points out two problems with this code in BuildBeamDrawTable() (and
GRBuildBeamDrawTable) after the comment "Finish BEAMINFOs for beams in progress":

	for ( ; k>=-1; k--)
		if (beamTab[k].stop<0) break;
	if (k<0) {
		MayErrMsg("Bad startend sequence at L%ld: couldn't find an unfinished segment. (BuildBeamDrawTable)",
					(long)beamL);
		return -1;
	}

First, it can reference an array element with subscript -1; second, it uses the loop index
after the loop terminates! These _are_ causing questionable error messages, and could be
doing other bad things, e.g., crashes. Fixed.

Run our standard test: open 2ndMovementCSpp1-3.ngl several times =>

(1) Debug Check complains about 5 Beamsets and a bunch of Timesigs; 31 errors. Go to p. 1 crashes.
(2) Debug Check complains about 7 Beamsets (some visibly bad) and a bunch of Timesigs; 26 errors.
(3) Debug Check complains about 7 Beamsets (some visibly bad) and a bunch of Timesigs; 34 errors.

Again there are many complaints from DebugConvCheckBeamsets(). The earliest in the main loop of
ConvertObjSubobjs any occurs in these three tests is with pL = 865, though again the corrupted
Beamsets are way earlier!

---------------------------------------------------------------------------------------

9 - 11 Nov.

On PPC, try to open aIntel.ngl =>

	Nov  9 06:31:42 DonDualG5 Ngale[56887]:
	Notice. Checking Score header: No errors found.  (CheckScoreHdr)
	info. stringPoolSize=306  (OpenFile)
	ERROR. PROGRAM ERROR: The string pool is probably bad (code=8).  (OpenFile)

OpenFile() calls StringPoolEndianFix, so the latter almost certainly isn't fixing enough;
in fact all it does is 	FIX_END(p->sizeJump) , with  StringPool *p . Add several FIX_ENDs to
StringPoolEndianFix; write DisplayStringPool and call it from OpenFile => done. Create a
new aIntel.ngl => No change.

Ah-hah! Search for "EndianFix" shows what a mess I have: mucho inconsistencies of calling the =
six or eight EndianFix functions!

The FIX_ENDIAN and FIX_END macros when TARGET_RT_LITTLE_ENDIAN is undefined correctly do nothing,
but the compiler gives 53 "statement has no effect" warnings. Redefine them to avoid the warnings
=> looks OK, and only 677 compiler warnings vs. 735 just before this change! (That's a decrease
of 58; I don't know why 5 more went away, but unlikely it's worth pursuing.)

Run our standard test: open 2ndMovementCSpp1-3.ngl several times =>

(1) Debug Check complains about one Beamset (and the usual 16 Timesigs); 48 errors. Garbage beams drawn.
(2) Debug Check complains about 8 Beamsets (and the usual 16 Timesigs); 31 errors. Garbage beams drawn.
(3) Debug Check complains about 4 Beamsets (and the usual 16 Timesigs); 33 errors. Some beams not drawn.

---------------------------------------------------------------------------------------

13 - 15 Nov.

SWITCH TO a bug found by Doug McKenna (Issue #184). Open 2ndMovementCSpp1-3.ngl in Ngale
5.8.x; Clear System the last system; Save => the new file can't be opened by Ngale 5.8.x
or 5.9.x. Reason: the Clear System command doesn't update
doc->currSystem. Looks like an easy fix: Clear Page handles this correctly, so paste two
lines from ClearPages() into ClearSystem, so UpdateSysNums() and the following lines are:

	UpdateSysNums(doc,doc->headL);
	currSys = LSSearch(doc->selStartL,SYSTEMtype,ANYONE,GO_LEFT,False);
	doc->currentSystem = SystemNUM(currSys);

To test the fix with 2ndMovementCSpp1-3.ngl, must do it in Ngale 5.8.10 => it works!
(Though I had to fix a problem with FileSave.cp not compiling I introduced by somehow
having changed the path in the project file to point to the 5.9 version of FileSave!)
Make the same changes in 5.9.1 => OK.

BACK TO The "Beamsets corrupted during file format conversion" Bug. Run our standard test:
open 2ndMovementCSpp1-3.ngl several times =>

(1) Debug Check complains about at least one Beamset. Garbage beams drawn.
(2) Debug Check has no complaints, and everything seems to be drawn correctly.
(3) Debug Check has no complaints, and everything seems to be drawn correctly.

!! Problems only once out of three tries: that's very unusual, maybe unprecedented. Open
it again =>

(4) Draws a couple of measures, then crashes into GDB showing the 1st line of FindMainNote
(called from DrawBEAMSET!): "if (SyncTYPE(pL))" with pL=53844, which is nonsense.
(5)  Debug Check complains about 3 Beamsets (and the usual 16 Timesigs); 24 errors. Garbage beams drawn.

Nah, it's behaving the same as always.

In recent runs, the earliest in the conversion process we're finding a problem with Beamsets is
while converting object L830:

	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L435, at objL=830. (0: 0, 0)

So converting L689 is still the earliest I've ever seen a Beamset problem detected.

---------------------------------------------------------------------------------------

17 - 19 Nov.

A new problem: when Ngale on Intel is launched, it complains about 21 illegal values in
the Prefs file. Well, not that new: it happens with Intel versions at least as far back as
2 Nov.! Hmmm: the Library/Nightingale AMNF Prefs file was modified _today_; why? I dunno,
but replace it with a 2018 default AMNF Prefs. Open Ngale => all OK; quit it => the AMNF
Prefs is replaced by a new one, and launching Ngale complains about (this time) 22 illegal
values in the Prefs! Clearly CheckUpdatePrefsFile() thought they changed and replaced a
good Prefs file with a bad one. Check: Yep; the log says

	debug. Prefs changed: cnfg=226 midiTab=0 midiModNRTab=1  (CheckUpdatePrefsFile)
	Notice. Updating the Prefs file...  (UpdatePrefsFile)

And it undoubtedly thinks <config> fields and MIDI modNR tables changed either because it
isn't calling the Endian routines to undo the changes the Initialize functions made, or
because it _is_ calling them and Initialize didn't. Initialize does EndianFixConfig and
EndianFixPaletteGlobals; Finalize does EndianFixConfig and EndianFixMIDIModNRTable.
Actually, both should call all three! Done; test on Intel => OK.

---------------------------------------------------------------------------------------

20 - 24 Nov.

Run our standard test: open 2ndMovementCSpp1-3.ngl several times =>

(1) Debug Check complains re only the usual 16 Timesigs; 16 errors. At a glance, score looks OK.
(2) Debug Check complains re 6 Beamsets & 2 Timesigs (and the usual 16 Timesigs); 37 errors. Garbage beams drawn.
(3) Garbage beams drawn; then crashes w/ GDB window highlighting line "if (SyncTYPE(pL)) {" in
FindMainNote() called from DrawBEAMSET, with pL = 52416: a nonsensical link, and exactly the
same thing has happened more than once before! 52416(10) = 0xCCC0. This might be a good clue
to The Bug!

Time to retest combinations of open/save, file format, processor type. NB: I tested opening
files on PPC only with files written on PPC because Ngale on Intel can't write valid files
yet! Results:

open/save	file format processor	status
						running on
----------	-----------	---------	-------
Open		N105		PPC			OK except The Bug (clobbered beams & occasionally timesigs)
"			"			Intel		OK: Ngale correctly says "file version too old"
"			N106		PPC			OK (tested with only files saved by PPC & of <= 160K!*)
"			"			Intel		Bad: Ngale says "String pool bad", crashes, or opens it badly garbled**
Save		N106		PPC			OK
"			"			Intel		Bad: trying to open on PPC or Intel says "String pool bad (code=8)", opens it badly garbled 

*Larger files tested: 2ndMvmtCSpp1-2p5_ConvPPC.ngl, GraphicsOnWrongPage_ConvPPC.ngl.
**It often says "Staves aren't in the score's standard size."

What about the string pool? Ah: OpenFile calls EndianFixStringPool but EndianFixForFinalize
doesn't! Correct that; create a one-note file on Intel, Save, Open on Intel => a completely
different error (header for heap 0 objSize is wrong), but almost certainly because the string
pool is still bad.

	Nov 21 16:00:32 DonDualG5 Ngale[97316]:
	info. stringPoolSize=306  (OpenFile)
	ERROR. Header for heap 0 objSize is 23041, but expected objSize 346  (ReadHeapHdr)

Try opening the same file on PPC => exactly the same result.

EndianFixStringPool() does FIX_END(p->bottomByte[0], neglecting the rest of the p->bottomByte
array. Unlikely it's affecting anything, but make it do the whole array => no change.

The PPC build now gets 664 compiler warnings; the Intel build, 661. Do the differences in the
warnings tell us anything useful? It's not easy to tell because there hundreds of trivial
differences, e.g., "ppc" vs. "i386". Anyway, handle a few more of the warnings.

Run our standard test: open 2ndMovementCSpp1-3.ngl several times =>

(1) Debug Check shows 21 errors, incl. a Beamset and multiple Timesigs. Garbage beams drawn.
(2) Debug Check shows 26 errors, incl. several Beamsets and multiple Timesigs. Garbage beams drawn.
(2) Crashes w/ GDB window highlighting line "if (SyncTYPE(pL)) {" in FindMainNote() called from
DrawBEAMSET, with pL = 53844 (as usual, way larger than makes sense), voice 1. DrawBEAMSET has
beamL = 0: no wonder FindMainNote is looking at a nonsense "Sync"!

---------------------------------------------------------------------------------------

26 Nov. - 2 Dec.

Latest summary of The Bug in opening medium-size (and larger) files in N105 format:

While converting from N105 to the current (N106 equivalent) internal object list, afer
awhile -- usually starting at around L800 to L1000 -- earlier, already-converted objects
of two types get corrupted, apparently randomly. (This is based on evidence collected by
DebugConvertObj() and DebugConvCheckBeamsets(), both of which call DCheckBeamset().) The
corrupted objects are mostly Beamsets, sometimes Timesigs; never anything else. The way
they're corrupted as well as which objects are appears random. Our standard test file,
2ndMovementCSpp1-3.ngl, occasionally opens with no problems, but 90% of the time, it has
problems of varying severity. It sometimes crashes into GDB, always or almost always
highlighting line "if (SyncTYPE(pL)) {" in FindMainNote() called from DrawBEAMSET, with pL
= a number much too large to make sense. The one time I looked further, DrawBEAMSET had
beamL = 0; in any case the crash is undoubtedly from the corrupted Beamsets most or all of
the time.

When exactly does the corruption occur? Calls to DebugConvCheckBeamsets in ConvertSLUR()
indicate it's almost always inside ConvertSLUR in a series of about 10 statements that
couldn't possibly be doing it :-) : they're all assignment statements with no function calls.

I've seen the same symptoms with Mozart_Andante_2Fl_DMaj.ngl, which is about the same size.

I'd say this must be a case of memory getting clobbered by unrelated code. However, the
symptoms are unchanged certainly since late July and probably earlier despite the fact that
I've made many changes that must have moved things around in memory; I'm not sure I've ever
seen a random clobber like that!

How early in the object list can the clobbering and clobbered objects be? With
2ndMovementCSpp1-3.ngl just now, corruption of the first Beamset (L12) was discovered, but
not until L913 (as usual, in ConvertSLUR).

	Nov 29 06:43:58 DonDualG5 Ngale[17195]:
	Warning. *DCheckBeamset: BEAMSET L12 HAS BAD startend SEQUENCE (end): beamsNow=1.
	debug. ****** (ConvertSLUR2): DCheckBeamset found a problem with qL=L12, at objL=913. (0: 0, 0)

Debug Check shows 30 errors. Open Mozart_Andante_2Fl_DMaj.ngl => draws garbage beams and
Debug Check complains about about 10 Beamsets, so it's also still showing The Bug. Hmmm --
does the old Debugger() command still work? Try it running inside Xcode 2.5 on G5 with OS
10.5.x... Nope! Maybe inside Xcode 3.x with OS 10.6? Doug McKenna, can you try this?

Let's pin down where the corruption is occurring more precisely. Add to ConvertSLUR more calls
to DebugConvCheckBeamsets():

	BlockMove(&tmpSuperObj, &aSlur, sizeof(SLUR_5));
	
	DebugConvCheckBeamsets(doc, slurL, "ConvertSLUR1");

	SlurSTAFF(slurL) = (&aSlur)->staffn;		/* EXTOBJHEADER */

DebugConvCheckBeamsets(doc, slurL, "ConvertSLUR1.1");
	SlurVOICE(slurL) = (&aSlur)->voice;
DebugConvCheckBeamsets(doc, slurL, "ConvertSLUR1.2");
	SlurFILLER(slurL) = 0;
DebugConvCheckBeamsets(doc, slurL, "ConvertSLUR1.3");
	SlurCrossSTAFF(slurL) = (&aSlur)->crossStaff;

Run Ngale on both test scores a bunch of times => it says "ConvertSLUR1.3" 10 times in a
row. So SlurFILLER is the culprit! (And we have a new record for the earliest corruption:
converting L657 (vs. the previous record holder, L689) did it. A small point. FWIW, this
time L657 corrupted L12.)

Well, the Slur object's <filler> field is never used, of course, so what happens if I comment
out that line? Open Mozart_Andante_2Fl_DMaj.ngl 2x => no problems; open 2ndMovementCSpp1-3.ngl
3x => no problems; open 2ndMovementCSpp1-4.ngl => no problems!! The Bug seems to be gone! but
what's going on?

The definition of SlurFILLER:

	#define SlurFILLER(link)			( (GetPASLUR(link))->filler)	

How could that be corrupting anything?? I guess <slurL> must sometimes get trashed in such
way that trying to set its <filler> overwrites something in a Beamset or Timesig, but
setting its <staffn> or <voice> never does! But no, that can't be because after the call to
SlurFILLER, ConvertSLUR does

	SlurCrossSTAFF(slurL) = (&aSlur)->crossStaff;
	SlurCrossSTFBACK(slurL) = (&aSlur)->crossStfBack;			
	SlurCrossSYS(slurL) = (&aSlur)->crossSystem;
	SlurTempFLAG(slurL) = (&aSlur)->tempFlag;
	SlurUSED(slurL) = (&aSlur)->used;
	SlurTIE(slurL) = (&aSlur)->tie;
	SlurFIRSTSYNC(slurL) = (&aSlur)->firstSyncL;
	SlurLASTSYNC(slurL) = (&aSlur)->lastSyncL;

...and those are all working. ?!? Ah-hah!! Both SLUR object and subobject have a filler
field. GetPASLUR(link) assumes <link> is a subobject -- but it's not!!! Hooray!!!!!

Change the name of the field in the object to <philler>; add a SlurPHILLER macro and use
that in ConvertSLUR. Open 2ndMovementCSpp1-3.ngl 3x => no problems; open Mozart_Andante_2Fl_DMaj.ngl
=> no problems; 2ndMovementCSpp1-4.ngl => no problems; 2ndMovement_pp1-28.ngl => OK;
2ndMovement_pp1-29.ngl => OK!!!!!!!!!!!

---------------------------------------------------------------------------------------

5 - 9 Dec.

BACK TO Intel-specific problems, esp. saving & opening files. On Intel, New, insert a note,
Save As 1NoteG3Intel.ngl; try to open it on Intel => "Header for heap 0 objSize is 23041,
but expected objSize 346." This is probably because the string pool is bad. Try to open same
file on PPC => same thing:

	Dec  5 14:41:42 DonDualG5 Ngale[35829]:
	info. stringPoolSize=306  (OpenFile)
	info. String pool nullstr=0 lockLevel=0 saveLevel=0 sizeJump=256  (DisplayStringPool)
	debug. ReadHeapHdr: hp 0 (HEAD) nFObjs=1024 blk=-469565182 objSize=23041 type=0 ff=1792 nO=8192 nf=6400 ll=0 FPos:2902
	ERROR. Header for heap 0 objSize is 23041, but expected objSize 346  (ReadHeapHdr)

So it's a problem in writing the file, not reading it on Intel.

On PPC, open a one-note file created on PPC (in N106 format), 1NoteE5PPC.ngl =>

	info. stringPoolSize=306  (OpenFile)
	info. String pool nullstr=0 lockLevel=0 saveLevel=0 sizeJump=256  (DisplayStringPool)
	debug. ReadHeapHdr: hp 0 (HEAD) nFObjs=4 blk=8370616 objSize=346 type=0 ff=7 nO=32 nf=25 ll=0 FPos:2902
	
Looks like it isn't the string pool, but that the heap header isn't Endian fixed. Right?
Right; WriteHeaps() isn't doing anything Endian! WriteHeapHdr might be able to just do what
ReadHeapHdr does: make a temporary copy and call EndianFixHeapHdr in WriteSubHeaps and
WriteObjHeap just before writing; but that could run into the problem WriteFile had. ??OR
COULD IT? It's safer to call EndianFixHeapHdr just before writing, then call it again just
after to restore the header to internal form. But what about the modifier heap and
WriteModHeap? There _is_ no ReadModHeap. There _is_ no ReadModHeap, and ReadSubHeap doesn't
appear to do anything special with modifiers! Ah: there's nothing special about the
MODNRtype heap itself; it's just that we're writing all other subobjects when we encounter
the object they're attached to, and MODNRs are attached to other subobjs, not objects.

	EndianFixHeapHdr(doc, doc->Heap+heapIndex);				/* Convert to Big Endian if needed */
	EndianFixHeapHdr(doc, doc->Heap+heapIndex);				/* Back to processor-specific Endian */

Done. Next problem: can't open files on Intel machines because <nFObjs> and <sizeAllObjsFile> are
bad. Just need to FIX_END <sizeAllObjsFile> just before writing => done.

---------------------------------------------------------------------------------------

13 - 21 Dec.

Next: can't open files on Intel machines because, hmmm, I don't know, but from 1NoteF6IntelLog.txt:

Dec 11 08:22:49 Dons-2017-Air Ngale[21671]:
	info. 17 objects. sizeAllObjsFile=620 sizeAllObjsHeap=952  (ReadObjHeap)
	debug. ReadObjHeap: pLink1=10704952 FPos:5268
	debug. ReadObjHeap_1: 02 00 00 00   01 00 00 00   00 00 00 00   00 01 00 00
	debug.              : 00 00 00 00   00 00 00 00   00 00 00 00   02 00 03 00
	debug.              : 01 00 00 00   00 00 00 00   04 00 01 01   00 00 
	debug. ReadObjHeap_2: 03 00 01 00   00 00 00 00   00 00 04 00   01 01 00 00
	debug.              : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 00 00
	debug.              : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 
	ERROR. TAIL of Master Page object list not found.  (HeapFixLinks)
	ERROR. PROGRAM ERROR: Can't set links in memory for the file!  (HeapFixLinks)
	
Enable debug statements in HeapFixLinks(); try another 1-note file from Intel:

Dec 13 12:23:04 DonDualG5 Ngale[52094]:
	Notice. Opening file '1NoteD6Intel.ngl'...
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	Notice. Checking Document header: No errors found.  (CheckDocumentHdr)
	Notice. Checking Score header: No errors found.  (CheckScoreHdr)
	info. stringPoolSize=306  (OpenFile)
	info. Objects and subobjects read:
	info.     heap 0 (HEAD): 4 subobjects. sizeAllInFile=1384 sizeAllInHeap=1384  (ReadSubHeap)
	info.     heap 2 (SYNC): 1 subobject. sizeAllInFile=58 sizeAllInHeap=58  (ReadSubHeap)
	info.     heap 6 (STAFF): 4 subobjects. sizeAllInFile=216 sizeAllInHeap=216  (ReadSubHeap)
	info.     heap 7 (MEASURE): 2 subobjects. sizeAllInFile=96 sizeAllInHeap=96  (ReadSubHeap)
	info.     heap 8 (CLEF): 2 subobjects. sizeAllInFile=28 sizeAllInHeap=28  (ReadSubHeap)
	info.     heap 9 (KEYSIG): 2 subobjects. sizeAllInFile=60 sizeAllInHeap=60  (ReadSubHeap)
	info.     heap 10 (TIMESIG): 2 subobjects. sizeAllInFile=32 sizeAllInHeap=32  (ReadSubHeap)
	info.     heap 12 (CONNECT): 4 subobjects. sizeAllInFile=56 sizeAllInHeap=56  (ReadSubHeap)
	info.     heap 24 (OBJECT): 17 objects. sizeAllObjsFile=620 sizeAllObjsHeap=952  (ReadObjHeap)
	debug. HeapFixLinks: pL=256 type=0 in main obj list
	debug. HeapFixLinks: pL=0 type=103 in main obj list
	debug. HeapFixLinks: pL=1 type=0 in main obj list
	debug. HeapFixLinks: pL=512 type=0 in main obj list
	debug. HeapFixLinks: pL=0 type=103 in main obj list
	debug. HeapFixLinks: pL=1 type=0 in main obj list
	debug. HeapFixLinks: pL=512 type=0 in main obj list
	debug. HeapFixLinks: pL=0 type=103 in main obj list
	debug. HeapFixLinks: pL=1 type=0 in main obj list
	debug. HeapFixLinks: pL=512 type=0 in main obj list
	...
	
The <pL> values are all garbage. HeapFixLinks does FIX_END on every link, but we'e starting
with the nonsensical value of 256, and we're immediately dead.
Almost surely an Endian problem! Comment out the initial

	//FIX_END(doc->headL);
	for (pL = doc->headL; !tailFound; pL = DRightLINK(doc, pL)) {
		FIX_END(DRightLINK(doc, pL));
LogPrintf(LOG_DEBUG, "HeapFixLinks: pL=%u type=%d in main obj list\n", pL, DObjLType(doc, pL));

Open 1NoteD6Intel.ngl again =>

Dec 13 12:32:15 DonDualG5 Ngale[52148]:
	info.     heap 24 (OBJECT): 17 objects. sizeAllObjsFile=620 sizeAllObjsHeap=952  (ReadObjHeap)
	debug. HeapFixLinks: pL=256 type=0 in main obj list
	debug. HeapFixLinks: pL=0 type=-105 in main obj list
	debug. HeapFixLinks: pL=1 type=0 in main obj list
	debug. HeapFixLinks: pL=512 type=0 in main obj list
	debug. HeapFixLinks: pL=0 type=-105 in main obj list
	debug. HeapFixLinks: pL=1 type=0 in main obj list
	debug. HeapFixLinks: pL=512 type=0 in main obj list

?! How could removing the FIX_END(doc->headL) not affect the initial pL=256? Oh, this is
running on a PPC :-) . So the LINKs are being written small Endian! The best place to
convert them (and convert them back) is at as low a level as possible: that'd be
WriteObject(), which is called by WriteObjHeap(), WriteModSubs(), and WriteSubObjs(). The
different types of objects and subobjects have LINKs in various places; they also have
other multibyte numbers. LOTS of Endian-relevant things! So best to collect all the FIX_ENDs
in routines, say EndianFixObject(LINK pL) and EndianFixSubobj(LINK pL, short type); these
belong in EndianUtils.c. OK, EndianFixObject is done (I think); now for EndianFixSubobj.

SWITCH TO: Want to give a log message when a file is saved; this should be trivial but it's
surprisingly messy because of, well, yucky old code... done! But existing messiness of function
return codes is even worse now :-( . Cf. esp. Defs.h.

---------------------------------------------------------------------------------------

22 - 28 Dec.

SWITCH TO: Clean up function return codes (and don't introduce new bugs!):

Need to move C1_THEN_2, etc. set from NewSlur.c to Defs.h; in Defs.h, integrate them with the
CANCEL_INT et al. set and the "Function return values" FAILURE, etc. set. It's easy to give
these nine unique values; but do we have to avoid other existing values, e.g., macOS error
codes?

enum {
	C1_THEN_2=-1,
	CEQUAL=0,
	C2_THEN_1=+1
};

enum {									/* Function return values: */
	FAILURE=-1,
	NOTHING_TO_DO=0,
	OP_COMPLETE=1
};

#define CANCEL_INT -31999				/* Operation cancelled */
#define ERROR_INT -32765				/* Error */
#define SUCCESS_INT 999					/* All is well */

The set in NewSlur.c are used only in two static functions, ComparePosInSys and
CheckProposedSlur; the former is called only by the latter and the latter uses them only
internally, so there's no danger of tramping on other codes. So we can change the
C1_THEN_2 set values to anything we want, and leave the other six values the same, with no
danger of introducing bugs!

MiscUtils.h also enum's four values, OP_Cancel etc.; move those to Defs.h and/or change
their values? TBDecided!

BACK TO Intel-specific problems, esp. saving & opening files.Partly implement EndianFixSubobj
and EndianFixSubobj. On Intel, New, insert a note, Save As 1NoteG3Intel.ngl =>

Dec 26 19:37:36 Dons-2017-Air Ngale[38530]:
	debug. WriteHeapHdr: heap 0 (HEAD) nFObjs=4  objSize=346 type=0 FPos:2902
	debug. EndianFixSubobj: heapIndex=0 pL=1
	--- last message repeated 1 time ---
	debug. EndianFixSubobj: heapIndex=0 pL=2
	--- last message repeated 1 time ---
	debug. EndianFixSubobj: heapIndex=0 pL=3
	--- last message repeated 1 time ---
	debug. EndianFixSubobj: heapIndex=0 pL=4
	--- last message repeated 1 time ---
	debug. WriteHeapHdr: heap 1 (TAIL) nFObjs=0  objSize=0 type=1 FPos:4304
	debug. WriteHeapHdr: heap 2 (SYNC) nFObjs=1  objSize=58 type=2 FPos:4322
	debug. EndianFixSubobj: heapIndex=2 pL=1
	ERROR. PROGRAM ERROR: FIX_ENDIAN called with size 1
	
OK, one of the Sync subobject fields EndianFixSubobj is "converting" is indeed just one byte;
likewise one of the Staff fields. Remove those; on Intel, New, insert a note, Save As
1NoteG3Intel.ngl => OK! Try to open that file on Intel => Ngale says "All staves are the same
size, but the score's 'standard' size is different", then crashes; log ends with

	Notice. Opened file '1NoteG3Intel.ngl'.  (DoFileMenu)
	debug. DrawScoreRange: fromL=2 toL=11 outputTo=0
	com.apple.xpc.launchd[1] (com.amns.nightingale.32784[42080]): Service exited due to SIGSEGV | sent by exc handler[42080]

The crash report shows a divide by zero in GetTimeSigMeasDur called from DrawMEASURE called
from DrawScoreRange. Unfortunately, DrawMEASURE doesn't call GetTimeSigMeasDur!; it _can_ call
ShadeDurPblmMeasure, which calls GetTimeSigMeasDur, though it shouldn't in this case. ?!?

Try to open the same (Intel-written) file on PowerPC => gives an error message about staff sizes
and one from MEAdjustCaret; but draws a blank score page and doesn't crash. Debug Check says

Dec 27 14:47:59 DonDualG5 Ngale[2645]:
	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. •DCheckHeadTail: HEADER (L256) HAS BAD nparts.
	Warning. •DCheckHeadTail: PART WITH partL=L1 HAS BAD FIRST STAFF OR LAST STAFF.
	Warning. •DCheckHeadTail: PART WITH partL=L2 HAS BAD FIRST STAFF OR LAST STAFF.
	Warning. •DCheckNode: Object L0 LINK IS GARBAGE.
	Warning. •DCheckNode: Object L0 HAS AN INCONSISTENT LINK.
	ERROR. •DoDebug: CAN'T FINISH CHECKING.

The "L256" looks suspiciously like it should be 1 in a 2-byte field that wasn't Endian fixed!
Browser opens showing L1, and it looks like a valid header; but clicking Jump to Start =>
shows L256, which claims to be a header but it's garbage!

Compare log for opening 1NoteG6Intel.ngl on PPC to log for opening 1NoteG4PPC.ngl on PPC =>
the dumps from "ReadObjHeap_1" and "ReadObjHeap_2" are very different!

---------------------------------------------------------------------------------------

28 - 30 Dec.

SWITCH TO: code cleanup. Rename #defines in Defs.h:

	old	name	count	new name
	--------	-----	--------
	CANCEL_INT	45		NRV_CANCEL
	ERROR_INT	12		NRV_ERROR
	SUCCESS_INT	6		NRV_SUCCESS
	
Thee's more to do, but that's enough for now.

BACK TO: Intel-specific problems, esp. saving & opening files. EndianFixSubobj() has several
obvious holes; plug some. On Intel, New, insert a note, Save As 1NoteA6Intel.ngl => OK. Quit,
relaunch Ngale => "All staves are the same size, but the score's 'standard' size is different";
"Staff 1 is not in any part"; then crashes in GetTimeSigMeasDur called from DrawMEASURE. Try
again => same results except crash is with segmentation fault in DrawTIMESIG.

Open the same file on PPC => "PROGRAM ERROR: DeselectNode: type=-123 at L0 is not supported";
"All staves are the same size, but the score's 'standard' size is different"; "PROGRAM ERROR:
MeAdjustCaret: can't handle type 0"; draws a blank page. Debug Check says exactly the same
things as on Dec. 27 (above).

From log for opening 1NoteG4PPC.ngl on PPC:

Dec 27 21:10:31 DonDualG5 Ngale[3055]:
debug. ReadObjHeap: pLink1=11444792 FPos:5268
debug. ReadObjHeap_1: 00 02 00 00   00 01 00 00   00 00 00 00   00 01 00 00
debug.              : 00 05 00 00   00 00 00 00   00 00 c1 d3   02 b1 00 03
debug.              : 00 01 00 00   00 00 00 00   04 00 01 01   00 00 
debug. ReadObjHeap_2: 00 03 00 01   00 00 00 00   00 00 04 00   01 01 00 00
debug.              : a1 b1 00 00   00 00 00 00   00 00 c1 d3   00 b1 00 00
debug.              : 00 00 00 00   a1 b1 c1 d3   a1 b1 c1 d3   c1 d3 
debug. HeapFixLinks: pL=1 type=0 in main obj list
debug

From log for opening 1NoteG6Intel.ngl on PPC:

Dec 30 12:56:53 DonDualG5 Ngale[11739]:
debug. ReadObjHeap: pLink1=11395128 FPos:5268
debug. ReadObjHeap: L1: 00 02 00 00   00 01 00 00   00 00 00 00   00 01 00 00
debug.                : 00 00 00 00   00 00 00 00   00 00 00 00   02 00 00 03
debug.                : 00 01 00 00   00 00 00 00   04 00 01 01   00 00 
debug. ReadObjHeap: L2: 00 03 00 01   00 00 00 00   00 00 04 00   01 01 00 00
debug.                : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 00 00
debug.                : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 
debug. HeapFixLinks: pL=256 type=0 in main obj list

Again, the dumps for L1 (HEADER) and L2 (PAGE) are very different; but the differences
in the object header of L2 (+16, 17, 26, & 27) are all unused fields. ??

---------------------------------------------------------------------------------------

1 - 5 Jan. *** 2021 ***

The unused fields in the object header are spareFlag, ohdrFiller1, relSize, and
ohdrFiller1. Well, InitObject() sets all to 0 (or False), and those bytes _are_ all
0 in the Intel file, but none are 0 in the PPC file! What the ???

Open 1NoteD5PPC.ngl on PPC => 

Jan  4 20:36:34 DonDualG5 Ngale[25619]:
debug. OpenFile N1: 00 02 00 00   00 01 00 00   00 00 00 00   00 01 00 00
debug.            : 00 00 00 00   00 00 00 00   00 00 00 00   02 00 00 03
debug.            : 00 01 00 00   00 00 00 00   04 00 01 01   00 00 
debug. OpenFile N2: 00 03 00 01   00 00 00 00   00 00 04 00   01 01 00 00
debug.            : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 00 00
debug.            : 00 00 00 00   00 00 00 00   00 00 00 00   00 00 
debug. OpenFile N3: 00 04 00 02   00 00 02 40   04 80 05 00   01 01 00 00
debug.            : 00 00 00 48   00 53 00 b0   02 3b 00 00   00 00 00 00
debug.            : 00 00 00 02   00 01 04 80   05 30 0b 00   23 b0 

etc. etc.: bytes +16, 17, 26, & 27 are zero in all 10 objects displayed, as they should
be! Maybe I had 1NoteG6Intel.ngl and 1NoteG4PPC.ngl backwards!?

---------------------------------------------------------------------------------------

7 - 13 Jan. 2021

I dunno what was happening before, but the log for 1NoteA4PPC.ngl shows bytes +16, 17,
26, & 27 as 00 00 in all 11 objects displayed, so again no problem on PowerPC. The log
for 1NoteB5Intel.ngl shows +16 & 17 as 00 00 in objects 1 - 7; then 05 00, 0c 00, 13 00,
1a 00! Bytes +26 & 27 are always 00 00. So on Intel, byte +16 is nonzero after the 1st 7
objects; this is certainly a bug! In fact, there are differences in _every one_ of the 11
objects displayed.

PPC:
	debug. NObjDump2: m=1 type=0
	debug. WriteFile1H: 00 03 00 00   00 01 00 00   00 00 00 00   00 01 00 00
	debug.            : 00 00 00 00   00 00 00 00   00 00 00 00   02 00 

Intel:
	debug. NObjDump2: m=1 type=0
	debug. WriteFile1H: 03 00 00 00   01 00 00 00   00 00 00 00   00 01 00 00
	debug.            : 00 00 00 00   00 00 00 00   00 00 00 00   02 00 

Type 0 is HEAD. The differences are obviously because the Intel-written file has Little Endian
values! The Intel version of this object:

Offset
	Contents
0*	0300	LINK		right,
2	0000				left;			/* links to left and right objects */					\
4*	0100	LINK		firstSubObj;	/* link to first subobject */							\
6	0000	DDIST		xd,
8	0000				yd;				/* position of object */								\
10	00		SignedByte	type;			/* (.+#10) object type */								\
11	00		Boolean		selected;		/* True if object or any part of it is selected */		\
12	00		Boolean		visible;		/* True if object or any part of it is visible */		\
13	01		Boolean		soft;			/* True if object is program-generated */				\
14	00		Boolean		valid;			/* True if objRect (for Measures, measureBBox also) valid. */ \
15	00		Boolean		tweaked;		/* True if object dragged or position edited with Get Info */ \
16	00		Boolean		spareFlag;		/* available for general use */							\
17	00		char		ohdrFiller1;	/* unused; could use for specific "tweak" flags */		\
18	0000	Rect		objRect;		/* (.+18) enclosing rectangle of object (paper-rel.pixels) */ 	\
	0000
	0000
	0000
26	00		SignedByte	relSize;		/* (unused) size rel. to normal for object & context */	\
27	00		SignedByte	ohdrFiller2;	/* unused */											\
28	02		Byte		nEntries;		/* (.+#28) number of subobjects in object */

The only nonzero multibyte fields, <right> and <firstSubObj>, are in Little Endian form.

PPC:
	debug. NObjDump2: m=10 type=7
	debug. WriteFile10H: 00 1b 00 09   00 01 01 e0   00 00 07 00   00 01 01 00
	debug.             : 00 00 00 48   00 6f 00 b0   00 73 00 00   02 00 
	debug. WriteFile10B: 00 00 00 00   00 04 00 05   00 00 00 64   00 48 00 71

Intel:
	debug. NObjDump2: m=10 type=7
	debug. WriteFile10H: 1b 00 09 00   01 00 e0 01   00 00 07 00   00 01 01 00
	debug.             : 13 00 48 00   6f 00 b0 00   73 00 00 00   02 00 
	debug. WriteFile10B: 1b 00 09 00   01 00 e0 01   00 00 07 00   00 01 01 00

Type 7 is MEASURE. There are little-Endian-form fields all over the place. Why? WriteObject()
carefully calls EndianFixObject(), and EndianFixObject does

		FIX_END(LeftLINK(pL));

Add debug prints to EndianFixObject so it begins:

	LogPrintf(LOG_DEBUG, "EndianFixObject1: pL=%u LeftLINK(pL)=%u\n", pL, LeftLINK(pL));
		FIX_END(LeftLINK(pL));
		FIX_END(RightLINK(pL));
		FIX_END(FirstSubLINK(pL));
	LogPrintf(LOG_DEBUG, "EndianFixObject2: pL=%u LeftLINK(pL)=%u\n", pL, LeftLINK(pL));

Create 1NoteA6Intel.ngl on Intel => 1NoteA6IntelSaveLog.txt saying

	debug. EndianFixObject1: pL=1 LeftLINK(pL)=0
	debug. EndianFixObject2: pL=1 LeftLINK(pL)=0
	debug. EndianFixObject1: pL=1 LeftLINK(pL)=0
	debug. EndianFixObject2: pL=1 LeftLINK(pL)=0
	debug. EndianFixObject1: pL=3 LeftLINK(pL)=1
	debug. EndianFixObject2: pL=3 LeftLINK(pL)=256
	debug. EndianFixObject1: pL=3 LeftLINK(pL)=256
	debug. EndianFixObject2: pL=3 LeftLINK(pL)=1
	debug. EndianFixObject1: pL=4 LeftLINK(pL)=2
	debug. EndianFixObject2: pL=4 LeftLINK(pL)=512
	debug. EndianFixObject1: pL=4 LeftLINK(pL)=512
	debug. EndianFixObject2: pL=4 LeftLINK(pL)=2
	...

So these objects should be getting written with LeftLINKs that in Little Endian form
are 0, 256, 512, but in Big Endian are 0, 1, 2, and the above log excerpts make it sound
as if they are getting written that way, but ??

Oops. The values NObjDump() shows on Intel are indeed Little Endian, but that's because
the objects are in internal form at that point, as they should be! So I'm back to not
understanding how the Intel version is writing files with numbers in Little Endian form.
But is it really or am I confused about that?? Yes, I'm confused; the NObjDump output
in 1NoteA6IntelOpenOnPPCLog.txt obviously has numbers in the correct PPC format, i.e.,
Big Endian. Now I'm back to not having any idea what's wrong with the Intel file and how
it got that way.

---------------------------------------------------------------------------------------

14 - 24 Jan.

Map of object header bytes, showing expected (numbered "1"-"9") & Acceptable (because
unused) ("A") differences between Little & Big Endian versions:

	1122 3344 55.. .... .... ....
	AA66 6677 7788 8899 99AA .A

Comparing 1NoteG4PPCSaveDump.txt to 1NoteA6IntelSaveDump.txt (PPC version shown):

	NObjDump: WriteFile: heap object 1 (link 1) type=0 HEAD
ok  1H: 00 03 00 00   00 01 00 00   00 00 00 00   00 01 00 00
ok	: 00 00 00 00   00 00 00 00   00 00 00 00   02 00 
	NObjDump: WriteFile: heap object 2 (link 2) type=1 TAIL
ok	  2H: 00 00 00 1b   00 00 ff ff   00 00 01 00   00 01 00 00
ok		: 00 00 00 00   00 00 00 00   00 00 00 00   00 00 
	NObjDump: WriteFile: heap object 3 (link 3) type=4 PAGE
ok	  3H: 00 04 00 01   00 00 00 00   00 00 04 00   01 01 00 00
***		: 00 00 00 00   00 00 00 00   00 00 00 00   00 00
ok	  3B: 00 00 00 00   00 00 00 00   00 00 00 00   00 00 
	NObjDump: WriteFile: heap object 4 (link 4) type=5 SYSTEM
ok	  4H: 00 05 00 03   00 00 02 40   04 80 05 00   01 01 00 00
ok		: 00 00 00 48   00 53 00 b0   02 3b 00 00   00 00 
ok	  4B: 00 00 00 00   00 03 00 01   04 80 05 30   0b 00 23 b0
ok		: 00 00 00 00   
	NObjDump: WriteFile: heap object 5 (link 5) type=6 STAFF
?	  5H: 00 06 00 04   00 01 00 00   00 00 06 00   01 01 00 00
?		: 00 00 00 00   00 00 00 00   00 00 00 00   02 00 
?	  5B: 00 00 00 00   00 04 
	NObjDump: WriteFile: heap object 6 (link 6) type=12 CONNECT
?	  6H: 00 07 00 05   00 01 00 50   00 00 0c 00   01 01 00 00
?		: 00 00 00 00   00 00 00 00   00 00 00 00   02 00 
?	  6B: 00 00 
	NObjDump: WriteFile: heap object 7 (link 7) type=8 CLEF
?	  7H: 00 08 00 06   00 01 00 40   00 00 08 00   01 01 01 00
?		: 00 00 00 58   00 57 00 a0   00 61 00 00   02 00 
	NObjDump: WriteFile: heap object 8 (link 8) type=9 KEYSIG
?	  8H: 00 09 00 07   00 01 01 20   00 00 09 00   01 01 01 00
?		: 00 00 00 00   00 00 00 00   00 00 00 00   02 00 
	NObjDump: WriteFile: heap object 9 (link 9) type=10 TIMESIG
?	  9H: 00 0a 00 08   00 01 01 20   00 00 0a 00   01 01 01 00
?		: 00 00 00 60   00 65 00 98   00 6a 00 00   02 00 
	NObjDump: WriteFile: heap object 10 (link 10) type=7 MEASURE
?	  10H: 00 1b 00 09   00 01 01 e0   00 00 07 00   00 01 01 00
?		 : 00 00 00 48   00 6f 00 b0   00 73 00 00   02 00 
?	  10B: 00 00 00 00   00 04 00 05   00 00 00 64   00 48 00 71
?		 : 00 b0 02 37   00 00 00 00   
	NObjDump: WriteFile: heap object 11 (link 11) type=0 HEAD
?	  11H: 00 0d 00 00   00 03 00 00   00 00 00 00   00 01 00 00
?		 : 00 00 00 00   00 00 00 00   00 00 00 00   02 00 

***: Byte +16 (spareFlag) is 0x1c in the Intel version: "Acceptable", but suspicious.
It's a Boolean, and should always be either 0 or 1; in fact, InitObject() sets it to
False (0), and I don't see how it could change!

Before pursuing that, try a different: compare hexdumps of 1NoteF4PPC.ngl & 1NoteE6Intel.ngl.
They should definitely differ in time/date stamp; the Little/Big Endian flag; and a few
bytes of the Note (Sync subobject). Nothing else I can think of, offhand. Results:

Comparing hexdumps of the two files shows 35 differences. Sigh. The PPC dump text file is
over 4000 bytes larger! But hexdump shows the dumps as exactly the same length, 0x19b8 =
6584! That's only the data fork, but neither has anything in the resource fork, and
Resorcerer agrees the files are each 6584 bytes.

Hmmm. At 0xb60, 5*16 bytes of Intel map to 21*16 bytes of PPC; the string "DUMMY" starts
at 0xb62; similar things occur at least twice more. The increased data at these spots is
the reason the PPC dump file is larger; the file sizes are identical because in each such
case, there's a line beginning "*", representing a series of lines of all zeros :-) . The
correct figures:

Start
loc.	Intel rows					PPC rows	Comment
-----------------------------------------------------------------------------------
0xb60	5 nonzero & 16 all zero		21		The string "DUMMY" starts at 0xb62, "DUM." later
0xcc0 	ca. 12 nonzero & 38 zero	ca. 50	"Unnamed" starts a few bytes before, then "Unnam.";
											much later, "DUMMY", then "DUM."
0xf70	ca. 30 nonzero & 5 zero		ca. 35	"Unnamed" starts near the beginning, then "Unnam."

These are almost certainly PARTINFO subobjects!

But much earlier: In the Document header, there's one difference: the last byte is the
Little/Big Endian flag, which indeed should be different. The next 17 differences are in
the Score header, and they're very suspicious! None is among the fields Ngale displays
in the log files; those are identical.

---------------------------------------------------------------------------------------

25 - 31 Jan.

From the log:

	SCORE HDR OFFSET ('N105' fmt): feedback=268 fontNameMN=310 nfontsUsed=850 magnify=1564
		  spaceMap=1596 voiceTab=1636 afterEnd=2148
	SCORE HDR OFFSET ('N106' fmt): noteInsFeedback=268 fontNameMN=328 nfontsUsed=988 magnify=1702
		  spaceMap=1738 voiceTab=1778 afterEnd=2492

N106ScoreHeaderDetails.txt is now useful for mapping hex dump values to fields!

Among the 35 differences are those at file positions in the 180s, 190s, 1b0s, 1c0s, 1e0s =
score header offsets 130s thru 180s. Looks like all are within the <comment> field! Let's
initialize every byte of <comment> after the initial null string to 'N'...done. Nope!
<comment> ends with header offset 10b.

Now, do I really know what I'm looking at? Check contents of 1NoteA4PPC.ngl:
+ Bytes 0 to 3 are "N106".
+ Score header length is 2492, so LASTtype has offset 2572 = 0xA0C, value 0x0019 = 25.
+ String pool length at offset 2576 = 306.
? String pool offset 2578 = 0xA12, so its last byte is at 2578+305 = 2883 = 0xb43
? The first heap starts at 2884 = 0xb44

These are almost certainly 2-byte values that aren't Endian fixed on Intel:
	0x18a-d: aboveMN, sysFirstMN
	192-5: masterHeadL, masterTailL
	1be on (3 fields): ??

Anyway, there are surely more of these where the field's value is 0, since in that case
byte swapping has no effect! Add lots of FIX_ENDIANs to EndianFixScoreHdr(); create
1NoteF6Intel.ngl on Intel; Save, try to Open => no obvious difference; Ngale still hangs.
Compare the hex dump to dump of 1NoteA4PPC.ngl => 44 differences :-( . The first few:

	(2 in Document header)
	0x190-191: firstMNNumber. But we FIX_END this, so ??
	1be-1bf, 1c0-1: in the 1st TEXTSTYLE record
	1ea-f: ??
	214-217: ??
	...
	3fa-d

38 differences. Add fields to EndianFixScoreHdr => up to 44!? How could there be _more_
differences? Possibly just random, and/or bcs of fragmentation of areas w/ differences.
Add 1st 9(?) EndianFixTextstyleRecord; compare hexdump to 1NoteA4PPC.ngl => down to 35
differences. Add the other 6; compare hexdump of 1NoteA6Intel.ngl to 1NoteA4PPC.ngl =>
down to 29!!

	(2 in Document header)
	(3 in Score header:)
	0x190-191: firstMNNumber. But we FIX_END this, so ??
	42f: ca. 2nd byte of fontTable[0]
	71a-73d: in voiceTab
	a22-b49 (2594-2889): in string pool

Add loop to do
	FIX_END(doc->fontTable[j].fontID);
for every FONTITEM. Create 1NoteB6Intel.ngl; compare its hexdump to 1NoteA4PPC.ngl =>
31 differences. How about 0x42f? It's still a problem -- and actually it _couldn't_ be
a matter of Endianness, since it's just one byte that's diferent! ??

	(2 in Document header)
	(3 in Score header:)
	0x190-191: firstMNNumber. On Intel, the bytes are 01 00; on PPC, 00 01; the log for
	both says firstMNNumber = 1, so obviously an Endian problem. But we FIX_END this, so ??
	42f: ca. 2nd byte of fontTable[0] = 2nd byte of fontID. ?? We now FIX_END it, but on
		Intel, the 2 bytes are 00 00, on PPC, 00 14: not a matter of Endianness anyway.
		It's immediately followed by fontname as a P string. On both it's "Times". Maybe
		Times is really fontID 0 on my Intel machine and 14 on my PPC?
	71a-73d: in voiceTab
	a22-aba = 2594-2746(10): in string pool

Add code to BuildVoiceTable() to initialize all fields. Create 1NoteA4PPC.ngl and
1NoteD6Intel.ngl; compare hexdumps => only 23 differences!

(2 in Document header)
(3 in Score header:)
	0x190 - 191 (R 140 - 141): firstMNNumber. But we FIX_END this, so ??
	42f (R 3df): 2nd byte of fontTable[0] = 2nd byte of fontID. ?? See above.
	71a - 73d (R 6ca - 6fd): in spaceMap thru voiceTab. 72e (R 6ee) ??OR 73a - b??: dIndentFirst
(After Score header:)
	a22-b49 = 2594-2889(10): in string pool
	
5 fewer differences than the previous low: good, but no change to the voiceTab difference
(which in any case would explain only one). ?!?

WriteFile() handles the Endian fixing before writing the Document and Score headers; it
just calls EndianFixDocumentHdr and EndianFixScoreHdr. Are those doing anything on Intel?
Add debug prints => it looks like they're not, but...

---------------------------------------------------------------------------------------

1 - 7 Feb.

ACK! EndianFixScoreHdr() "fixes" firstMNNumber _twice_, once assuming it's a 13-bit field 
(as it was in N105 files), and once correctly (as a short)! Remove the 13-bit "fix"; create
1NoteG6Intel.ngl; compare to 1NoteE4PPC.ngl => 25 differences:

(2 in Document header)
(2 in Score header:)
	42f (R 3df): 2nd byte of fontTable[0] = 2nd byte of fontID. Is the difference legit?
	71a - 75f (R 6ca - 70f): in spaceMap thru voiceTab. R 6ca: spaceMap[0]

firstMNNumber is finally OK!

 Now, R 6ca-d = spaceMap[0] on Intel looks like it's just not end fixed -- and it's not!
 Add call to EndianFixSpaceMap() to EndianFixScoreHdr; create 1NoteF6Intel.ngl and
 1NoteG4PPC.ngl; compare hexdumps => only 22 differences.

(2 in Document header)
(1 in Score header:)
	42f (R 3df): 2nd byte of fontTable[0] = 2nd byte of fontID. Is the difference legit?
(After Score header: String pool starts at 2578(10))
	a20 - b49 = 2592 - 2889(10) = string pool+14 - string pool+311

This part of the Intel file looks like a scrambled version of PPC, not just different Endian:

PPC:	00000a20  7d 00 80 00 00 00 00 00  00 02 ff ff 83 00 00 00  |}.........ˇˇ....|
		00000a30  00 04 ff ff 83 00 00 00  7d 00 00 00 00 00 00 00  |..ˇˇ....}.......|

Intel:	00000a20  00 00 7d 00 00 02 80 00  83 00 00 00 00 04 ff ff  |..}...........ˇˇ|
		00000a30  83 00 00 00 7d 00 ff ff  7d 00 00 00 00 00 00 00  |....}.ˇˇ}.......|

Well, don't worry about that for now. What do complaints from Ngale Debug Check of an Intel
tell me? Ah, SYSTEM objects need more Endian fixing => success!!! 1NoteE6Intel.ngl opens
on PPC -- and with no Debug complaints :-) . The first time I've ever opened a file written
on Intel on either architecture :---))) .

Now, open 1NoteE6Intel.ngl on Intel => not good; lots of complaints while reading; even
objects's LeftLINKs are bad. Obvious cause: we're not calling EndianFixObject (or
EndianFixSubobj) when we open files!

WriteObjHeap calls WriteObject, which does:

	EndianFixObject(objL);								/* Ensure in Big Endian form */
	p = LinkToPtr(myHeap, objL);
	ioErr = FSWrite(refNum, &count, p);
	EndianFixObject(objL);								/* Back to processor-specific Endian */
	
WriteSubobj does the same thing, but using EndianFixSubobj, natch.

ReadObjHeap reads the entire heap with a single call to FSRead; then it calls
MoveObjSubobjs and RebuildFreeList, but nobody ever calls EndianFixObject or
EndianFixSubobj -- understandably because it's always dealing with a heap as a unit. But
that's no excuse :-) .

But this is from 1NoteE6IntelOpenOnIntelLog.txt:

	debug. ReadObjHeap: L1: 00 02 00 00   00 01 00 00   00 00 00 00   00 01 00 00
	debug.                : 10 27 00 00   00 00 00 00   00 00 65 2e   02 6d 00 03
	debug.                : 00 01 00 00   00 00 00 00   04 00 01 01   00 00 
	debug. ReadObjHeap: L2: 00 03 00 01   00 00 00 00   00 00 04 00   01 01 00 00
	debug.                : 70 70 00 00   00 00 00 00   00 00 75 6c   00 43 00 00
	debug.                : 00 00 00 00   69 6f 6e 08   0f 26 50 71   ae 73 
	debug. OpenFile: L1: 02 00 00 00   00 01 00 00   00 00 00 00   00 01 00 00
	debug.             : 10 27 00 00   00 00 00 00   00 00 65 2e   02 6d 00 03
	debug.             : 00 01 00 00   00 00 00 00   04 00 01 01   00 00 
	debug. OpenFile: L2: 03 00 00 01   00 00 00 00   00 00 04 00   01 01 00 00
	debug.             : 70 70 00 00   00 00 00 00   00 00 75 6c   00 43 00 00
	debug.             : 00 00 00 00   69 6f 6e 08   0f 26 50 71   ae 73 

The 1st field -- the Right LINK -- is getting converted properly to Intel internal form
(little Endian), but nothing else is! Cause: HeapFixLinks does  FIX_END(DRightLINK(doc, pL)) .
Try replacing that with  EndianFixObject(pL)  => NObjDump dumps L1 & L2 from OpenFile
look good, and so do the later set showing objs L1 thru L4! But problems start with

	info. Staff sizes in points are  1:0 2:0
	Warning. Not all staves have reasonable sizes.

-- which makes sense: Staff sizes are set in FillRelStaffSizes() via

		lnSpace = StaffHEIGHT(aStaffL) / (StaffSTAFFLINES(aStaffL)-1);

<aStaffL> is a staff subobject; of course subobjs also need Endian fixes.

Hmmm. Besides the main object list, HeapFixLinks does the Master Page list; we need to
Endian fix that, too. This is a bit much for a routine whose main job is something else!
Probably better to call a new function, say EndianFixHeap, first, to do all: objects
and subobjects -- including modifiers.

But HeapFixLinks uses the macros that have the Document as an argument. I wrote it that
way just to be safe, since I didn't know if I could count on the newly-opened doc having
been installed! If I can't count on that, I can't use EndianFixObject and EndianFixSubobj
as is. Is it really uncertain if the doc has been installed?

The Open File menu command calls BuildDocument, which calls InstallDoc, then (if it's an
existing file) OpenFile. So it's not a problem! The doc has always been installed! Yay!

---------------------------------------------------------------------------------------

9 - 15 Feb.

Implement EndianFixAllObjects & EndianFixAllSubobjs? Oops; keeping them separate from
HeapFixLinks is still a problem; the object list left/right links aren't set properly till
HeapFixLinks sets them! But code in HeapFixLinks may depend on Endian values in objects.
So, at least for now, let's just call EndianFixObject at the beginning of the loop in
HeapFixLinks... done.

Fixing Endianness of subobjects will be a bit messy, if only because MODNR subobjs are
attached to other subobjs instead of objects, and there's no advantage to doing it in
HeapFixLinks. So implement EndianFixAllSubobjs(doc)... done. Open 1NoteE6Intel.ngl =>
better!: It sometimes crashes, but sometimes draws the score almost correctly. From
1NoteE6IntelOpenOnIntelLog.txt:

	Feb 12 19:43:30 Dons-2017-Air Ngale[10200]:
	...
	debug. EndianFixSubobj: heapIndex=0 subL=512
	debug. EndianFixSubobj: heapIndex=0 subL=41891
	debug. EndianFixSubobj: heapIndex=6 subL=1
	debug. EndianFixSubobj: heapIndex=6 subL=2
	debug. EndianFixSubobj: heapIndex=12 subL=1
	debug. EndianFixSubobj: heapIndex=12 subL=2
	debug. EndianFixSubobj: heapIndex=9 subL=1
	debug. EndianFixSubobj: heapIndex=9 subL=2
	debug. EndianFixSubobj: heapIndex=10 subL=1
	debug. EndianFixSubobj: heapIndex=10 subL=2
	debug. EndianFixSubobj: heapIndex=7 subL=1
	debug. EndianFixSubobj: heapIndex=7 subL=2
	debug. EndianFixSubobj: heapIndex=2 subL=1
	debug. EndianFixSubobj: heapIndex=0 subL=1024
	debug. EndianFixSubobj: heapIndex=0 subL=8365
	debug. EndianFixSubobj: heapIndex=6 subL=3
	debug. EndianFixSubobj: heapIndex=6 subL=4
	debug. EndianFixSubobj: heapIndex=12 subL=3
	debug. EndianFixSubobj: heapIndex=12 subL=4
	...
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	info. Staff sizes in points are  1:16 2:16
	Notice. Opened file '1NoteE6Intel.ngl'.  (DoFileMenu)
	ERROR. PROGRAM ERROR: Staff2Part: staff no. 1 is not in any part.
	Warning. * StopInform alertID=464
	ERROR. PROGRAM ERROR: Staff2Part: staff no. 1 is not in any part.
	Warning. * StopInform alertID=464
	ERROR. PROGRAM ERROR: Staff2Part: staff no. 2 is not in any part.
	Warning. * StopInform alertID=464
	ERROR. PROGRAM ERROR: Staff2Part: staff no. 1 is not in any part.
	ERROR. PROGRAM ERROR: GetClefDrawInfo: illegal clef 0 at L6

NB the <subL> values for heap 0 (HEADER) are nonsense; the subobjects are PARTINFOs, so no
wonder staves "aren't in any part"! They look like garbage, not just values that need
Endian fixing. Let's collect more data for 1NoteE6Intel.ngl ("EFBlah" = EndianFixBlah):

	Intel											PPC
	-----------------------------------------------------------------------------
	EFSubobjs: objL=1 heapIndex=0 FirstSubLINK()=1	EFSubobjs: objL=1 heapIndex=0 FirstSubLINK()=1
	EFSubobj: heapIndex=0 subL=512					EFSubobj: heapIndex=0 subL=2
	EFSubobj: heapIndex=0 subL=25200	
	EFSubobj: heapIndex=0 subL=24948	
	EFSubobj: heapIndex=0 subL=512	
	EFSubobj: heapIndex=0 subL=28770	
	EFSubobj: heapIndex=0 subL=512	
	EFSubobj: heapIndex=0 subL=25200	
	EFSubobj: heapIndex=0 subL=29793	
	EFSubobjs: objL=2 heapIndex=4 FirstSubLINK()=0	EFSubobjs: objL=2 heapIndex=4 FirstSubLINK()=0
	EFSubobjs: objL=3 heapIndex=5 FirstSubLINK()=0	EFSubobjs: objL=3 heapIndex=5 FirstSubLINK()=0
	EFSubobjs: objL=4 heapIndex=6 FirstSubLINK()=1	EFSubobjs: objL=4 heapIndex=6 FirstSubLINK()=1
	EFSubobj: heapIndex=6 subL=1					EFSubobj: heapIndex=6 subL=1
	EFSubobj: heapIndex=6 subL=2					EFSubobj: heapIndex=6 subL=2
	EFSubobjs: objL=5 heapIndex=12 FirstSubLINK()=1	EFSubobjs: objL=5 heapIndex=12 FirstSubLINK()=1
	EFSubobj: heapIndex=12 subL=1					EFSubobj: heapIndex=12 subL=1
	EFSubobj: heapIndex=12 subL=2					EFSubobj: heapIndex=12 subL=2
	EFSubobjs: objL=6 heapIndex=8 FirstSubLINK()=1	EFSubobjs: objL=6 heapIndex=8 FirstSubLINK()=1
	EFSubobjs: objL=7 heapIndex=9 FirstSubLINK()=1	EFSubobjs: objL=7 heapIndex=9 FirstSubLINK()=1
	EFSubobj: heapIndex=9 subL=1					EFSubobj: heapIndex=9 subL=1
	EFSubobj: heapIndex=9 subL=2					EFSubobj: heapIndex=9 subL=2
	EFSubobjs: objL=8 heapIndex=10 FirstSubLINK()=1	EFSubobjs: objL=8 heapIndex=10 FirstSubLINK()=1
	EFSubobj: heapIndex=10 subL=1					EFSubobj: heapIndex=10 subL=1
	EFSubobj: heapIndex=10 subL=2					EFSubobj: heapIndex=10 subL=2
	EFSubobjs: objL=9 heapIndex=7 FirstSubLINK()=1	EFSubobjs: objL=9 heapIndex=7 FirstSubLINK()=1
	EFSubobj: heapIndex=7 subL=1					EFSubobj: heapIndex=7 subL=1
	EFSubobj: heapIndex=7 subL=2					EFSubobj: heapIndex=7 subL=2
	EFSubobj: heapIndex=2 subL=1					EFSubobj: heapIndex=2 subL=1
	EFSubobj: heapIndex=0 subL=1024					EFSubobj: heapIndex=0 subL=4
	EFSubobj: heapIndex=6 subL=3					EFSubobj: heapIndex=6 subL=3

So the FirstSubLINKs for heap 0 are the same; the next <subL>s for heap 0 are reasonable
on PPC, nonsense on Intel. For all other heaps, all <subL>s are reasonable and the same on
PPC & Intel. Why?

Add more debug info, open 1NoteE6Intel.ngl on Intel => !?! The PARTINFO subobjs are all OK now!
Why??

---------------------------------------------------------------------------------------

16 - 22 Feb.

Try to open 1NoteE6Intel.ngl on Intel => Ngale hangs! From the log:

	info.      aStaffL=L512 next=L1 stf=0 top,left,ht,rt=d0,1,46,0 lines=0 fontSz=1 .V clef=0 TS=0,1/0
	info.      aStaffL=L1 next=L512 stf=1 top,left,ht,rt=d-32767,0,1,16414 lines=5 fontSz=3584 .V clef=3 TS=1,4/4
	info.      aStaffL=L512 next=L1 stf=0 top,left,ht,rt=d0,1,46,0 lines=0 fontSz=1 .V clef=0 TS=0,1/0
	info.      aStaffL=L1 next=L512 stf=1 top,left,ht,rt=d-32767,0,1,16414 lines=5 fontSz=3584 .V clef=3 TS=1,4/4
	info.      aStaffL=L512 next=L1 stf=0 top,left,ht,rt=d0,1,46,0 lines=0 fontSz=1 .V clef=0 TS=0,1/0
	info.      aStaffL=L1 next=L512 stf=1 top,left,ht,rt=d-32767,0,1,16414 lines=5 fontSz=3584 .V clef=3 TS=1,4/4
	...
	
A 2-cycle in STAFF subobjs :-( leading to hundreds or thousands of repetitions of those two lines,
obviously from DisplayObject called from ReadHeaps -- but I can't see the previous stuff; it went
off the top of the log :-( . Try it again => the score opens and is drawn, but with the usual
complaints about "staff not in any part":

Feb 16 08:52:41 Dons-2017-Air Ngale[26362]:
info. Staff sizes in points are  1:16 2:16
Notice. Opened file '1NoteE6Intel.ngl'.  (DoFileMenu)
Feb 16 08:52:42 Dons-2017-Air Ngale[26362]: ERROR. PROGRAM ERROR: Staff2Part: staff no. 1 is not in any part.
Feb 16 08:52:42 Dons-2017-Air Ngale[26362]: Warning. * StopInform alertID=464
Feb 16 08:52:44 Dons-2017-Air Ngale[26362]: debug. DrawScoreRange: fromL=2 toL=11 outputTo=0
Feb 16 08:52:44 Dons-2017-Air Ngale[26362]: ERROR. PROGRAM ERROR: Staff2Part: staff no. 1 is not in any part.
Feb 16 08:52:44 Dons-2017-Air Ngale[26362]: Warning. * StopInform alertID=464
Feb 16 08:52:45 Dons-2017-Air Ngale[26362]: ERROR. PROGRAM ERROR: Staff2Part: staff no. 2 is not in any part.
Feb 16 08:52:45 Dons-2017-Air Ngale[26362]: Warning. * StopInform alertID=464

So there's some randomness here, and affecting STAFF subobjs as well as HEADER subobjs %^#&(#$#%$)(&

The problem seems to be related to HeapFixLinks. Is HeapFixLinks even necessary? For a file
just read, it re-assigns object links in sequential order. That's a nicety, since editing
might have resulted in them being in almost any order when they're written, but if that's
all it does, it's not essential! Comment out the call to it, open a 1-note N106 file written
on PowerPC => it hangs. So it _is_ essential. Sigh.

From 1NoteE6IntelOpenOnPPCLog.txt:

	info.  900 L1 xd=0 yd=0 HEAD ..S..S oRect.l=p0 n=2
	info.      partL=L1 next=L2 firstst=-2 lastst=-2 velo=0 transp=0 name=DUMMY
	info.      partL=L2 next=L0 firstst=1 lastst=2 velo=0 transp=0 name=Unnamed
	info.  904 L2 xd=0 yd=0 PAGE .VS..S oRect.l=p0 p#=0
	info.  905 L3 xd=576 yd=1152 SYSTEM .VS... oRect.l=p21248 sRect(t,l,b,r)=d1152,1328,2816,9136 s#=1
	info.  906 L4 xd=0 yd=0 STAFF .VS..S oRect.l=p0 n=2
	info.      aStaffL=L1 next=L2 stf=1 top,left,ht,rt=d384,0,256,7744 lines=5 fontSz=14 .V clef=3 TS=1,4/4
	info.      aStaffL=L2 next=L0 stf=2 top,left,ht,rt=d1024,0,256,7744 lines=5 fontSz=14 .V clef=10 TS=1,4/4
	info.  907 L9 xd=480 yd=0 MEASURE ..SV.. oRect.l=p28416 Box(t,l,b,r)=p72,113,176,567 s=100 TS=0 n=2
	info.      aMeasureL=L1 next=L2 stf=1 m#=0 barTp=1 conStf=2 clef=3 mR=d0,0,1024,7264 ...M. nKS=0 TS=1,4/4
	info.      aMeasureL=L2 next=L0 stf=2 m#=0 barTp=1 conStf=0 clef=10 mR=d640,0,1664,7264 ...MC nKS=0 TS=1,4/4
	info.  902 L10 xd=96 yd=0 SYNC SV.V.. oRect.l=p30208 n=1
	info.      stf=1 v=1 xd=0 yd=-192 ystm=128 yqpit=-32 ldur=4 .s=0 acc=0 onV=75 SV.. .... ... 1stMod=0

From 1NoteE6IntelOpenOnIntelLog.txt:

	info.  900 L1 xd=0 yd=0 HEAD ..S..S oRect.l=p0 n=2
	info.      partL=L1 next=L512 firstst=-2 lastst=-2 velo=0 transp=0 name=DUMMY
	info.      partL=L512 next=L7952 firstst=-1 lastst=0 velo=-62 transp=0 name=
	info.      partL=L7952 next=L0 firstst=0 lastst=0 velo=0 transp=0 name=
	info.  904 L2 xd=0 yd=0 PAGE .VS..S oRect.l=p0 p#=0
	info.  905 L3 xd=576 yd=1152 SYSTEM .VS... oRect.l=p83 sRect(t,l,b,r)=d1152,1328,2816,9136 s#=1
	info.  906 L4 xd=0 yd=0 STAFF .VS..S oRect.l=p0 n=2
	info.      aStaffL=L1 next=L512 stf=1 top,left,ht,rt=d-32767,0,1,16414 lines=5 fontSz=3584 .V clef=3 TS=1,4/4
	info.      aStaffL=L512 next=L28770 stf=108 top,left,ht,rt=d12336,474,1284,770 lines=6 fontSz=2312 SV clef=16 TS=115,95/16
	info.      aStaffL=L28770 next=L0 stf=0 top,left,ht,rt=d2384,-16428,0,57 lines=0 fontSz=0 .V clef=80 TS=0,0/0
	info.  907 L9 xd=480 yd=0 MEASURE ..SV.. oRect.l=p111 Box(t,l,b,r)=p72,113,176,567 s=100 TS=0 n=2
	info.      aMeasureL=L1 next=L512 stf=1 m#=0 barTp=1 conStf=2 clef=3 mR=d0,0,4,24604 ...M. nKS=0 TS=1,4/4
	info.      aMeasureL=L512 next=L109 stf=0 m#=11885 barTp=0 conStf=117 clef=110 mR=d28769,27760,11877,24940 .V..C nKS=97 TS=103,101/117
	info.      aMeasureL=L109 next=L110 stf=0 m#=0 barTp=0 conStf=0 clef=0 mR=d0,0,0,0 ..... nKS=0 TS=0,0/0
	info.      aMeasureL=L110 next=L111 stf=0 m#=0 barTp=0 conStf=0 clef=0 mR=d0,0,0,0 ..... nKS=0 TS=0,0/0
	info.      aMeasureL=L111 next=L112 stf=0 m#=0 barTp=0 conStf=0 clef=0 mR=d0,0,0,0 ..... nKS=0 TS=0,0/0
	...
	
I'll be!! On PPC, all is well. On Intel, the <next> fields of _each_ 1st subobject hasn't been Endian
fixed!!! Probably none of the other subobjects has been either, but of course we go off into outer
space after getting 512 instead of 2 for the <next>. Not clear where the randomness could come from,
but this REALLY needs following up.

Ah. EndianFixSubobjs() carefully avoids calling EndianFixSubobj for the 1st subobject of HEADERs
because that subobj is a dummy, containing no useful information -- except for its <next> link!!
Fix that, run again => Ngale hangs; the log is jammed with repetitions of this 3-cycle:

	Feb 20 10:47:17 Dons-2017-Air Ngale[9983]:
	info.      aStaffL=L1 next=L512 stf=1 top,left,ht,rt=d-32767,0,1,16414 lines=5 fontSz=3584 .V clef=3 TS=1,4/4
	info.      aStaffL=L512 next=L3964 stf=56 top,left,ht,rt=d0,0,0,0 lines=0 fontSz=0 S. clef=0 TS=0,0/0
	info.      aStaffL=L3964 next=L1 stf=0 top,left,ht,rt=d0,1,0,0 lines=0 fontSz=1 .. clef=0 TS=0,1/0
	
Run a 2nd time => it works perfectly; see log of Feb 20 10:50:36.

Run a 3rd time => Ngale hangs; log is full of repetitions of this 2-cycle:

	info.      aStaffL=L1 next=L512 stf=1 top,left,ht,rt=d-32767,0,1,16414 lines=5 fontSz=3584 .V clef=3 TS=1,4/4
	info.      aStaffL=L512 next=L1 stf=0 top,left,ht,rt=d0,2,2,0 lines=0 fontSz=1 .V clef=0 TS=0,2/0

So <next> of the 1st subobj of the STAFF object isn't Endian fixed! Let's show links of all
subobjects in Debug Display... done.

Hmmm: open AllObjypes.ngl; Debug Display the first few objs and their subobjs => Staff
subobjects think the TS in effect is "96,0/2"! The file is in N105 format; is this a bug
in conversion?

---------------------------------------------------------------------------------------

24 - 28 Feb.

SWITCH TO Open 1CourtesyAcc.ngl (in N105 format) => Staff subobjects say the TS in effect
is "1,4/4", which is correct; likewise for Staff subobjects in the 1st system of
DanceFor2Fl.39.ngl. NB Timesigs in the first Staff should always be the default timesig,
which is indeed type 1, 4/4 time! So probably not a bug in conversion, but check.

Open 1CourtesyAcc.ngl w/ Ngale 5.8.10 => Staff subobjects say the TS in effect is "1,4/4",
as expected. Open AllObjypes.ngl w/ Ngale 5.8.10 => Staff subobjects say the TS is
"TS=96,0/2". So not a bug in conversion; but a bizarre thing in that score file -- which
Debug Check should catch but doesn't. The relevant code is in DCheckNode(). Is this worth
fixing now? Probably not.

BACK TO Intel-specific problems, esp. saving & opening files.

Open AllObjypes.ngl w/ latest Ngale on Intel => crashes. The log ends with

	info. Staff sizes in points are  1:20 2:20
	Notice. Opened file 'AllObjTypes_ConvByPPC.ngl'.  (DoFileMenu)
	debug. DrawScoreRange: fromL=2 toL=37 outputTo=0
	com.apple.xpc.launchd[1] (com.amns.nightingale.49728[25427]): Service exited due to SIGSEGV | sent by exc handler[25427]

Oh well. Let's go back to the much simpler 1NoteE6Intel.ngl. Open it on Intel => score looks
fine, and Debug Check (standard) has no complaints. Same thing a 2nd time => same result.
3rd & 4th times => same thing! Hooray! So it looks like the random failures are gone --
miraculously: I haven't changed anything since the above hangs, so almost certainly just
chance! Leave it open & open 1NoteA6Intel.ngl => draws a blank score & Debug Check has 14
complaints. Quit; open 1NoteA6Intel.ngl again => exactly the same results. But open
1NoteA6Intel.ngl on PPC => exactly the same results, so that score file seems to be bad.

On Intel, create 2Notes+BeamIntel.ngl (with just those contents). Quit Ngale; re-launch;
open 2Notes+BeamIntel.ngl => looks right, plays right, and has no Debug complaints! Same
thing a 2nd time => Ngale hangs :-( . 3rd, 4th, 5th times => looks fine, and Debug Check
has no complaints. So the recent random problem isn't gone at all.

Open 1NoteE6Intel on Intel => hangs w/ a 2-cycle almost identical to the one above: L1 to L512.
Not surprisingly, many of the fields of the nonsensical subobject L512 are different. Well,
the GARBAGEL macro should catch the absurdity of link no. 512! Add it to EndianFixSubobj.

Open 1NoteE6Intel on Intel 3x => no problems & no complaints from GARBAGEL -- but here's
an excerpt from the log for one (1NoteE6IntelOpenOnIntelLog4.txt):

	info.  900 L1 xd=0 yd=0 HEAD ..S..S oRect.l=p0 n=2
	info.      L1 next=L512 firstst=-2 lastst=-2 velo=0 transp=0 name=DUMMY
	info.      L512 next=L0 firstst=0 lastst=0 velo=0 transp=0 name=
	...
	info.  906 L4 xd=0 yd=0 STAFF .VS..S oRect.l=p0 n=2
	info.      L1 next=L512 stf=1 top,left,ht,rt=d-32767,0,1,16414 lines=5 fontSz=3584 .V clef=3 TS=1,4/4
	info.      L512 next=L2 stf=0 top,left,ht,rt=d0,14224,5,-3167 lines=0 fontSz=-11104 .V clef=0 TS=0,1/0
	info.      L2 next=L0 stf=2 top,left,ht,rt=d4,0,1,16414 lines=5 fontSz=3584 .V clef=10 TS=1,4/4
	info.  907 L9 xd=480 yd=0 MEASURE ..SV.. oRect.l=p111 Box(t,l,b,r)=p72,113,176,567 s=100 TS=0 n=2
	info.      L1 next=L512 stf=1 m#=0 barTp=1 conStf=2 clef=3 mR=d0,0,4,24604 ...M. nKS=0 TS=1,4/4
	info.      L512 next=L2 stf=0 m#=0 barTp=0 conStf=1 clef=0 mR=d2,0,3,0 S...C nKS=0 TS=0,2/0
	info.      L2 next=L0 stf=2 m#=0 barTp=1 conStf=0 clef=10 mR=d-32766,0,-32762,24604 ...MC nKS=0 TS=1,4/4

That's from ReadHeaps(). So there are bad (apparently non-Endian-fixed and obviously
garbage) links even here; but they aren't caught by the GARBAGEL check in EndianFixSubobj
bcs they've been fixed by then -- as they should be. In 1NoteE6IntelOpenOnIntelLog5.txt, the
subobj links for STAFFs are in a 2-cycle in ReadHeaps, so we hang there just trying to print
them. That's dumb! Instead, make DisplaySubobjects check if there are more
subobjects in the linked list than the owning objects says and if so quit after the
expected number ??OR ONE MORE? ...done.

---------------------------------------------------------------------------------------

1 - 9 March

Have ReadHeaps call DisplayObject after running EndianFixSubobjs as well as before => done.

Time to retest combinations of open/save, file format, processor type; cf. chart from 20 - 24
Nov. Results:

open/save	file  	running	status
			format	on
---------	------	-------	-------
Open		N105	PPC		OK
"			"		Intel	OK: Ngale correctly says "file version too old"
"			N106	PPC		OK*
"			"		Intel	Unreliable; randomly fails with ??
Save		N106	PPC		OK
"			"		Intel	OK for simple files (default score; notes, beams, barline,
							dynamic, text Graphic,slur); saving tuplets may be a problem**

*Larger files tested: 2ndMovement_pp1-29ConvPPC.ngl, GraphicsOnWrongPage_ConvPPC.ngl.

**Looks like a terrible bug in Create Tuplet on Intel. (Or is it saving files containing
tuplets? See below.) In Notes+Beams+Barline+More2.ngl, select the three 8th notes on the
top staff starting a quarter note in, then Create Tuplet => the Tuplet's 1st subobject
<tpSync>=4608 and <next>=512: both nonsense. 4608 = 1152 * 4, and 1152 is a common no. in
Ngale as the 1st System's yd; but so what? 512 = 256 * 2, i.e., it's 2 in the wrong
Endian. (Furthermore, Debug Check isn't complaining, though DCheckNode() has code that
sure looks like it should!?  Try again => Debug Check complains properly; so does Debug
Display. Oh well; I'm not sure what really happened when I didn't get a complaint, so may
not be worth pursuing the likely bug in Debug Check.)

Try a 3rd time => the tuplet looks OK; the <tpSyncs>s are correct; and Debug Check doesn't
complain! Try a 4th time => all OK again! Try a 5th time => the 1st <tpSync>=48220 and
<next>=512: both nonsense again, and in a very similar way to the previous failure. But
am I sure the problem isn't in opening the file??

Try a 6th time => Create Tuplet seems to work fine. After it, Debug Check has no complaints,
and Debug Display shows the Tuplet correctly:

	Mar  6 21:35:11 Dons-2017-Air Ngale[58358]:
	...
	info.  16 L60 xd=0 yd=0 TUPLET SV.... oRect.l=p259 stf=1 v=1 num=3 denom=2 n=3
	info.      L1 tpSync=L64
	info.      L2 tpSync=L65
	info.      L3 tpSync=L66
	info.  17 L64 xd=776 yd=0 SYNC SV.V.. oRect.l=p242 TS=480 LT=480 n=2
	info.      L39 stf=2 v=2 xd=0 yd=96 ystm=320 yqpit=10 ldur=4 .s=0 acc=0 onV=75 .V.. .... ... 1stMod=0
	info.      L40 stf=1 v=1 xd=0 yd=-96 ystm=176 yqpit=-26 ldur=5 .s=0 acc=0 onV=75 SV.. .B.. ..T 1stMod=0
	info.  18 L65 xd=992 yd=0 SYNC SV.V.. oRect.l=p261 TS=640 LT=640 n=1
	info.      L41 stf=1 v=1 xd=0 yd=-64 ystm=185 yqpit=-24 ldur=5 .s=0 acc=0 onV=75 SV.. .B.. ..T 1stMod=0
	info.  19 L66 xd=1168 yd=0 SYNC SV.VT. oRect.l=p278 TS=800 LT=800 n=1
	info.      L42 stf=1 v=1 xd=0 yd=-32 ystm=192 yqpit=-22 ldur=5 .s=0 acc=4 onV=75 SV.. .B.. ..T 1stMod=0

Save as Notes+Beams+More2Q.ngl. Open => Ngale crashes instantly!

Rename all these tests more systematically: call the 6 without octave sign Notes+Beams+More2xxx;
the one with an octave sign Notes+Beams+More3xxx... done. Open & check'em all on PPC => the
no-ottava files all have no problems; the one w/ an ottava has the usual problems! I'm not
sure how I got the latter, but quite possibly I opened it and added the ottava on PPC. Anyway,
a bug in saving tuplets on Intel would explain everything! Hmmm. Maybe not :-(

Create 4Notes.ngl on Intel (LE); tupletize 3 on PPC (BE) & save as 4Notes+Tuplet_LE-BE.ngl;
open on Intel => Tuplet is screwed up as above. Create 4Notes.ngl on PPC (BE); tupletize 3
on PPC (BE) & save as 4Notes+Tuplet_BE-BE.ngl; open on Intel => again Tuplet is screwed up
as above. Conclusion: there's no evidence of a bug in saving tuplets on Intel, but plenty
of evidence of a bug in opening files containg tuplets on Intel!

---------------------------------------------------------------------------------------

11 - 13 March

Opening an N106 file on Intel, if the file contains tuplets, it might (1) have no
problems; (2) give the Tuplet messed- up subobjects, as above; or (3) crash after giving
the "Opened file 'Blah-de-blah'" message but before drawing it.

Ah-hah! 4Notes+Tuplet_BE-BEOpenLELog.txt shows that in ReadHeaps just before its calls
to EndianFixSubobjs, L1 (HEAD), L9 (MEASURE), and L11 (TUPLET) objects all have their 1st
subobject with L1 and their 2nd with L512 (=2 not Endian fixed); after the calls to
EndianFixSubobjs, the HEAD and MEASURE have had their 2nd subobjs corrected to 2, but
the TUPLET's 2nd is still 512!! A smoking gun!!!

Cause: EndianFixSubobj() has the correct code to handle Tuplet subobjects, but it's never
executed because the switch stmt in EndianFixSubobjs() doesn't have a case TUPLETtype.
Arrrgh. Fix that; open 4Notes+Tuplet_BE-BE.ngl => it works perfectly! Open
AllObjTypes_ConvByPPC.ngl => all OK except Ngale draws the numbers for measure nos. 2 and
3 as 257 and 513, so the sequence (if I add another 3 measures) is 1, 257, 513, 4, 5, 6!?!
-- a bug, though it doesn't look too serious. Open 2ndMovementCSpp1-3.ngl (conve#0 => not
bad. The 50 or so tuplets all look OK; measure nos. are screwed up as before. Also, p. 3
has 3 long diagonal lines across it; one at least is supposed to be a hairpin dynamic!
Debug Check has tons of complaints; other than the correct ones about unanticipated time
signature changes, they all seem to be about suspicious measure numbers.

---------------------------------------------------------------------------------------

14 - 18 Mar.

Revise the chart of combinations of open/save, file format, processor type from early March:

open/save	file  	running	status
			format	on
---------	------	-------	-------
Open		N105	PPC		OK
"			"		Intel	OK: Ngale correctly says "file version too old"
"			N106	PPC		OK
"			"		Intel	??UPDATE! Unreliable; hairpins tend to appear as long diagonal lines*

Save		N106	PPC		OK
"			"		Intel	OK for simple files (default score; notes, beams, barline,
							dynamic, text Graphic, slur, tuplets)
							
*Bcs endxd & endyd are very large numbers; endxd is negative.

Open 2ndMovement_pp1-29Conv.ngl on Intel =>

	Mar 15 07:21:55 Dons-2017-Air Ngale[92261]:
	Notice. Opened file '2ndMovement_pp1-29Conv.ngl'.  (DoFileMenu)
	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: GARBAGE MODNR LINK 16896 IN VOICE 1 IN SYNC L1238.
	Warning. *DCheckNode: GARBAGE MODNR LINK 17408 IN VOICE 1 IN SYNC L1239.
	Warning. *DCheckNode: GARBAGE MODNR LINK 17920 IN VOICE 1 IN SYNC L1240.
	Warning. *DCheckNode: GARBAGE MODNR LINK 19712 IN VOICE 10 IN SYNC L1317.
	Warning. *DCheckNode: GARBAGE MODNR LINK 3329 IN VOICE 13 IN SYNC L3742.

There are 288 modifiers in the file; what's special about those 5? The first three (in
flute in m. 74), are notes with _two_ modifiers; so is the 4th (solo violin, m. 81)!
the 5th (viola in m. 185) ??

Ah: Of course MODNR subobjects are attached to other subobjects -- notes or rests --
rather than objects. Our strategy of calling EndianFixSubobjs for every object and having
it handle all the subobjs of the object doesn't work. But just having EndianFixSubobjs
for a Sync also handle the MODNR subobjs of each subobj should do the job! Write
EndianFixModNRs, and call it from EndianFixSubobjs, case SYNCtype; try it on Intel with
1Note2Modifs.ngl (just what it sounds like) =>

Mar 17 17:01:35 Dons-2017-Air Ngale[3049]:
debug. EndianFixSubobjs: objL=9 heapIndex=7 FirstSubLINK()=1
debug. EndianFixModNRs: aNoteRL=L1 NoteFIRSTMOD=L1
debug. EndianFixModNRs<: aModL=L1
debug. EndianFixModNRs>: aModL=L256
debug. EndianFixModNRs<: aModL=L38892
debug. EndianFixModNRs>: aModL=L60567

No, because NoteFIRSTMOD is embedded in the note/rest and it's already been fixed! Change
that & try again =>

Mar 17 17:08:32 Dons-2017-Air Ngale[3078]:
debug. EndianFixSubobjs: objL=9 heapIndex=7 FirstSubLINK()=1
debug. EndianFixModNRs: aNoteRL=L1 NoteFIRSTMOD=L1
debug. EndianFixModNRs<: aModL=L512
debug. EndianFixModNRs>: aModL=L2

Yes, and it's drawn correctly! Open 2Notes5Modifs.ngl (first note has 2 modifiers, 2nd
note has 3) => it works! Open 2ndMovement_pp1-29Conv.ngl => all OK.

Open AllObjTypes_Conv.ngl on Intel => log ends

	Mar 18 14:31:21 Dons-2017-Air Ngale[7873]:
	info. Staff sizes in points are  1:20 2:20
	Notice. Opened file 'AllObjTypes_Conv.ngl'.  (DoFileMenu)

...then Ngale hangs :-( .

Open file Notes+Beams+More2.ngl => OK.
Open Notes+Beams+More3.ngl (adds 8va) => OK.
Open Notes+Beams+More4.ngl (adds tuplet) => OK.

Open AllObjTypes_Conv.ngl => looks OK, but, with Debug Check, log ends:

	Mar 18 14:56:33 Dons-2017-Air Ngale[7990]: 
	info. Staff sizes in points are  1:20 2:20
	Notice. Opened file 'AllObjTypes_Conv.ngl'.  (DoFileMenu)
	info. DEBUG 'Menu'-Standard: --CHECK MAIN:
	Warning. *DCheckNode: SUBOBJ IN PSEUDOMEAS L13 staffn 0 IS BAD.
	info. Discont. sel, 0 objs in range, 0 sel, 37 total.  2 voices.
	info. --CHECK MASTER:  Done.
	info. --CHECK CLIPBOARD:  Done. 1 ERROR(S). 

Cause: EndianFixSubobjs doesn't have a case EndianFixSubobjs! Correct that; open
AllObjTypes_Conv.ngl on Intel 3x => looks and acts OK and Debug Check has no complaints
each time. So at the moment, I know of zero file-compatibility problems between PPC and
Intel!

---------------------------------------------------------------------------------------

19 - 26 March

SWITCH TO: Trying to use certain commands on an Intel Mac that should open a dialog
containing a pop-up menu instead just give the log message "Warning. Can't create the
graphic pop-up. The font may not be available. (InitGPopUp)". The problem commands include
Set Duration, Add Modifiers, and Fancy Tuplet; also double-clicking a dynamic.

SWITCH TO: Test the old DemoNgaleScores. On PowerPC:
Alpher Qtet gives error message & draws blank page; w/ 5.8.10, it looks OK & Debug is happy
Larson HBD gives error message & draws blank page; w/ 5.8.10, it looks OK & Debug is happy
Mahler has an error in Document header (startPageNumber=32767); with 5.8.10, likewise.
AliceInW is fine; with 5.8.10, likewise.
Bach BWV 540 hangs; w/ 5.8.10, it looks OK & Debug is happy.
These are all N105 format, but the Bach's filename is "Bach-BWV540FMToccata (conv)", so
it must have been converted from an earlier format.

BACK TO: On Intel, some commands give a warning instead of a pop-up menu. Set Duration
results in:

	Mar 22 08:08:30 Dons-2017-Air Ngale[2549]:
	debug. InitGPopUp: numItems=18 numColumns=9 fontSize=30 itemChars=162622544
	Warning. Can't create the graphic pop-up. The font may not be available.  (InitGPopUp)

Duh. <itemChars> is an address; no wonder it's a huge number. Anyway, the problem really
is getting the font; what are asking for? Testing on PowerPC, for the Set Duration
command:

	Mar 22 16:26:17 DonDualG5 Ngale[90585]:
	debug. InitGPopUp: numItems=18 numColumns=9 fontSize=30 fontname='0x50000opDurs'
	debug. InitGPopUp: numItems=27 numColumns=9 fontSize=30 fontname='0x50000opDurs'

Double-clicking a dynamic:

	debug. InitGPopUp: numItems=10 numColumns=5 fontSize=30 fontname='0x13850000opDynMod'

Add Modifiers command:

	debug. InitGPopUp: numItems=24 numColumns=6 fontSize=30 fontname='0x13850000opDynMod'

Fancy Tuplet command:

	debug. InitGPopUp: numItems=9 numColumns=9 fontSize=30 fontname='0x5001c80opDurs'

The actual fontnames are "%popDurs" and "%popDynMod". So these are correct except that
the initial "%p" is replaced by what appears to be a hex number! Where do they come from?
No wonder the Intel resource manager can't find the fonts, but how is the PowerPC
resource manager doing it?? Who cares. It's very likely changing the names to something
with no odd chars. like "%" will solve the problem.

With Resorcerer, change font name from "%popDurs" to "popDursN" in 'chgd' 139
("SetDur0dot") & 140 ("SetDur1dot"). Compile & run on PPC; Set Duration =>

	Warning. Can't create the graphic pop-up. The font 'popDursN' isn't available.  (InitGPopUp)

-- exactly as expected. In Nightingale.rsrc, change the name of 'fond' 32303 from
"%popDurs" to "popDursN", try again => no change. That makes sense because an actual font
resource with that name doesn't exist. NFNT "%popDurs" is in NightingaleUIFonts, a copy of
NFonts.rsrc; change its name to "popDursN" => no change, and Font Book doesn't show it,
even after restarting. Likewise with  "%popDynMod" => "popDynModN". Rename
"NightingaleUIFonts" to "Nightingale2021UIFonts"; use Font Book's Add Fonts command on it
=> "popDursN" & "popDynModN" still don't appear in Font Book. Ugh. [But not appearing
there doesn't mean it's not available! See notes for 28 Mar. - 6 April below.] 

Add to InitGPopUp:

#define HORRIBLE_KLUDGE
#ifdef HORRIBLE_KLUDGE
		Pstrcpy(chgdP->fontName, "\pJUNK%1");		
#endif

...and try again =>

	debug. InitGPopUp: numItems=18 numColumns=9 fontSize=30 fontname='JUNK
	Warning. Can't create the graphic pop-up. The font 'JUNK-2063592320sn't available.  (InitGPopUp)

Change the above Pstrcpy thus:

		Pstrcpy(chgdP->fontName, "\p%JUNK");		

produces

	debug. InitGPopUp: numItems=18 numColumns=9 fontSize=30 fontname='JUNK'
	Warning. Can't create the graphic pop-up. The font 'JUNK' isn't available.  (InitGPopUp)

!! It seems that '%' in a Pascal string is a huge problem: it (and possibly following
chars.) gets replaced with either nothing or some number -- I've seen ca. 8 to 12 -- chars.
that appear to be a large integer, sometimes in hex (0x) format T(&@$@P$(&%$#+=*! .

Change the string to ""\p%ABCD" =>

	debug. InitGPopUp: 05 25 41 42   43 44 75 72   73 00 32 30   2e 2c 2a 28
	
Add a call to NHexDump =>

	debug. InitGPopUp: 05 25 41 42   43 44 75 72   73 00 32 30   2e 2c 2a 28
	debug. InitGPopUp: numItems=18 numColumns=9 fontSize=30 fontname='-0X1.016008080808P-943BCD'
	Warning. Can't create the graphic pop-up. The font '0X1.994808080808P-1020BCD' isn't available.  (InitGPopUp)

The first six bytes in the dump are indeed the P string "%ABCD"! Add another LogPrintf:

	debug. InitGPopUp: 05 25 41 42   43 44 75 72   73 00 32 30   2e 2c 2a 28
	debug. InitGPopUp<: numItems=18 numColumns=9 fontSize=30 fontname='^E-0X1.031008080808P-943BCD�^P���h����'
	debug. InitGPopUp>: numItems=18 numColumns=9 fontSize=30 fontname='0X1.500008080808P-711BCD'
	Warning. Can't create the graphic pop-up. The font '0X1.994808080808P-1020BCD' isn't available.  (InitGPopUp)

This makes NO sense!!! There's just a Pstrcpy and a PToCString between the 1st two lines. Add
another NHexDump and another LogPrintf:

  a debug. InitGPopUp1: chgdP->fontName: 05 25 41 42   43 44 75 72   73 00 32 30   2e 2c 2a 28
  b	debug. InitGPopUp2: chgdP->fontName: 05 25 41 42   43 44 75 72   73 00 32 30   2e 2c 2a 28
  c	debug. InitGPopUp3: fontNameC: 05 25 41 42   43 44 bb 30   93 f0 cd 68   bf ff f1 a0
  d	debug. InitGPopUp<: numItems=18 numColumns=9 fontSize=30 fontname='^E-0X1.030808080808P-943BCD�0���h����'
  e	debug. InitGPopUp>: numItems=18 numColumns=9 fontSize=30 fontname='0X1.500008080808P-711BCD'
  f	Warning. Can't create the graphic pop-up. The font '0X1.C05008080808P-1022BCD' isn't available.  (InitGPopUp)

Lines b & c show Pstrcpy is OK. Add yet another NHexDump:

  a	debug. InitGPopUp1: chgdP->fontName: 05 25 41 42   43 44 75 72   73 00 32 30   2e 2c 2a 28
  b	debug. InitGPopUp2: chgdP->fontName: 05 25 41 42   43 44 75 72   73 00 32 30   2e 2c 2a 28
  c	debug. InitGPopUp3: fontNameC: 05 25 41 42   43 44 c8 70   93 f0 cd 68   bf ff f1 a0
  d	debug. InitGPopUp<: numItems=18 numColumns=9 fontSize=30 fontname='^E-0X1.030808080808P-943BCD�p���h����'
  e	debug. InitGPopUp4: fontNameC: 25 41 42 43   44 00 c8 70   93 f0 cd 68   bf ff f1 a0
  f	debug. InitGPopUp>: numItems=18 numColumns=9 fontSize=30 fontname='0X1.500008080808P-711BCD'
  g	Warning. Can't create the graphic pop-up. The font '0X1.C05008080808P-1022BCD' isn't available.  (InitGPopUp)

Lines b & c show Pstrcpy is OK; lines c & e show PToCString is OK -- so how can f have the
1st two chars of fontNameC replaced by 22 chars of trash? The real problem is what line g
shows for the font name, of course, but surely it's the same reason! Okay,
DisplayScoreHdr() uses slightly simpler code to display a font name ?? That doesn't seem
to help, though I'm not quite sure.

InitNightFonts uses
	GetFNum("\pSonata", &sonataFontNum);				/* Get ID of Adobe Sonata font */

Does GetFNum help? No; it just gives me the font number for Courier, and trying to use the
graphic menu in the Set Duration dialog results in

	Warning. Font for graphic menu is missing.  (InitGlobals)
	Warning. Font for graphic menu is missing.  (SizeMenu)

Well, I could probably kludge around those, so Set Duration would at least be usable! Not
a great solution :-| .

Another try at adding popDursN & popDynModN: I changed the NFNT names from the originals
with %'s in Nightingale2021UIFonts, but not the FONDs! Use Resorcerer to fix that; use
Font Book's Add Fonts command => no change. Why? Use Font Book's Validate File command on
Nightingale2021UIFonts => it says, for popDursN, the NFNT is OK; the FOND's "font
association usability" has a serious error, but otherwise is OK. The same thing for
popDynModN. What can I do about "font association usability"??

$%*^&&^)_^$)*)*^&*&%^  My G5 now has the same problem as my MacBook! No doubt as a result
of my messing around with /Library/Fonts or possibly with Font Book. So Set Duration, edit
tempo mark/MM, etc., are now virtually unusable on the G5 too :-( .

Web search finds lots of people with the "'FOND' font association usability" problem,
starting with OS 10.5.x; very few suggested solutions, and none that seems at all
relevant. What happens on OS 10.14? Try on my MacBook => Font Book's Validate File  says
exactly the same thing about Nightingale2021UIFonts! Good; it's more likely I can find a
solution.

---------------------------------------------------------------------------------------

28 Mar. - 6 April

Does looking at the fonts the system knows about help? We already have an EnumerateFonts()
function, so modify it to list them. Run on G5 => it finds 143 font families; none of the
names includes the string "pop". On MBAir, it finds 689(!); none of the names includes
"pop". Sigh.

Doug McKenna: See if FontForge can open my fonts, then save them in a possibly-better
state! Nope, it doesn't look like it can open bitmap fonts: not surprising.

Hey, why do I need special fonts? The chars. I want are almost all in Sonata!!  Oops;
probably not. Besides notehead w/ question mark (for unknown duration), Set Duration needs
noteheads with stems & flags; does Sonata have those? Yes! But it also needs them with one
and two dots; it doesn't have those.

Now, what happens ON TORREY'S OLD WHITE MACBOOK, running macOS 10.6.x?

(1) Enumerate Fonts lists 354 fonts, none of which includes the string "pop", then runs
into the 500 log messages per second limit after getting up to fondID 17570. But
"%popDurs" and "%popDynMod" should be 32303 and 32304 -- that's what they are in
NFonts.rsrc; no wonder they aren't listed. With the usual kludge to sidestep the max. log
messages problem:

	Apr  1 10:30:33 unknown001f5bbee8ff Ngale[790]:
	...
	debug. EnumerateFonts: fondID=32303 fontFamilyName='0xbfffdc98opDurs'
	debug. EnumerateFonts: fondID=32304 fontFamilyName='0xbfffdc98opDynMod'
	debug. EnumerateFonts: fondID=32401 fontFamilyName='LittleNight'

NB that LittleNight also appears in this list -- BUT Font Book still doesn't list them,
not even LittleNight! So their non-appearance in Font Book on my G5 and MBAir means
nothing. In fact, on my G5, Font Book lists 106 fonts, but EnumerateFonts lists 144.

And the "%p" in the names of "%popDurs" and "%popDynMod" is another red herring, though
it's undoubtedly why their names are shown in the log with "%p" replaced by a hex number:
that certainly seems to be because the %s conversion specifier is interpreting the "%p" in
the string as if it's itself a conversion specifier, contrary to the C99 standard (or
AFAIK any other C standard).

(2) Set Duration works!, though the pop-up is blank where every other char. should be.
Relevant log messages:

	Mar 31 17:28:58 unknown001f5bbee8ff Ngale[224]:
	debug. InitGPopUp<: numItems=27 numColumns=9 fontSize=30 fontNameC='^H0xbffff638opDurs⍚'
	debug. InitGPopUp4: fontNameC: 25 70 6f 70   44 75 72 73   00 e2 8d 9a   00 00 00 00
	debug. InitGPopUp>: numItems=27 numColumns=9 fontSize=30 fontNameC='0xbffff638opDurs'
	debug. InitGPopUp5: fontNameC: 25 70 6f 70   44 75 72 73   00 e2 8d 9a   00 00 00 00
	debug. InitGPopUp7: chgdP->fontName: 08 25 70 6f   70 44 75 72   73 00 32 30   2e 2c 2a 28
	debug. InitGPopUpX: p->fontNum=32303

Check my MAC MINI: In Font Book, Validate File AllNightingaleFontStuff_2002/NightFonts 2000
(mod. July28, 2001 at 12:48 PM) => 2 minor problems -- but it doesn't look like any of the
three UI fonts are there, only Sonata plus 'NFNT' 4371, whatever that is.
 
---------------------------------------------------------------------------------------

7 - 12 April

Could the problem be a conflict with font IDs? The highest IDs on my MBAir:

	debug. EnumerateFonts: fondID=19464 fontFamilyName='Lucida Grande CY'
	debug. EnumerateFonts: fondID=30742 fontFamilyName='Lucida Grande CE'

On the G5:

	debug. EnumerateFonts: fondID=30742 fontFamilyName='Lucida Grande CE'
	debug. EnumerateFonts: fondID=30745 fontFamilyName='Courier CE'

On Torrey's Old White MacBook:

	debug. EnumerateFonts: fondID=30742 fontFamilyName='Lucida Grande CE'
	debug. EnumerateFonts: fondID=32303 fontFamilyName='0xbfffdc98opDurs'
	debug. EnumerateFonts: fondID=32304 fontFamilyName='0xbfffdc98opDynMod'
	debug. EnumerateFonts: fondID=32401 fontFamilyName='LittleNight'

It doesn't look like it's a font ID conflict, but it'd be easy to change them!

More ideas for the UI font problem: (1) Change the font IDs to something that doesn't
conflict w/ any existing font. (2) Get a bitmap font editor, preferably one that claims to
work all the way thru OS 10.14, and either open and somehow repair the existing fonts, or
recreate them.

Try #1. Of the fonts EnumerateFonts finds, there are no IDs in the 30500's on any of the
three Macs. On PPC, in NightingaleUIFontsNEW, change the ID of "%popDurs" to 30503, and
"%popDynMod" to 30504; drag (a copy of) NightingaleUIFontsNEW into /Library/Fonts. Restart;
DisplayAvailableFonts (formerly code in EnumerateFonts) doesn't list either, and Set
Duration =>

	Apr  9 11:25:22 DonDualG5 Ngale[169]:
	debug. InitGPopUp7: chgdP->fontName: 08 25 70 6f   70 44 75 72   73 00 32 30   2e 2c 2a 28
	Warning. Can't create the graphic pop-up. The font '0x38363080opDurs' isn't available.  (InitGPopUp)

So that doesn't work.

Grab bitmaps from T.'s Old White MacBook: SetDur_2dots.tiff, ChangeDynamic.tiff,
and AddModifier.tiff.

Try #2. There seem to be at least three bitmap font editors that run on macOS's thru 10.14:
BitFonter 3, Glyph Designer, and bmGlyph; that's encouraging. But does that mean they
create FONDs and NFNTs or some equivalent a C program can use (assuming there is any
equivalent)? It doesn't look like it :-( .  Maybe time to try Doug McKenna's idea of 1
April: 

	Doug: I'm not entirely sure why a font is being used in the popup.  Might some kind of
	pure bitmap work?  Could you create such a bitmap from doing a screenshot of a working
	NGale install on some machine?

	Me: I’m sure a pure bitmap would work — and I should be able to get one from the Ngale
	for PPC on my ancient MacBook. But I haven’t given up on getting the font approach
	working yet; I’m still gathering information.

SWITCH TO: Test the old DemoNgaleScores. Cf. notes above from 19 - 26 March. On PowerPC:
Alpher Qtet, w/ 5.8.10, looks OK & Debug is happy; w/ 5.9.x, gives an error message:

	Apr 12 16:10:27 DonDualG5 Ngale[4183]:
	info. stringPoolSize=1616  (OpenFile)
	ERROR. footerStrOffset is 47186496 but stringPoolSize is only 1616.  (OpenFile)
	ERROR. CAN'T OPEN THE FILE. errCode=0 errInfo=-990  (OpenError)

...but opens it anyway and draws a blank page. 

Larson HBD, w/ 5.8.10, looks OK & Debug is happy; w/ 5.9.x, gives an error message:

	info. stringPoolSize=1086  (OpenFile)
	ERROR. footerStrOffset is 47186532 but stringPoolSize is only 1086.  (OpenFile)
	ERROR. CAN'T OPEN THE FILE. errCode=0 errInfo=-990  (OpenError)

...but opens it anyway and draws a blank page.

---------------------------------------------------------------------------------------

13 - 22 Apr.

BACK TO: UI font problem. Got the demo version of BitFonter 3 & its manual. ON MY G5, open
one of its sample fonts; hack at a couple of glyphs with pencil tool; Save As Macintosh
Font Suitcase => accept despite "warning: chars. will be distorted because it's a demo
version" (problem #1). Validate Font w/ Font Book => "'FOND' font association usability"
has a serious error! Open an installed font, Zapfino; hack at a couple of glyphs; Save As
Macintosh Font Suitcase => same problem! (Problem #2)

Create New default font; open AddModifier.tiff; select a glyph; Copy => all looks OK.
Switch to main font window; select a char => Paste is disabled :-( . (Problem #3)

Problem #1 surely just needs $$ to overcome; problem #3 presumably has a simple answer.
But problem #2 is scary!

BitFonter's “Import installed font (legacy mode)” would be ideal, but I can’t use it
because our fonts don’t show up in its scrolling list of fonts -- which is probably
identical to Font Book's. Grrrrr. Alex Petrov/FontLab says:

	I suspect the first problem is that FontBook just doesn't support bitmap fonts without
	corresponding outline component. That was a long time ago but I remember we put fonts
	to the System Fonts folder manually at those times. There was no FontBook in the
	system. And Apple dropped support of bitmap-only fonts at some point. I just don't
	remember when exactly. The BitFonter 3 Manual (2007) includes this note on page 204: ​

		Note: Macintosh fonts containing only bitmap fonts (NFNT' or 'FONT' resources)
		and not containing a link to outlines are no longer supported in MacOS X.

	So you need to somehow add the outline component to your suitcases.

This doesn't explain why Ngale could use these fonts on OS 10.5.x until a few weeks ago,
or why it can still use them on 10.6.x! -- but I can imagine how that could happen.

On the 3rd hand, I need to make the tool palette work on Intel regardless, and the
functionality Ngale's dialogs that use the pop-up fonts is identical to what the tool
palette needs, except for the pop-up aspect, which I don't think is important, and the
fact that it's within a modal dialog, which shouldn't make much difference. So the
path of least resistance is probably to work on the tool palette next!

The tool palette is currently drawn from a PICT resource with ?? API. It very likely fails
on Intel because of PICT-specific fields I'm not Endian fixing; but PICTs are way more
complex than what I need, and rather than debug it, it looks like it'd be better to use a
different image format. Several apps on my G5 use TIFFs or JPGs for the graphics, and I
now have TIFFs of images of Ngale's pop-up menus; switch Ngale to use TIFFs?

BACK TO: Some old DemoNgaleScores, all in N105 format,  have problems on my G5.
* Alpher Qtet, w/ 5.8.10, looks OK & Debug is happy; w/ 5.9.x, it gives error message

	ERROR. footerStrOffset is 47186496 but stringPoolSize is only 1616.  (OpenFile)

* Larson HBD, w/ 5.8.10, looks OK & Debug is happy; w/ 5.9.x, it gives error message
	
	ERROR. footerStrOffset is 47186532 but stringPoolSize is only 1086.  (OpenFile)

* ANightingaleSangInBarclaySquare.ngl, w/ both, has an error in Document header field 10
(startPageNumber=32767). W/ 5.8b3, it's fine: no complaints, and startPageNumber seems
to be 1! ??

* MahlerLiedVonDE_27.ngl, the same as ANightingaleSangInBarclaySquare.ngl. ??

* AliceInW is fine with both 5.8.10 and 5.9.1.

* Bach BWV 540 is fine with both 5.8.10 and 5.9.1. (It was converted from 4.5 format, but
some of the others undoubtedly were too.)

Is the nonsense footerStrOffset value a real problem? Add code to ignore headerStrOffset &
footerStrOffset iff secret keys are down. Open AlpherQt_20.ngl that way => looks OK (no
header is drawn, as desired) & Debug is happy. Add a footer => "The operation failed,
perhaps because Nightingale has run out of memory." Open Larson HBD that way => same
result. So yes, it's a real problem! How about with 5.8.10? Same result. So it's not a
new bug, it's just that we now check for it and complain. But what to do? Try just
replacing illegal values with 0 => seems to solve the problem: adding a real footer now
works!

---------------------------------------------------------------------------------------

23 - 28 Apr.

Add code to let user choose whether to open files with header errors. Test with
contrived Document header and Score header errors => OK. Test w/ real scores,
ANightingaleSangInBarclaySquare.ngl & MahlerLiedVonDE_27.ngl => OK.

BACK TO: UI font problem. Possible solutions are (1) get the existing fonts working
on Intel Macs on OS versions thru 10.14, and working again on my G5; (2) re-create
the fonts from the images (I have TIFFs); (3) abandon fonts and use the images as a
palette, either (3a) as pop-ups or (3b) by displaying the palette whenever the dialog
is open.

For #1, the problem seems always to be what Font Book's Validate File command describes as
the FOND's "font association usability" having a serious error, but I don't know what else
I can try to fix it. For #2, I'd have to use a bitmap font editor. So far, BitFonter 3 is
a complete failure: just modifying an existing font fails the same way my UI fonts fail,
with Font Book's complaint about the FOND's "font association usability"! But BitFonter's
tech support guy has been very helpful, so I could ask him again, or try one of the other
bitmap font editors (bmGlyph says I can download and try it for free).

#3 has a huge advantage: using palettes instead of UI fonts should also solve, or at least
#go a long way towards solving, the "tool palette is never filled in on Intel machines"
problem! What's the easiest way to do that? It looks like libtiff is the standard
open-source library for TIFFs. "Using The TIFF Library":

	http://www.libtiff.org/libtiff.html
	
says "libtiff is a set of C functions (a library) that support the manipulation of TIFF
image files. The library requires an ANSI C compilation environment for building and
presumes an ANSI C environment for use."

Hmmm. I don't have to actually read the TIFFs in Ngale! It might be quicker to use
somebody's sample code in Python or R or whatever to read the TIFFs and convert them to an
extremely simple format I can read in Ngale without libtiff. Mac OS has tiffutil, which
has a dump option -- but actually BMP format is probably easier to decode than TIFF, and
GraphicConverter will give me BMPs! Cf. the Wikipedia article on BMPs and bmp_header_dump
(https://github.com/ekardnam/bmp_header_dump/blob/master/src/main.rs).

BMPs consist of a 14-byte Bitmap File Header and a 40-byte(?) DIB header, followed by the
raw data. But it seems the DIB header isn't necessarily 40 bytes. Compare BMPs from
Graphic Converter of all white, all black, and diagonal stripes -- using hexdump -C -n 96
filename, here's the first 96(10) bytes of diagonal stripes:

	00000000  42 4d 3e 01 00 00 00 00  00 00 3e 00 00 00 28 00  |BM>.......>...(.|
	00000010  00 00 40 00 00 00 20 00  00 00 01 00 01 00 00 00  |..@... .........|
	00000020  00 00 00 01 00 00 13 0b  00 00 13 0b 00 00 02 00  |................|
	00000030  00 00 02 00 00 00 00 00  00 00 ff ff ff 00 77 77  |..............ww|
	00000040  77 77 77 77 77 77 bb bb  bb bb bb bb bb bb dd dd  |wwwwww..........|

The raw data appears to start with the 77's, 62(10) bytes in; white (all ff's) and black
(all 00's) start at the same place, so that's where the raw data starts! Check: Other than
the tool palette, Ngale's palettes all have white pixels at every corner, so should have
ff's starting at that point. Here's hexdump -C -n 96 ChangeDynamicNB.bmp :

	00000000  42 4d 7e 03 00 00 00 00  00 00 3e 00 00 00 28 00  |BM~.......>...(.|
	00000010  00 00 78 00 00 00 34 00  00 00 01 00 01 00 00 00  |..x...4.........|
	00000020  00 00 40 03 00 00 13 0b  00 00 13 0b 00 00 02 00  |..@.............|
	00000030  00 00 02 00 00 00 00 00  00 00 ff ff ff 00 ff ff  |................|
	00000040  ff ff ff ff ff ff ff ff  ff ff ff ff ff 00 ff ff  |................|

Yes! 

---------------------------------------------------------------------------------------

1 - 14 May

Work towards getting Set Duration palette from a .bmp: write InitSetDurPalette(). At the
moment it includes (#ifdef'd out) a lot of code from GetPrefsFileSpec() that needs to be
modified -- or, probably better, generalize GetPrefsFileSpec (which will then belong in
FileUtils.c!) and just call it here. ...or, is the much, much simpler FSpOpenInputFile()
appropriate??

SWITCH TO: There's a long-standing bug where trying to play ancient files results in
nothing happening until you click Set Device To All Parts in the Instrument MIDI Settings
Dialog; I haven't seen it in any file created in many years, until today :-( . It happens
with both VnDuet.ngl and VnDuetN106.ngl (the latter on Intel as well as G5), versions of
3 May, ca. 6 PM. Cf. loop in PlaySequence(). After the comment "Play all the notes in <pL>
we're supposed to...", how can we stop instantly just because of whatever Set Device To
All Parts fixes? We play notes by calling CMStartNoteNow(); it returns an error code,
which we ignore; but CMEndNoteLater() returns an error code, which may lead us to jump to
done and stop playing -- and we don't tell the user there was an error!! Add reporting =>

	ERROR. Can't play the score (error -16961). Try Instrument MIDI Settings > Set Device To All Parts.  (PlaySequence)

As usual, Set Device To All Parts fixes. What is error -16961? It's not listed in
MacErrors.h, version CarbonCore-769~1 of (based on its copyright notice) 2008. Oh well;
it's not worth pursuing now! BUT, trying to play 2ndMovementConv.ngl, I got the message
"There are no devices available to play part %s.  You may proceed but no MIDI output will
occur." -- string #15 of STR# 235 (MIDIPLAYERRS_STRS); then it _did_ play!?! Also not
worth pursuing now.

---------------------------------------------------------------------------------------

15 - 18 May

BACK TO: UI font problem, solution #3: abandon fonts and use the images as a palette,
either (3a) as pop-ups or (3b) by displaying the palette whenever the dialog is open.

Write code to read BMPs & display important fields, SimpleBMPUtil; test w/ the double-
click "change dynamic" palette:

	Dons-2017-Air:Debug donbyrd$ ./SimpleBMPUtil ChangeDynamicNB.bmp 
	SimpleBMPUtil - May 2021
	input file 'ChangeDynamicNB.bmp'
	fileSize=894 offsetToPixelArray=62
	infoHdrSize=40 width=120 height=52 bits=1
	imageSize=832 xResolution=2835 yResolution=2835 colors=2

The important fields are <offsetToPixelArray> and <colors>; they're as expected, and
everything makes sense! Test with the other 3 palettes => all OK.

---------------------------------------------------------------------------------------

24 May - 2 June

SWITCH TO: abandon UI fonts and use the images as a palette, **** USING NGALE 5.8. ****

The problem commands and corresponding palettes:

	Set Duration: SetDur_2dots1bitNB
	Add Modifiers: AddModifierNB
	Fancy Tuplet: SetDur_2dots1bitNB (top row only)
	[Double-click non-hairpin dynamic]: ChangeDynamicNB

We also want to abandon the PICT for the tool palette and use a bitmap image for that.
But first, try opening the palette bitmap image file:

	May 26 06:35:06 DonDualG5 Ngale[14267]:
	debug. Opening BMP file 'SetDur_2dots1bitNB.bmp'...  (InitSetDurPalette)
	ERROR. Can't open palette bitmap image file 'SetDur_2dots1bitNB.bmp'. errno=2  (InitSetDurPalette)
	ERROR. PROGRAM ERROR: Can't get the Set Duration palette from BMP file.  (InitSetDurPalette)

What's errno=2? Open Transport Reference (in Xcode Developer Docs) says errno=2 is ENOENT;
what does that mean? errno.h should say more! In /Xcode2.5/SDKs/MacOSX10.4u.sdk/usr/include/sys/errno.h:

	#define	ENOENT		2		/* No such file or directory */

No surprise. Copy SetDur_2dots1bitNB.bmp into the build/Release folder => it works! --
i.e., it opens and correctly reads the headers & (I think) the bitmap.

Hmmm. These new palettes are in pop-up windows or modal dialogs; actually, all could be
modal dialogs. Anyway, they're definitely not floating windows, so pretty different "under
the hood" from the tool palette; I probably shouldn't use NInitPalettes() for them!

But wait. The problem is fonts, not pop-ups! Why not keep these commands using pop-ups,
just make the contents of the pop-up menus bitmaps instead of character strings? Bcs we're
using the Apple menu machinery, just with our UI fonts instead of standard fonts, and our
fonts are now unusable! I'm sure it's possible to replace the "menus" with bitmaps and have
things work the way we want, but it might be difficult -- and we'd still have to solve the
"tool palette is never filled in" problem, which appears to be difficult because it depends
on a PICT. Oh well.

Should I use GWorlds or GrafPorts? GWorlds seem to have replaced GrafPorts for at least some
purposes; I've never understood why, but the #define in compilerFlags.h has been there since
Oct. 2016, probably longer, so... Ah, apparently they make color GrafPorts easier. Irrelevant
for these palettes, but no reason not to use them.

Ngale uses a GWorld for the scrolling text in the About box; that looks like by far the
most similar thing in Ngale to what I want to do. So next step: Make the Set Duration dialog
much larger; replace the pop-up item with whatever the About box uses; and... TBD. Well,
the About box of course has a user item!; that's what we need, but we want to start out by
drawing the palette, and when it's clicked, just do hilighting etc. instead of all the
pop-up stuff.

Launch Ngale, New, enter a note, Set Duration; click ?anywhere? => crashes in SetDurFilter.
Make SetDurFilter just return False => clicking anywhere except OK doesn't crash (or do
anything else); clicking OK crashes.

Make SetDurFilter behave normally except case updateEvt just returns False => clicking a
button crashes. Make cases mouseDown, mouseUp j. r. False => clicking anywhere does
nothing. Ah, curPop is undefined, so curPop->box is garbage, so PtInRect(where, &curPop->box)
crashes! We want the bounding box of the user item containing the palette image => OK.

Move the code in About.cp to copy an offscreen bitmap to a dialog into a new function
CopyOffScreenBitsToDlog so can use it for palettes.

---------------------------------------------------------------------------------------

3 - 7 June

Generalize CopyOffScreenBitsToDlog => CopyOffScreenBitsToWindow.

Replacing the PICT for the tool palette with a bitmap image for it should be a good start on
replacing UI fonts with images; code is in InitToolPalette() & DrawToolPalette(). PICT 2001,
the tool palette at maximum size with no margins, is 271 x 399. Can we replace picRect.right
& picRect.bottom with infoHdr.width & infoHdr.height?

	picRect.right=271 bottom=399
	infoHdrSize=40 width=271 height=399 bits=1  (NOpenBMPFile)

Sure looks like it: it's exactly the right size! Rewrite InitToolPalette() to read in the
BMP file and call CopyOffScreenBitsToWindow instead of DrawPicture() => it doesn't get drawn
:-( . With the old code, using a PICT:

	Jun  5 17:13:37 DonDualG5 Ngale[37043]:
	debug. InitToolPalette: windowRect tlbr=40,0,353,98
	debug. InitToolPalette1: aPixMap->rowBytes=-32368 ->bounds.tlbr=0,0,353,98 ->pmVersion=1 MemBitCount(palPortBits, 1000)=7872
	debug. InitToolPalette2: aPixMap->rowBytes=-32368 ->bounds.tlbr=0,0,353,98 ->pmVersion=1 MemBitCount(palPortBits, 1000)=7536

With the new code, using a BMP:

	debug. InitToolPalette: windowRect tlbr=40,0,353,98
	debug. InitToolPalette2: aPixMap->rowBytes=-32368 ->bounds.tlbr=0,0,353,98 ->pmVersion=1 MemBitCount(palPortBits, 1000)=7872

But the new code draws into windowRect; what about picRect? With the old code, using a PICT:

	Jun  6 22:01:35 DonDualG5 Ngale[1102]:
	debug. InitToolPalette: windowRect tlbr=40,0,353,98 toolCellWidth,Height=17,25
	debug. InitToolPalette: picRect tlbr=0,0,399,271
	debug. InitToolPalette1: aPixMap->rowBytes=-32368 ->bounds.tlbr=0,0,353,98 ->pmVersion=1 MemBitCount(palPortBits, 1000)=7872
	debug. InitToolPalette2: aPixMap->rowBytes=-32368 ->bounds.tlbr=0,0,353,98 ->pmVersion=1 MemBitCount(palPortBits, 1000)=7536

With the new code, using a BMP:
	Jun  7 15:58:49 DonDualG5 Ngale[2027]:
	debug. InitToolPalette: windowRect tlbr=40,0,353,98 toolCellWidth,Height=17,25
	debug. InitToolPalette: maxToolsRect tlbr=0,0,399,271
	debug. InitToolPalette2: aPixMap->rowBytes=-32368 ->bounds.tlbr=0,0,353,98 ->pmVersion=1 MemBitCount(palPortBits, 1000)=7872

The tool Palette parameters are:
	maxAcross=16  maxDown=16  across=5  down=12  oldAcross=5  oldDown=12  firstAcross=5  firstDown=12

The max. palette size is 16x16 cells; the default is 5 wide, 12 high. TOOLS_MARGIN is 7. So,
not counting margins, width should be 5 x 17 = 85 pixels; w/ margins, 85+14 = 99. Height w/o
margins should be 12 x 25 = 300 pixels; w/ margins, 300+14 = 314. And windowRect's width
[0,98] is indeed 99 pixels; its height [40,353] is 314. So why does the BMP approach leave the
palette blank??

---------------------------------------------------------------------------------------

8 - 10 June

I need help with the "BMP approach leaves the palette blank" problem, and asked Doug McK.!
In the meantime,
SWITCH TO: Get rid of (at least some) compiler warnings about "multi-character
character constant". NB: Despite the warning, all of these work! I can only think that the
UTF-8 encoding takes more than one byte but it's converted to the one-character encoding ??

+ About.c: PAUSE_CODE and BOLD_CODE just need to match the character codes in a 'TEXT' resource.

PAUSE_CODE	'¹' (draws pi) =>			 0xB9	/* [opt-p in Mac Roman] Pause scrolling (cf. SCROLL_PAUSE_DELAY) */
BOLD_CODE	'º' (draws integral sign) => 0xBA	/* [opt-b in Mac Roman] Draw this line in bold */

+ Error.c: Again we just need to match the character codes in a resource (here, 'STR#').

	#define OPEN_GUILLEMET 0xC7			/* Codepoint in the ancient Mac Roman encoding */
	#define CLOSE_GUILLEMET 0xC8		/* Codepoint in the ancient Mac Roman encoding */

+ Defs.h (used in DrawUtils.c): We need the Sonata font encodings.

MCH_upbow '²' => 0xB2 (NB: 'v' works too; dunno why, but MCH_heavyAccentBelow can't be the same!)
MCH_downbow '³' => 0xB3

- ChordSym.c:

		if (eStr[1]=='-') eStr[1] = '–';				/* prevent dotted line in menu! */


---------------------------------------------------------------------------------------

12 - 13 June

BACK TO: UI font problem, solution #3: abandon fonts and use the images as a palette.
Using bitmap images for the tool palette instead of a PICT, and for several dialogs and other
commands instead of UI fonts, is taking so long and requiring so many changes to the 5.8
code, complicated by my customary code cleanup, that integrating the changes into 5.9 is
likely to be a serious pain! In addition, 5.8.11 is going to have lots of changes relative
to 5.8.10 -- so many it's probably best to give it a distinct .1 version number.
So:

+ (1) Port the stable changes so far back to 5.9

---------------------------------------------------------------------------------------

16 - 17 June

+- (2) RENAME VERSION 5.9 AS 6.0. CAREFUL!!

BACK TO: Get rid of (at least some) compiler warnings about "multi-character character
constant".

+ UIFUtils.cp:1170:

		if (prev=='\r' || prev==' ' || prev=='�' || prev=='\t' || n==0)

This line in SmartenQuote() is to decide when to use an open curly quote. '�' should be
option-space: in Macintosh Roman (ugh), 0xCA.

---------------------------------------------------------------------------------------

29 June - 3 July

RENAME THE CURRENT VERSION 5.8 (with work towards using bitmap images instead of a PICT
for the tool palette and instead of UI fonts for various commands) AS 5.9. CAREFUL!!

RENAME VERSION 5.8.10 AS 5.8 -- except that Executables/Nightingale5p8p10PPC.app is time-
stamped Nov. 14, 2020, 7:49 PM, but the build/Release/Nightingale.app in the
NightingaleDABVer_5p8 folder backup of Nov. 14, 2020, ca. 9 PM, is time-stamped July 16,
2020, 7:56 AM, and the build/Release/Nightingale.app in every backup from then until ca.
June 2021 has the same time stamp! Weird, but not worth worrying about. The changes in
5.8.10 between July 16 and Nov. 14, 2020 affected FileOpen.cp, FileSave.cp, and
SysPageEdit.cp (and no other .cp's), but I'm pretty sure they were minor!

---------------------------------------------------------------------------------------

5 - 15 July

BACK TO: abandon the PICT for the tool palette and UI fonts for some dialogs; replace
them with bitmap images read from BMP files.

Cf. notes for 24 May - 2 June. The scrolling text in the About box is drawn into an
offscreen bitmap, then moved to the screen via CopyBits; that's worked for years. But
the same procedure for the tool palette displays nothing. Why?

In the About box, build a Pattern & overwriting part of the scrolling text => it works.
In the tool palette, draw text & a pattern => it works.
See results in HackedPalette+AboutBox.png.

In the Set Duration dialog, try to fill the user item w/ something => does nothing. ??

Well, I should be able to make a _ton_ of Patterns each duplicating an 8x8 grid of pixels
of the pattern I want! Uuuuuuugly, but let's give it a try. In the About box, draw two
arbitrary Patterns side-by-side in the scrolling text area (code in new function DrawBMP)
=> it works! In the tool palette, do the same thing => it works!

Now do the same thing using Patterns from the BMP file => ??

---------------------------------------------------------------------------------------

16 - 29 July

Make SimpleBMPUtil display the BMP content graphically as well as in hex via a new function,
DPrintRow; test with ChangeDynamicNB.bmp =>

bitmap: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00		6 rows of all white
		....
      : ff ff ff ff   ff ff ff ff   ff ff 1f ff   ff ff ff 00		3 black pixels = top of "f"?
      : ff 3f ff f9   cf ff e7 39   ff ff 2f ff   ff ff ff 00		lots of black pixels!
      : ff 5f ff fa   d7 ff eb 5a   ff ff e7 ff   ff ff ff 00
		....														ca. 10 more similar rows
      : ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00		14 rows of all white
		....
      : 87 0e 1f f8   61 ff ff 0f   ff ff e1 ff   ff e7 ff 00		ca. 11 rows with lots of black
      : cf 9f 3f fc   f3 ff ff 9f   ff ff f3 ff   ff eb ff 00
		....
      : ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00		4-3/4(>) rows of all white
      : ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
      : ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
      : ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
      : ff ff ff ff   ff ff ff ff   ff ff ff ff   00 00 00 00

graphic:

  0: . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . * .* 
  1: . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . * .* . . . .* . . . .* 
  2: . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . * .* . . . .* . . . .* . . . .* . . . .  
  3: . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . * .* . . . .* . . . .* . . . .* . . . .  .*. . .* . . . .  
  4: . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . * .* . . . .* . . . .* . . . .* . . . .  .*. . .* . . . .  .** . .* . . . .  
  5: . . . .  . . . .* . . . .  . . . .* . . * .* . . . .* . . . .* . . . .* . . . .  .*. . .* . . . .  .** . .* . . . .  . * . .* . . . .  
  6: . . . .  . . . .* . . * .* . . . .* . . . .* . . . .* . . . .  .*. . .* . . . .  .** . .* . . . .  . * . .* . . . .  . * . .* .*. * .* 
  7: . . * .* . . . .* . . . .* . . . .* . . . .  .*. . .* . . . .  .** . .* . . . .  . * . .* . . . .  . * . .* .*. * .* . * . .* . . . .* 
  8: . . . .* . . . .* . . . .  .*. . .* . . . .  .** . .* . . . .  . * . .* . . . .  . * . .* .*. * .* . * . .* . . . .* . * . .* . . . .* 
  9: . . . .  .*. . .* . . . .  .** . .* . . . .  . * . .* . . . .  . * . .* .*. * .* . * . .* . . . .* . * . .* . . . .* . * . .* . . . .* 
 10: . . . .  .** . .* . . . .  . * . .* . . . .  . * . .* .*. * .* . * . .* . . . .* . * . .* . . . .* . * . .* . . . .* . . . .* .*. * .  
 11: . . . .  . * . .* . . . .  . * . .* .*. * .* . * . .* . . . .* . * . .* . . . .* . * . .* . . . .* . . . .* .*. * .  . . . .* . . . .  
 12: . . . .  . * . .* .*. * .* . * . .* . . . .* . * . .* . . . .* . * . .* . . . .* . . . .* .*. * .  . . . .* . . . .  . . . .* . . . .  
 13: .*. * .* . * . .* . . . .* . * . .* . . . .* . * . .* . . . .* . . . .* .*. * .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  
 14: . . . .* . * . .* . . . .* . * . .* . . . .* . . . .* .*. * .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  
 15: . . . .* . * . .* . . . .* . . . .* .*. * .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  
 16: . . . .* . . . .* .*. * .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  
 17: .*. * .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  
 18: . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  . . . .* . . . .  
	etc. etc.

ChangeDynamicNB.bmp is roughly

	ppp pp  p   mp  mf
	
	f   ff  fff sf

Well, the hex generally looks a lot like the actual image, but details are off: e.g., the
ascender on the "f" at end of first row is 3 pixels high, but the hex has only one row of
just a few black pixels near the end. The graphic vaguely suggests the image, but it has
major differences all over the place. ??

Need to test w/ a much smaller and simpler 1-bit/pixel image.

---------------------------------------------------------------------------------------

30 July - 16 Aug.

Fixed some bugs. Now test with a much smaller and simpler 1-bit/pixel image.

	Opening BMP file 'DiagonalLines1b.bmp'...  (OpenBMPFile)
	fileSize=318 offsetToPixelArray=62  (OpenBMPFile)
	infoHdrSize=40 width=64 height=32 bits=1  (OpenBMPFile)
	imageSize=256 xResolution=2835 yResolution=2835 colors=2  (OpenBMPFile)
	
	bitmap  0: 77 77 77 77   77 77 77 77   bb bb bb bb   bb bb bb bb
			1: dd dd dd dd   dd dd dd dd   ee ee ee ee   ee ee ee ee
			2: 77 77 77 77   77 77 77 77   bb bb bb bb   bb bb bb bb
			3: dd dd dd dd   dd dd dd dd   ee ee ee ee   ee ee ee ee
				(etc. etc.)
	bWidth=8 bWidthWithPad=8
	  0: *...*... .*...*.. ..*...*. ...*...* *...*... .*...*.. ..*...*. ...*...* 
	  1: .*...*.. ..*...*. ...*...* *...*... .*...*.. ..*...*. ...*...* *...*... 
	  2: ..*...*. ...*...* *...*... .*...*.. ..*...*. ...*...* *...*... .*...*.. 
	  3: ...*...* *...*... .*...*.. ..*...*. ...*...* *...*... .*...*.. ..*...*. 
	  4: *...*... .*...*.. ..*...*. ...*...* *...*... .*...*.. ..*...*. ...*...* 
				(etc. etc.)

The bitmap hex looks correct. So does the graphic version, except the stripes are going in
the wrong direction! The bitmap goes 7, b, d, e = 0111, 1011, 1101, 1110. Ah, I've confused
<width> and <bWidth>, so I'm skipping all over the place! Fix that => stripes are still
going in the wrong direction. Try ChangeDynamicNB.bmp => SUCCESS! I.e., the image is very
recognizable; it's just upside down!

There's still some trash at the top of most images, i.e., the last bytes read. Ah, I'm
computing nBytesToRead without considering padding! Fix that => the graphics SimpleBMPUtil
displays for ChangeDynamicNB.bmp and ToolPaletteNB1b.bmp look perfect!

Returning to Ngale 5.9, update the code in InitToolPalette() => as shown in ToolPalette_Bad.png,
no change :-(

OK, let's test with something simpler, ChangeDynamicNB1b.bmp instead of the real tool palette.
SimpleBMPUtil reports:

	bitmap  0: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
			1: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
			2: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
			3: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
			4: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
			5: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
			6: ff ff ff ff   ff ff ff ff   ff ff 1f ff   ff ff ff 00
			7: ff 3f ff f9   cf ff e7 39   ff ff 2f ff   ff ff ff 00
			8: ff 5f ff fa   d7 ff eb 5a   ff ff e7 ff   ff ff ff 00
	  9: ........ ..**.... ........ .......* *...**.. ........ .....**. ..**...* *....... ......** **.**... ........ ........ ........ ........ 
	  8: ........ *.*..... ........ .....*.* ..*.*... ........ ...*.*.. *.*..*.* ........ ........ ...**... ........ ........ ........ ........ 
	  7: ........ **...... ........ .....**. ..**.... ........ ...**... **...**. ........ ........ **.*.... ........ ........ ........ ........ 
	  6: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ***..... ........ ........ ........ ........ 
	  5: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 
	  4: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 
	  3: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 
	  2: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 
	  1: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 
	  0: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 

...which looks exactly right. Have Ngale also use DPrintRow as well as DHexDump to display
the BMP =>

	Aug 12 07:58:05 DonDualG5 Ngale[63740]:
	debug. Tools: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
	debug.      : ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
	--- last message repeated 4 times ---
	debug.      : ff ff ff ff   ff ff ff ff   ff ff 1f ff   ff ff ff 00
	debug.      : ff 3f ff f9   cf ff e7 39   ff ff 2f ff   ff ff ff 00

	  9: ........ ..**.... ........ .......* *...**.. ........ .....**. ..**...* *....... ......** **.**... ........ ........ ........ ........ 
	  8: ........ *.*..... ........ .....*.* ..*.*... ........ ...*.*.. *.*..*.* ........ ........ ...**... ........ ........ ........ ........ 
	  7: ........ **...... ........ .....**. ..**.... ........ ...**... **...**. ........ ........ **.*.... ........ ........ ........ ........ 
	  6: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ***..... ........ ........ ........ ........ 
	  5: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 
	  4: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 
	  3: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 
	  2: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 
	  1: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 
	  0: ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ ........ 

...which also looks exactly right. So the problem must be something DrawBMP does -- almost
certainly DrawRow! Ah, it's actually _DrawRows_: it builds and draws Patterns, which of course
are 8x8. Change code accordingly => absolutely no visible effect!?

---------------------------------------------------------------------------------------

17 - 29 Aug.

Let's work on converting one of the UI-font-dependent dialogs to use a BMP: the "change
dynamic" one. Rename DynamicPopUp.cp to DynamicEdit.cp; remove the code for handling the pop-up;
enlarge the user item in the DLOG to the size of the image, 120x52. Etc. => double-click
dynamic => shows dynamics in the user item readably but with a lot of distortion.

---------------------------------------------------------------------------------------

1 - 8 Sept.

Add stmts to DrawBMP and DrawRows => ovewhelming detail w/ no obvious reason for the distortion!
Have DrawBMP just draw the bottom three sets of 8 rows:

	//for (short nBotRow = 0; nBotRow<=height; nBotRow += 8) {
	for (short nBotRow = 0; nBotRow<=16; nBotRow += 8) {

...and have DrawRows just draw the leftmost three Patterns -- i.e., 24 pixels -- in each row:

	//for (short patNum = 0; patNum<bWidth; patNum++) {
	for (short patNum = 0; patNum<3; patNum++) {

Results: As expected, draws just the distorted "f". Log output w/ bit-by-bit complements 
(since DrawRows does that bcs our BMPs have 0 for black, 1 for white):

	Sep  2 21:42:55 DonDualG5 Ngale[15524]:
	debug. DynamicFilter: box tlbr=14,160,66,280
	debug. Opening BMP file 'ChangeDynamicNB1b.bmp'...  (NOpenBMPFile)
	debug. fileSize=894 offsetToPixelArray=62  (NOpenBMPFile)
	debug. infoHdrSize=40 width=120 height=52 bits=1  (NOpenBMPFile)
	debug. imageSize=832 xResolution=2835 yResolution=2835 colors=2  (NOpenBMPFile)
	debug. bWidth=15 bWidthWithPad=16 height=52 nBytesToRead=832  (DrawDynamicPalette)
	debug. DynPal  0: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
	debug.         1: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
	debug.         2: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
	debug.         3: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
	debug.         4: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
	debug.         5: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff 00
	debug.         6: ff ff ff ff   ff ff ff ff   ff ff 1f ff   ff ff ff 00
	debug.         7: ff 3f ff f9   cf ff e7 39   ff ff 2f ff   ff ff ff 00
	debug. DrawBMP: bmpRect tlbr=14,160,66,280 nBotRow=0 bWPadded=16 startLoc=0
	debug. DrawRows: nBotRow=0 startLoc=0 patNum=0 xStart=162 yTop=57
	debug.           patternArr[]=00 00 00 00 00 00 00 00					// 1st bytes of rows 0-7
	debug. DrawRows: nBotRow=0 startLoc=0 patNum=1 xStart=162 yTop=57
	debug.           patternArr[]=c0 00 00 00 00 00 00 00					// 2nd bytes of rows 0-7
					 COMPLEMENT:  3f ff ff ff ff ff ff ff 
	debug. DrawRows: nBotRow=0 startLoc=0 patNum=2 xStart=162 yTop=57
	debug.           patternArr[]=00 00 00 00 00 00 00 00					// 3rd bytes of rows 0-7
	debug. DrawBMP: bmpRect tlbr=14,160,66,280 nBotRow=8 bWPadded=16 startLoc=128
	debug. DrawRows: nBotRow=8 startLoc=128 patNum=0 xStart=162 yTop=49
	debug.           patternArr[]=00 00 00 00 00 00 00 00					// 1st bytes of rows 8-15
	debug. DrawRows: nBotRow=8 startLoc=128 patNum=1 xStart=162 yTop=49
	debug.           patternArr[]=0c 0c 3e 18 18 10 30 a0					// 2nd bytes of rows 8-15
					 COMPLEMENT:  f3 f3 c1 e7 e7 ef cf 5f 
	debug. DrawRows: nBotRow=8 startLoc=128 patNum=2 xStart=162 yTop=49
	debug.           patternArr[]=00 00 00 00 00 00 00 00
	debug. DrawBMP: bmpRect tlbr=14,160,66,280 nBotRow=16 bWPadded=16 startLoc=256
	debug. DrawRows: nBotRow=16 startLoc=256 patNum=0 xStart=162 yTop=41
	debug.           patternArr[]=00 00 00 00 00 00 00 00
	debug. DrawRows: nBotRow=16 startLoc=256 patNum=1 xStart=162 yTop=41
	debug.           patternArr[]=00 00 00 00 00 00 03 05
					 COMPLEMENT:  ff ff ff ff ff ff fc fa 
	debug. DrawRows: nBotRow=16 startLoc=256 patNum=2 xStart=162 yTop=41
	debug.           patternArr[]=00 00 00 00 00 00 00 00
	
??
	DynPal row 7:	0c 0c 3e 18 18 10 30 a0
	complement:		f3 f3 c1 e7 e7 ef cf 5f

This is a real mess! I'm sure I could debug it eventually, but why not redesign to use the
one-row-at-a-time approach DPrintRow() uses? DPrintRow already works!

Redesign done; test => yeech! Very different, but totally wrong; it's not even recognizable
now :-( .

---------------------------------------------------------------------------------------

9 - 17 Sept.

The problem certainly seems to be in DrawRow. Doug McKenna sez I'm using the rows/columns of
patBits inconsistently in DrawRow()! The declaration is

	Byte patBits[8][MAX_BITMAP_WIDTH];

So the 1st subscript is the row number (not bit number within a byte); the 2nd is the Pattern
number within rows -- and it's completely consistent. No, that's not it. Lines from
DrawDynamicPaletteLog3.txt:

	line 24: patRow=0 startLoc=256 k=0 bitN=7 bitmap[]=ff >>=ff &=01 patBits[]=1 1 1 1 1 1 1 1
	line 32: patRow=0 startLoc=256 k=1 bitN=7 bitmap[]=fa >>=fa &=00 patBits[]=1 0 1 1 1 1 1 1
	line 40: patRow=0 startLoc=256 k=2 bitN=7 bitmap[]=ff >>=ff &=01 patBits[]=1 0 1 1 1 1 1 1
	line 48: patRow=0 startLoc=256 k=3 bitN=7 bitmap[]=ff >>=ff &=01 patBits[]=1 0 1 1 1 1 1 1

The bitmap[] values are 0xff, 0xfa, 0xff, 0xff; but the patBits[] are the same for lines 32, 40,
and 48, and they're correct for 0xfd (or bf?), not fa _or_ ff! ??

Ah! Doug points out line 2152 is

	patBits[patRow][k] = otherBit;

-- but it's inside these two loops:

	for (short k = 0; k<bWidth; k++) {
		for (short bitN = 0; bitN<8; bitN++) {

So inside the inner loop <k> doesn't change! The subscript should be <bitN>, viz.

	patBits[patRow][bitN] = otherBit;

!! OK, but I _still_ don't have a recognizable image.

After much fiddling around, Doug realized that QuickDraw aligns the Pattern with the
underlying coordinates of the port, so it won't look the same at any given origin. That's
unacceptable, so we can't use Patterns! A brand-new approach:

	/* Brute force draw every horizontal sequence of black (0) pixels as a line, in rows from
	   bottom to top. Leave the white (1) pixels untouched (this implies entire bmpRect must
	   be erased earlier). */
	
And it works! -- for the dynamics palette, that is. It should be trivial to use it with
the Add Modifier and Set Duration commands, and probably also for the tool palette. Other
changes needed for Add Modifier and Set Duration should be analogous to those for [change
dynamic], and almost trivial. The tool palette still needs more work. And all four need
hilighting when an "icon" is selected.

---------------------------------------------------------------------------------------

12 - 19 October

Yes, it works for the dynamics palette on my G5. But on my MacBook Air, Ngale quits on
launch, saying it "can't open a BMP file containing an image file needed to display the
tool palette" :-( ; specifically there's "No such file". From the log:

	Oct 12 13:03:23 Dons-2017-MacBook-Air Ngale[68785]:
	Notice. Checking Tool Palette parameters: No errors found.  (GetToolGrid)
	debug. Opening BMP file 'ToolPaletteNB1b.bmp'...  (NOpenBMPFile)
	ERROR. Can't open bitmap image file 'ToolPaletteNB1b.bmp'. errno=2 (No such file)  (NOpenBMPFile)
	ERROR. Can't open bitmap image file 'ToolPaletteNB1b.bmp'.  (InitToolPalette)

This is despite the fact that ToolPaletteNB1b.bmp is in the same folder as the app
package, NightingaleIntel.app -- and on G5, Ngale does expects it to be in the same folder
as the app. But Ngale doesn't say where to look for it, and maybe on an Intel machine
running OS 10.14, it expects it to be in the same folder as the Unix executable
Nightingale instead of the app package? No, that doesn't help! ?!? I guess the next thing
to try is to have NOpenBMPFile display the full path instead of just the filename. How to
do that? On the other hand, it'd be better if Ngale did specify the folder to find it in,
and it's not clear being in the folder with the app is the best place.

Say, it looks like Xcode puts everything in the project's Resources into the Resources
folder in the app! Maybe all I need to do is to put the BMPs into the project's Resources.
Try it => it works!: i.e., the BMPs appear in the app's Resources folder. But how do I get
NOpenBMPFile() to find them? FindFolder() is only for system-related directories. And
GetResource() is only for resources, not files. I should be able to turn the contents of
the files into resources, but is that a good idea? Resource forks go away starting (I think)
in OS 10.15, but so does QuickDraw; it's not at all clear Ngale will ever get there! Still,
seems like it'd be better to stick with files. Of course I want the relative path, but where
am I starting?

getenv("pwd") does something crazy, but getcwd() works.

	char cwd[PATH_MAX];
	if (getcwd(cwd, sizeof(cwd)) != NULL)
	   LogPrintf(LOG_DEBUG, "Current working dir: %s\n", cwd);
	else
	   LogPrintf(LOG_DEBUG, "getcwd() error\n");

Result on PPC:

	debug. Current working dir: /Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0/build/Release
	
And the path I want is

	/Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0/build/Release/Nightingale.app/Contents/Resources 

From the starting point, that's

	/Nightingale.app/Contents/Resources

Of course the app filename isn't necessarily Nightingale.app :-| . Besides, what does getcwd
say on Intel (with OS 10.14.x)?

	debug. Current working dir: /

#$%&^(@$P#)_(*@!  Okay, but surely there's a way to get the full path to the app! ??

---------------------------------------------------------------------------------------

24 - 27 Oct.

Actually, on macOS, the current working directory always seems to be the folder the app
package is in, so we could just go from there -- but we need the filename of the app.
Ah, but argv[0] in main() seems to give the full path to the actual executable, not to
the app package, and not just the app filename! In my case

	G5: /Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0/build/Release/Nightingale.app/Contents/MacOS/Nightingale

	MBAir: /_INCOMING_MBA/NightingaleIntel.app/Contents/MacOS/Nightingale

With either, to get the path to the Resources folder, remove the stuff after the last
slash; then go to

	../../Resources

The tempo/metronome mark dialog also uses the choose-duration palette; so does the Fancy
Tuplet command! So the problem commands that used to rely on a UI font but now use a
.bmp include Set Duration, insert or edit tempo/metronome mark, Fancy Tuplet (all using
the Set Duration menu); Set/Add Modifiers; and double-clicking a dynamic.

---------------------------------------------------------------------------------------

29 Oct. - 3 Nov.

SWITCH TO Work on commands that use the other palettes, "choose duration" and "choose
modifier". For the Add/Set Modifiers command: .rsrc: edit the dialogs; replace
ModNRPopUp.c with ModNREdit.c, based on DynamicEdit.c, and merge dialog handlers for Add
Modifiers and Set Modifiers => ModNRDialog(); AccModNRMouse: use ModNRDialog for both =>
done. But Add Modifiers dialog ignores clicks on the palette item; Set Modifiers handles
it. Why?

Clean up a few details in both ModNREdit.c and DynamicEdit.c => Set Modifiers and double-
click dynamic => both work perfectly! What about Add Modifiers?? Put it off for now;
likewise finding the BMPs, for which I hope Doug or Geoff will help.

---------------------------------------------------------------------------------------

5 - 10 Nov.

Wait! Is it Set Modifiers or Add Modifiers that fails? Neither! Both work perfectly now!!
I don't know what happened a couple of days ago, but my test file NotesWithModifiers.ngl
seems to be corrupt & can't be opened. That's probably not a coincidence; anyway, rename
it NotesWithModifiersBAD.ngl.

Now for the choose-duration palette. Actually, there are _five_ commands/features that use
it. High priority:
	Set Duration: calls DialogsEditor.c > SetDurDialog
	insert/edit tempo/metronome mark: calls DialogsEditor.c > TempoDialog
	Fancy Tuplet: calls DialogsEditor.c > TupletDialog
Lower priority (but should be easy to handle once the above three are working):
	Import MIDI File: calls MIDIFOCmd.c > TranscribeMFDialog
	Transcribe Recording: calls Transcribe.c > DoQuantize, for "unknown" dur. notes

The pop-up menu is handled by calls to InitDurPopupKey() and GetDurPopItem() in dialog
functions and DurPopupKey() for case keyDown in their filters; now that we're displaying
the entire palette at once, we have to let users click on an item as well as use the
keyboard, so must handle case mouseDown/mouseUp too.

A concern: unlike dynamics and modifiers, symtable[] doesn't distinguish among durations of
notes by subtype (all are 0), nor durations of rests by subtype (all are 1). Is this a
problem for dialog handlers? If so, change symtable[].subtype, thereby risking nasty side
effects? No: symtable[].durcode does the job! So no problem.

rsrc: edit the Set Duration dialog only, for now. Replace DurationPopUp.c with DurationEdit.c,
based on DynamicEdit.c => done; but the Set Duration dialog is way more complicated than
the set-dynamic dialog or the choose-modifier dialog! Maybe work on the Fancy Tuplet or
tempo/metronome mark dialog first? Hmm -- those are somewhat simpler, though not as simple
as set dynamic or choose modifier. But they also look a lot better with a pop-up menu than
a static palette! Ah: leave the little user item, displaying one symbol, as is; if someone
clicks on it, instead of bringing up a real pop-up menu, bring up a simple dialog like the
set-dynamic or the choose-modifier dialog. Not quite as elegant as a pop-up menu, but not
bad at all!

SWITCH TO: Recent versions of Ngale on Intel can't open N106 files! They all give the
message "LAST OBJECT TYPE IS 0 BUT SHOULD BE 25." ...though I think I once saw it with a
large number instead of 0.

	Nov  9 22:00:59 Dons-2017-Air Ngale[35367]:
	Notice. Opening file '1NoteG5.ngl'...
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	Notice. Checking Document header: No errors found.  (CheckDocumentHdr)
	Notice. Checking Score header: No errors found.  (CheckScoreHdr)
	ERROR. LAST OBJECT TYPE IS 0 BUT SHOULD BE 25.  The file is probably damaged. (OpenFile)
	ERROR. CAN'T OPEN THE FILE. errType=-996 errInfo=-999  (OpenError)

This happens with Intel builds of Nov. 3, Oct. 28, and Jun. 18, the only ones I have handy.
R%@*$&**@)$@Q#!(   Ah: the recent "minor" change to NDocAndCnfgTypes.h, intended to avoid
file-compatibility problems in the future if MAXVOICES is increased, caused a file-
compatibility problem :-) because DOCUMENTHEADER is larger than it used to be. Fixed.

---------------------------------------------------------------------------------------

13 - 18 Nov.

SWITCH TO: Why does the debugger behave so poorly on my G5 as to be essentially useless?
On the Mac mini Doug McKenna is using, it seems to work fine! Well, I've been using the
Release build 100% of the time; it's set to maximum optimization (-O4: "fastest,
smallest"), which tends to make debuggers work poorly! Let's try less optimization. Set it
to no optimization (-O0) => makes the app much larger (5.6 MB vs. 3.8), as expected. But
on a quick test -- setting a breakpoint in main() -- it doesn't behave any better; oh
well. Change the setting to "fastest" (-O3) => it's 4.0 MB; back to -O4 => back to 3.8 MB.

BACK TO: Implement the new choose-duration palette. Set Duration now works to some extent:
it changes the durations of selected notes, but the palette is never filled in, and it
ignores clicks on any of the buttons and typing. Add some obvious code from the old pop-up
SetDurDialog() and SetDurFilter() => almost all buttons and typing work. "Show 2 dots"
still doesn't, but it should probably be removed anyway. But why isn't the palette filled
in??

	Nov 17 08:46:13 DonDualG5 Ngale[88942]:
	info. Opening BMP file 'DynamicsNB1b.bmp'...  (NOpenBMPFile)
	debug. Current working dir: /Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0/build/Release
	info. bWidth=15 bWidthPadded=16 height=52 nBytesToRead=832  (InitDynamicPalette)
	info. Opening BMP file 'NRModifierNB1b.bmp'...  (NOpenBMPFile)
	debug. Current working dir: /Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0/build/Release
	info.  bWidth=18 bWidthPadded=20 height=104 nBytesToRead=2080  (InitModNRPalette)
	info. Opening BMP file 'Duration_2dotsNB1b.bmp'...  (NOpenBMPFile)
	debug. Current working dir: /Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0/build/Release
	debug. Duration  0: ff ff ff ff   ff ff ff ff   ff ff ff ff   ff ff ff ff
	. . .
	info. bWidth=27 bWidthPadded=28 height=78 nBytesToRead=2184  (InitDurationPalette)
	debug. Initialize: duration bWidth=-1 bWidthPadded=-1 height=-1

It's not filled in because bmpDurationPal.bWidth, bmpDurationPal.bWidthPadded, and
bmpDurationPal.height have been trashed! Where? The line from InitDurationPalette showing
the bmpDurationPal fields have the correct values is the last statement in
InitDurationPalette before it returns; the line from Initialize showing all three are -1 is
the 1st statement after the call. How is that possible??  @$^@#()*%#$#(*

It's possible bcs the the last statement in InitDurationPalette is displaying the local
variables, not the fields of bmpDurationPal!  @$^@#()*%#$#(*  Fixed: it's filled in now, but
the horizontal origin is way off & it's drawn with circular shift left by ca. 3 columns.

---------------------------------------------------------------------------------------

19 - 22 Nov.

Doug McK. points out the tool palette isn't being drawn because the call to DrawBMP is
commented out! Change that => it's drawn, but the vertical origin is shifted by quite a
bit. The situation for the four palettes is now:

	Tools: vert. (circular? it's unclear) shift up by 4 rows
	Durations: horiz. circular shift left by ca. 3 columns
	Dynamics: OK
	Modifiers: OK
	
DPrintRow confirms the bitmap for durations is shifted the way it's drawn; it's really hard
to tell about the tool bitmap.

Ah! For the duration palette, I have

	nRead = fread(&bmpDurationPal, nBytesToRead, 1, bmpf);
	
...but the first parameter should be <&bmpDurationPal.bitmap>. Correct that => duration
palette looks good! But the tool palette situation is different. bitmapTools is an array
of Bytes, like the .bitmap's of the others. ??

We're doing

	nRead = fread(bitmapTools, nBytesToRead, 1, bmpf);
	nRead = fread(bmpDynamicPal.bitmap, nBytesToRead, 1, bmpf);
	nRead = fread(bmpModifierPal.bitmap, nBytesToRead, 1, bmpf);
	nRead = fread(&bmpDurationPal.bitmap, nBytesToRead, 1, bmpf);
	
The 1st parameter is an array in all cases, so the address of the 1st element should be
passed and the initial "&" ignored. Check => yep. Ah-hah: just before calling DrawBMP,
we do

	SetRect(&maxToolsRect, 0, 0, 300, 300);

...but the 300's are completely arbitrary! change it to 	

	SetRect(&maxToolsRect, 0, 0, width, height);

and all is sweetness and light! Or something like that. So all four palettes are good now!

---------------------------------------------------------------------------------------

24 - 28 Nov.

Features using palettes that are in good shape:

* Set/Add Modifiers: no problems AFAIK.

* Double-clicking a dynamic: no problems AFAIK.

* Commands/features that use the choose-duration palette: High priority:
	Set Duration: calls DialogsEditor.c > SetDurDialog
		"Show 2 dots" doesn't work; it should probably be removed.
	insert/edit tempo/metronome mark: calls DialogsEditor.c > TempoDialog
	Fancy Tuplet: calls DialogsEditor.c > TupletDialog
Lower priority:
	Import MIDI File: calls MIDIFOCmd.c > TranscribeMFDialog
	Transcribe Recording: calls Transcribe.c > DoQuantize, for "unknown" dur. notes

* Tool palette: usable, but code is a mess.
	- I doubt if rearranging works, at least saving the rearrangement, but do I care?
	- Resizing to a smaller size is OK; to a larger, it doesn't draw the new area.
	- Closing and reopening are OK.

* Opening BMP files: help Ngale find them; they're helpless on their own :-( . (Putting
them in the folder with the app seems to work running inside Xcode but not otherwise.)

The last is most critical. It seems that putting them in ~/Library/Application\ Support is
where the BMPs should go. It's not obvious how Apple expected the app to find that folder!,
but they provided a way to get to ~/Library/Preferences; from there, simply going to
../Application\ Support should do it. Both getcwd() and chdir() work as expected. But how
do I "simply" go there? Getting to ~/Library/Preferences via GetPrefsFileSpec() doesn't
set the working directory, so I don't have the full path! Ah, but if chdir() recognizes
"~" beginning a path as the user's home directory, I can just

	chdir("~/Library/Application\ Support");

Does that work? No.

	errno = 0; chdir("~/Library/Application\ Support"); LogPrintf(LOG_DEBUG, ">chdir errno=%d\n", errno); SHOWWD;

says errno =  2, i.e., no such file :-( .

	errno = 0; chdir("/Users/donbyrd/Library/Application\ Support"); LogPrintf(LOG_DEBUG, ">chdir errno=%d\n", errno); SHOWWD;

works, but compiling in "donbyrd" doesn't seem like a viable solution :-| .

Time to reconsider turning the BMP files into resources, let's say 'BMPF' resources. Seems
it'd be easiest, with no significant downside, to copy exactly the entire contents of each
file into a resource -- or do I even have to do a copy? Can I just put each file into the
Xcode Resources folder w/ an appropriate filename? Maybe, but it looks likely to be easier
to add 'em to Nightingale.rsrc... except how do I copy anything into a resource??

Ah! I can't get BMP files from ~/Library/Application\ Support bcs chdir doesn't understand
~ as meaning the user's home directory. But they don't have to be in the user's Library
(and maybe shouldn't be); they can be in the system's Library, i.e., /Library/Application\
Support. Test => it works on both PowerPC and Intel!! Unfortunately, putting anything in
the system Library requires admin permission, but that's acceptable, at least for the time
being.

---------------------------------------------------------------------------------------

1 - 5 Dec.

Removed the "Show 2 dots" checkbox from Set Duration dialog => everything in the dialog seems
to be OK on PowerPC.

To get the tool palette filled in when it's enlarged, can I just draw the whole thing
once and for all? That'd be in InitToolPalette(). GetToolZoomBounds() computes the smallest
grid rectangle that encloses all defined tools, if that's relevant? It shouldn't be... Hmmm,
making this "simple" change gets into the code to support several floating window palettes
and rearranging the tool palette. Only one such palette -- the tool palette -- was ever
implemented, and to my knowledge no one ever cared about rearranging the tool palette; at
least I never did, and I still don't! This deserves more thought. Plus tard.

Let's work on the other features that use the duration palette. Insert/edit tempo/metronome mark
needs undotted and 1-dot durations (the top two rows); Fancy Tuplet, Import MIDI File, and
Transcribe Recording need undotted durations only (just the top row). So DrawBMP() needs to
be able to draw just the top part of an image: add a <drawHeight> parameter to specify => done.

---------------------------------------------------------------------------------------

7 - 15 Dec.

Hey, instead of enlarging the dialogs to accomodate the full palettes, why not use the
dialogs unchanged, but clicking the user item to use the palette brings up a modal dialog
containing the full palette? Overall, that'd probably be better user-interface-wise as
well as reducing the amount of code to change and restricting code changes mostly to the
file(s) that handle(s) the modal dialog(s)! However, it needs code to draw the current
choice into the dialog's user item, presumably copying it from the BMP: conceptually trivial
but messy :-) . Generalize DrawBMP to draw an arbitrary rectangular chunk of BMP? That's
more general than needed, esp. since it'd require handling padding; anyway drawing a small
rectangle is very different from drawing the top n rows. Better to write DrawBMPChar().
Test w/ Import MIDI File => ...wait; it's still not obvious how to find the part of the
bitmap we need for a given cell number because we don't know how large the cells are! But
Ngale needs to know that to handle the tool palette (hiliting, etc.); is it getting it from
the 'PGLB' resource? Yes, but it's not explicit there! Cf. InitToolPalette().

---------------------------------------------------------------------------------------

17 - 21 Dec.

 InitToolPalette() computes

	toolCellWidth = (windowRect->right + 1) / whichPalette->maxAcross;
	toolCellHeight = (windowRect->bottom + 1) / whichPalette->maxDown;

It gets windowRect coords. via:

	bmpf = NOpenBMPFile(TOOL_PALETTE_FN, &pixOffset, &width, &byWidth, &byWidthPadded, &height);
	...
	SetRect(&maxToolsRect, 0, 0, width, height);
	*windowRect = maxToolsRect;

NOpenBMPFile gets width and height straight out of the BMP file information header.
maxAcross and maxDown are straight out of the PGLB.

Probably best to add explicit cell width and height to the PGLB, but leave the tool palette
code as is & have it either ignore the new PGLB fields or use them just for error checking.

Cell count (rows*cols) & size (ht*width):
	Tool palette: 16*16 cells each 25*17 = 400*272 pixels
	Duration " : 3*9 cells each 26*24 = 78*216
	Dynamics " : 2*5 cells each 26*24 = 52*120
	Modifiers " : 4*6 cells each 26*24 = 104*144
	
The best calling sequence for DrawBMPChar isn't obvious!; it needs full info about the bitmap
as well as the section to draw, but w/ x coords. in bits or bytes? And use <dstRect> for its
size? Ah, both it and DrawBMP do the "same thing" for each row!

Pull DrawRow() out of DrawBMP; make its calling sequence similar to DPrintRow; & call it from
DrawBMP (and later DrawBMPChar) => well, DPrintRow still shows the right stuff for both the
tool palette and the Set Duration palette, but both actual palettes are now blank! Likewise
for the modifier and dynamics palettes. ?? go back to DrawUtils.cp of 19 Dec. => no change.
Earlier versions don't link because of a change to calling sequence of DrawBMPChar, but the
palettes are all drawn with NightingalePPC.app of 16 Dec. 7:14A. Ah, now the palettes aren't
blank, but only the beginning of each row of pixels is drawn. Cause: the <byWidth> parameter
to DrawRow is actually the width in bits, not bytes! Correct that => all OK.

---------------------------------------------------------------------------------------

22 - 29 Dec.

Features using palettes that are in reasonably good shape:

* Tool palette:
	- Code is a mess.
	- On Intel, nothing is hilited intially; after that, two cells are hilited
	- Resizing to a smaller size is OK; to a larger, it doesn't draw the new area.
	- Closing and reopening are OK.
	- I doubt if rearranging works, at least saving the rearrangement, but do I care?

* Set/Add Modifiers: no problems AFAIK except arrow keys don't ignore empty cells,
& arrow keys don't auto-repeat.

* Double-clicking a dynamic: no problems AFAIK except arrow keys don't ignore empty cells,
& arrow keys don't auto-repeat.

* Set Duration: no problems AFAIK except doesn't ignore clicks on empty cells & arrow keys
don't ignore empty cells, & arrow keys don't auto-repeat.

* Other commands/features that use the choose-duration palette: High priority:
	insert/edit tempo/metronome mark: calls DialogsEditor.c > TempoDialog
	Fancy Tuplet: calls DialogsEditor.c > TupletDialog
Lower priority:
	Import MIDI File: calls MIDIFOCmd.c > TranscribeMFDialog
	Transcribe Recording: calls Transcribe.c > DoQuantize, for "unknown" dur. notes

---------------------------------------------------------------------------------------

1 - 5 Jan. *** 2022 ***

Fix bug: in the Set Duration palette, clicking on a blank cell isn't ignored, nor is
getting to a blank cell via arrow keys => OK now.

---------------------------------------------------------------------------------------

9 - 15 Jan. 2022

Implement arrow keys auto-repeating in Set Duration, Add/Set Modifiers, & Import MIDI File
dialogs & double-click dynamic window => all OK.

A bug in the tool palette: The regular pointer tool cell always has the wrong hilite status.
Initially nothing is hilighted (inverted); once you click on something, that cell and the
one you click on are hilighted. This is obviously because the pointer tool cell in the tool
palette BMP is hilighted, and the best solution is probably also the easiest: change the
palette BMP => done.

Updated status of features:

* Tool palette:
	- Code is a mess.
	- Resizing to a smaller size is OK; to a larger, it doesn't draw the new area.
	- Closing and reopening are OK.
	- I doubt if rearranging works, at least saving the rearrangement, but do we care?

* Set/Add Modifiers: no problems AFAIK.

* Double-clicking a dynamic: no problems AFAIK.

* Set Duration: no problems AFAIK.

* Import MIDI File: no problems AFAIK except initial quantum shows as 16th but is really 8th.

* The Fancy Tuplet dialog is partly working. With 3 quarters, it correctly defaults to 3:2.
With LongTuplet.ngl, sometimes shows the correct 80:64, but sometimes 0:0. Or am I confused?

* Other commands/features that use the choose-duration palette: High priority:
	insert/edit tempo/metronome mark: calls DialogsEditor.c > TempoDialog
Lower priority:
	Transcribe Recording: no change

---------------------------------------------------------------------------------------
16 - 21 Jan.

* The Fancy Tuplet dialog never hilites the duration unit. If you click on a unit when
creating a tuplet, the numbers are unchanged, but if you click on one when editing a
tuplet, both numbers change to 0.

---------------------------------------------------------------------------------------

25 - 29 Jan.

Let's refactor the code for the dialogs that use the duration palette. Add a DurationEdit.h
to hold the common declarations & definitions and #include it in Nightingale_Prefix.pch => !?!
ld gives me lots of messages like this:

	/Users/donbyrd/Documents/NgaleDev/.../Nightingale.build/Objects-normal/ppc/TupletEdit.o private external definition of _durPalCell in section (__DATA,__common)

#&^*)$#A%(#@$#$  What does "private external definition of _durPalCell" mean??

durPalCell is defined in DurationEdit.h:

	Rect durPalCell[DP_NROWS*DP_NCOLS];
	
DurationEdit.h is needed by DurationEdit.cp and TupletEdit.cp (which reference durPalCell), plus
MIDIFOcmd and Menu. which don't; pull the  #include ?? out of Nightingale_Prefix.pch and
#include it in those four modules => ld says "private external definition of _durPalCell" for just
those four modules!

Do several clean builds of the PPC project and one of the Intel project, quitting and relaunching
Xcode in between => no change. ?? Well, maybe not clean enough. Let’s try moving the
NightingalePPC.build folder out of the project /build folder => no change. ?!? Ah, DurationEdit.h
declares several global variables, which of course are declared over and over as compilation
proceeds! We've handled this problem in vars.h, so move those declarations there => OK :-) .

However, now selecting a new duration in the Open MIDI File dialog doesn't change the character
displayed in the user item there. Reason: TranscribeMFDialog() ignores the return value
from DurPalChoiceDlog() -- which is the new code, contrary to its comments (and maybe what we
want is the new index, not the code?).

---------------------------------------------------------------------------------------

31 Jan. - 8 Feb.

Status of duration-palette features:

* Set Duration: no problems AFAIK.

* Import MIDI File: no problems AFAIK except initial quantum shows as 16th but is really
8th.

* Fancy Tuplet dialog: Always shows initial quantum as 16th and never changes it; otherwise
seems to work properly.

* Insert/edit tempo/metronome mark code is now in TempoEdit. It doesn't work very well.

* Other commands/features that use the choose-duration palette: High priority:
Lower priority:
	Transcribe Recording: no change

We now have DurPalChoiceDlog() for choosing an undotted or single-dotted duration. It
displays a simple modal dialog containing just the top one or two rows of the palette and OK
and Cancel buttons; if user tries to choose "unknown duration", it's ignored. Set Duration
can't use DurPalChoiceDlog, but many of the others should display just the current choice
and call it to handle the choice, rather than displaying the whole palette and handling the
choosing process themselves.

---------------------------------------------------------------------------------------

9 - 14 Feb.

Import MIDI File now does everything right, AFAIK.

Fancy Tuplet still never changes the quantum; otherwise it seems to work properly,
including showing the correct initial quantum. Ah, a silly bug in TupletDialog; fixed!
It now does everything right, AFAIK.

Insert/edit tempo/metronome mark now works nicely!

DrawBMPChar() doesn't display dotted notes properly. It seemed to start drawing one
byte to the left of where it should be; that must be from not considering the padding
between rows of glyphs, but the obvious correction moves it up by a row instead of right
by a byte! ?? I see: have to adjust the <chTopPos> as well as the <byChLeftPos> param
=> OK.

---------------------------------------------------------------------------------------

15 - 20 Feb.

I have no MIDI input device, so I can't test Transcribe Recording in full. It's not worth
a lot of time anyway, but the palette stuff is fresh in my mind these days, so worth some.

Structure and status of duration-palette features:

* Set Duration: SetDurDialog itself displays the full palette. Minor bug: Setting notes to
unknown duration makes them double dotted. Change vars.h => OK now.

* Import MIDI File: MIDIFOCmd>TranscribeMFDialog uses DurPalChoiceDlog to display undotted
durations only. No problems AFAIK.

* Fancy Tuplet dialog: TupletDialog uses DurPalChoiceDlog to display undotted durations
only. No problems AFAIK.

* Insert/edit tempo/metronome mark: TempoEdit>TempoDialog uses DurPalChoiceDlog to display
undotted and single-dot durations. No problems AFAIK.

* Transcribe Recording: QuantizeDialog uses DurPalChoiceDlog to display undotted durations
only. Seems to have no problems except the dialog sometimes has a black box the same size
as & to the right of the user item?!? Oh well, _really_ not worth spending time on!

---------------------------------------------------------------------------------------

21 - 22 Feb.

Looks like I fixed the "black box the same size as & to the right of the user item" bug
in Transcribe Recording; it was a nonsensical call to HiliteDurCell in the filter.

Do palettes deserve any more attention? Yes.

- Tool palette:
	- Code is a mess.
	- Resizing to a larger size doesn't draw the new area.
+ Set/Add Modifiers: OK
+ Double-clicking a dynamic: OK
-+ Duration-palette features:
	+ Set Duration: OK, including code.
	+ Import MIDI File: OK, but code is a mess; nice if could open palette via keyboard
	+ Fancy Tuplet: ditto
	+ Tempo/metronome mark: ditto
	- Transcribe Recording: ditto

Clean up the code => done (enough, that is).


It'd be awfully nice to pin down the N106 file format so people will be motivated to start
using Ngale 6! -- though I don't plan to myself for awhile.

---------------------------------------------------------------------------------------

2 - 6 Mar.

EditInstrMIDI() ends with code beginning "pPart = GetPPARTINFO(partL)" that's been
commented out since 2008 or earlier; I don't know what it was for; remove it! => done.

The "Ngale consistently forgets MIDI playback settings of certain old scores" bug (Issue
#66) is more serious than I thought: it can actually occur with new scores, e.g.,
NoodlingVnDuet.ngl -- created with Ngale 5.8 -- and the converted 'N106' version thereof.
Ngale 6 complains "Possible bug in program: Can't play the score (error -16961)" and says
to use Instrument MIDI Settings > Set Device To All Parts; doing that results in
EditInstrumentMIDI() calling SetCMDeviceForPartn(), which starts with
doc->cmPartDeviceList[1]=624658606 and [2]=169995720 and ends with
doc->cmPartDeviceList[1] unchanged and [2]=624658606 -- i.e., it changes [2] to the same
value as [1]. With 1stMovement_Part3.ngl of my violin concerto, every part starts with
624658606 and ends with the same value. But it's not at all obvious how to fix it :-( . The
"correct" value 624658606 is different from run to run of Ngale (though it & the "wrong"
number seem to always be 9 digits.) 

WriteFile() and OpenFile() both look like they're doing the right thing. Add LogPrintfs to
them to display doc->cmPartDeviceList[]; use Set Device To All Parts to fix 
NoodlingVnDuetN106.ngl; Save as NoodlingVnDuetN106z.ngl; Open NoodlingVnDuetN106z.ngl =>
everything is OK! ??

Starting with NoodlingVnDuetN106x.ngl, which has the problem:

	Notice. Opening file 'NoodlingVnDuetN106x.ngl'...  (DoFileMenu)
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	...
	debug. OpenFile: doc->cmPartDeviceList[1]=-2011601044
	debug. OpenFile: doc->cmPartDeviceList[2]=-2011601044
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	info. Staff sizes in points are  1:16 2:16
	Notice. Opened file 'NoodlingVnDuetN106x.ngl'.  (DoFileMenu)
	debug. DrawScoreRange: fromL=2 toL=413 outputTo=0
	info. tempoCount=1. t=0 => toffset=0 playTempoPercent=100 mutedPart=0  (PlaySequence)
	ERROR. Possible bug in program: Can't play the score (error -16961). With the Instrument MIDI Settings command, Set Device To All Parts.  (PlaySequence)
	Warning. * StopInform alertID=464
	debug. EditInstrMIDI: 1.doc->cmPartDeviceList[1]=1026135649
	debug. EditInstrMIDI: 2.doc->cmPartDeviceList[1]=1026135649
	debug. EditInstrMIDI: 1.doc->cmPartDeviceList[2]=-2011601044
	debug. EditInstrMIDI: 2.doc->cmPartDeviceList[2]=1026135649

Very interesting. The values read in are wrong for both parts, but by the time I gave the
Instrument MIDI Settings command, it'd been corrected for part 1 but not part 2!!

Test again: NoodlingVnDuetN106xb.ngl is OK. ?? Well, not that important; put aside.


---------------------------------------------------------------------------------------

8 - 12 Mar.

SWITCH TO: Open NoodlingVnDuetN106xb.ngl; select time sig. tool; click near right end of bottom
system => Ngale crashes without even showing the dialog :-( . Select key sig. tool; click in
the same place => gives ca. 70 (only in the log except for the first five or six) identical
error messages:

	ERROR. Possible bug in program: Heap at 14e98856 was locked (lockLevel=1). Unlocking it and proceeding.  (ExpandFreeList)

...something I've been seeing occasionally for a few months (in Ngale 5.8, this error
message was commented out, so this doesn't mean it's a new bug! Should probably just comment
it out again);then it inserts the key signature correctly.

Launch Ngale; New score; click in blank staff area w/ time sig. tool => crashes in ShowDialogItem()
called from TimeSigDialog(). Ah-hah! Resorcerer shows DLOG 510 (time signature dialog) as
a trashed version of a totally different dialog or alert!! It's already trashed in the Nov.
7, 2021 version of the resource file. It _should_ be unchanged from Ngale 5.8.x -- and it
looks fine in the July 15, 2020 .rsrc for Ngale 5.8. Copy that & paste into the current .rsrc
=> OK now!

-BACK TO: tool palette:
	- Code is a mess.
	- Resizing to a larger size never draws the new area.
	- Sometimes stays in too low a position and ignores clicks :-( .
	
Doug McKenna could really help with this!
	
---------------------------------------------------------------------------------------

17 - 23 Mar.

Rename "xmovedots" to "xMoveDots" & "ymovedots" to "yMoveDots". Whooppee.

SWITCH TO: Ngale enforces limits to certain fields that were required by the sizes of the
fields, but may no longer be appropriate because the fields are larger in 'N106' format!
Worth considering, for ANOTE:

	Field		Old size	New size	Change max. value
	-----		--------	--------	-------------------	
	xmoveAcc	5 bits		8 bits		from 31 to 50(?)
	xMoveDots 	3 bits		8 bits		from 7 to 20(?)
	yMoveDots	2 bits		8 bits		is 3; leave as is or increase, e.g., to 5?

Actually, it's not clear there's any remotely likely situation where the current limits
are too restrictive -- as long as we don't increase the resolution of these fields, which
should actually be done. But that's nontrivial; for now leave everything as is.

---------------------------------------------------------------------------------------

26 Mar. - 2 Apr.

I'm adding fields to ANOTE (e.g., artHarmonic) and ADYNAMIC (e.g., dModCode) as part of
the transition to 'N106' format. To reduce future confusion, good to rearrange at least
ANOTE fields to a more coherent order first, especially since their order is also a file-
compatibility issue... done.

The new fields need to be initialized, but there are three routines that initialize newly-
created ANOTEs: SetupNote, SetupGRNote, and SetupMIDINote. OK, but they don't share any
code, and they should, but is it worth the time? Probably not. Hmmm -- there are also
routines that initialize newly-created AGRNOTEs, and that _convert_ ANOTEs and AGRNOTEs
from 'N105' to 'N106' format! Put off thinking about sharing code among routines, but
add code to initialize/convert ANOTEs and AGRNOTEs... Done.

---------------------------------------------------------------------------------------

7 - 11 Apr.

Oops. Code to initialize/convert the new notehead-graph segment fields is commented out.

	Byte		nhSegment[4];		/* Segments of notehead graph (unused as of v. 6.0) */

Ngale has never had a field array, and I don't want to write separate macros to handle each
individual field! How about macros to iterate thru the array elements? Ugh. Replace the
array with a union of an unsigned long and the array, and manipulate the unsigned long?
Should work fine, but only as long as the array length stays 4. Ah, just write a single
macro that takes the index as a 2nd parameter! Probably the best solution... done.

BACK TO: the tool palette.
	- Code is excessively complex.
	+ Resizing to a larger size never draws the new area.
	- Occasionally stays in too low a position and ignores clicks :-( .

The code assumes an array of floating-window palettes, sets things up for tearing off
menus, and supports rearranging the tool palette. Of course all three features make the
code more complex! We've never implemented either other floating windows or tearing off
menus; probably should strip both out. AFAIK no one ever cared about rearranging the tool
palette, but the "default" tool palette uses the rearranging feature, so I can't easily
remove it.

For now, probably leave the "excessively complex" tool palette code as is.

---------------------------------------------------------------------------------------

14 - 22 Apr.

The "tool palette stays too low & ignores clicks" bug occurs if you cancel the initial
Open File dialog, then either start a new score or open an existing one! It still responds
to keyboard equivalents. Ah, DoOpenApplication() needs to do

	DoViewMenu(VM_ToolPalette);
	
...and it does, but only if there's a front window! Fixed.

SWITCH TO: While dragging accidentals and note modifiers, they leave a trail. When you
stop dragging and release the mouse, Ngale tries to erase the trail, but often doesn't
erase all of it. They're handled in DragAccModNR.c. Dragging dynamics has the same
problem; they're handled in DragDynamic.c. Dragging most other symbol types is handled by
Dragging.c, and they never (AFAIK) leave a trail.

Files that handle dragging:
	DragAccModNR
	DragBeam
	DragDynamic
	DragGraphic
	Dragging

---------------------------------------------------------------------------------------

24 - 30 Apr.

SWITCH TO: Issue #196: During MIDI playback, Ngale should "turn the page" if any of it
isn't on screen. This is handled by HiliteSyncRect(). It draws the "next" page only if
virtually none of that page is in view yet; if more than a tiny sliver of the page is
already on the screen, it doesn't "turn the page". 

Actually, HiliteSyncRect() scrolls if and only if (1) its <scroll> parameter is true, and
(2) the Sync to be hilited isn't in view; if it does scroll, it always puts the top-left
corner of the page at the top-left corner of the window. Now, as PlaySequence() currently
uses it, <scroll> is True iff the Sync to be hilited is NOT the first to be played, but IS
the first to be played on its page. So it _might_ scroll to show the whole page even of
most of the page is showing, but only if the second Sync to be played is at the other end
of the page; otherwise it won't scroll at all: a ridiculous method. Instead, it should
probably scroll iff the Sync's page's entire width isn't in view, assuming the
magnification and window size are such that the entire width page _can_ be viewed at once.

---------------------------------------------------------------------------------------

5 - 11 May

SWITCH TO: Working on re-installing NightingaleSearch features, I added the C files from 2007(!) --
pre-Xcode 2.5, when we were using Metrowerks CodeWarrior, I believe -- without changing the
extensions from .c to .cp. Result: fatal errors from code using the C++ feature of multiple
functions with the same name distinguished by calling sequence. Not good! Ngale is a C99
program (Issue #158). So:

+ short CountVoices(Document *doc): conflicts with an Apple def., so rename as NCountVoices
 
+ Rect GetQDScreenBitsBounds(): leave as is
  Rect *GetQDScreenBitsBounds(Rect *bounds): remove

+ void InstallMidiMap(Document *doc, Handle fsSpecHdl): rename & declare static
  void InstallMidiMap(Document *doc, FSSpec *fsSpec): MidiMapInfo.c uses

+ Boolean OpenNotelistFile(Str255 fileName, NSClientDataPtr pNSD): Menu.c uses
  Boolean OpenNotelistFile(Str255 fileName, FSSpec *fsSpec): Event.c uses; rename FSOpenNotelistFile

---------------------------------------------------------------------------------------

12 - 15 May

SWITCH TO: Doug McKenna points out inconsistencies in declarations in NObjTypesN105.h. ASTAFF_5
contains WHOLE_KSINFO, but it obviously should be WHOLE_KSINFO_5. Why hasn't that caused
problems in converting files? Probably just dumb luck. Anyway, fixed.

---------------------------------------------------------------------------------------

27 - 31 May

Do minor cleanup in Menu.cp and Windows.cp.

BACK TO: Working on re-installing NightingaleSearch features. Differences from the "standard"
current Ngale 6 (build B17): Info.plist, Nightingale_Prefix.pch; Menu.cp.

Try compiling it... Oops. Among other things, we still have fatal errors from code using
multiple functions with the same name distinguished by calling sequence (Issue #158). Changing
the file suffix from .c to .cp makes those go away, but they're all from code supporting the
obsolete MIDI drivers, so much preferable to get rid of 'em! We have other fatal errors, too,
though. From build results:

	    cd /Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0SEARCH
    /Xcode2.5/usr/bin/gcc-4.0 -x c -arch ppc -pipe -Wno-trigraphs -fpascal-strings -fasm-blocks -Os -Wmissing-prototypes -Wreturn-type -Wformat -Wmissing-braces -Wparentheses -Wswitch -Wunused-function -Wunused-label -Wunused-parameter -Wunused-variable -Wunused-value -Wuninitialized -Wunknown-pragmas -Wshadow -Wsign-compare -fmessage-length=0 -mtune=G4 -fvisibility=hidden -Wno-deprecated-declarations -mmacosx-version-min=10.4 -gdwarf-2 -I/Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0SEARCH/build/NightingalePPC.build/Release/Nightingale.build/Nightingale.hmap -mdynamic-no-pic -F/Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0SEARCH/build/Release -I/Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0SEARCH/build/Release/include -I/Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0SEARCH/build/NightingalePPC.build/Release/Nightingale.build/DerivedSources -isysroot /Xcode2.5/SDKs/MacOSX10.4u.sdk -c /Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0SEARCH/src/FilesSearch/SearchScoreDlog.c -o /Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0SEARCH/build/NightingalePPC.build/Release/Nightingale.build/Objects-normal/ppc/SearchScoreDlog.o
	In file included from /*/NightingaleDABVer_6p0SEARCH/Nightingale_Prefix.pch:126,
		/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:5:18: error: vector: No such file or directory
				 from /*/NightingaleDABVer_6p0SEARCH/src/FilesSearch/SearchScoreDlog.c:4:
	In file included from /*/NightingaleDABVer_6p0SEARCH/Nightingale_Prefix.pch:126,
		/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:6: error: parse error before 'namespace'
		/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:6: warning: data definition has no type or storage class
		/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:58: error: conflicting types for 'CMMIDIController'
		/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:59: error: conflicting types for 'CMMIDISustainOn'
		/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:60: error: conflicting types for 'CMMIDISustainOff'
		/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:61: error: conflicting types for 'CMMIDIPan'
		/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:88: error: parse error before 'vector'
		/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:89: error: parse error before 'vector'
		/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:90: error: parse error before '<' token

The other errors all seem to be from using C++ features (the "using" and "namespace"
keywords and std::vector class) in code claiming to be straight C (via its .c extension).

---------------------------------------------------------------------------------------

2 - 7 June

From build results for recompile of all of NgaleSearch:

	In file included from /Users/donbyrd/Documents/NgaleDev/NightingaleDABVer_6p0SEARCH/Nightingale_Prefix.pch:123,
	/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:6: error: parse error before 'namespace'
	/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:6: warning: data definition has no type or storage class
	/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:58: error: conflicting types for 'CMMIDIController'
	/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:59: error: conflicting types for 'CMMIDIPan'
	/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:86: error: parse error before 'vector'
	/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:87: error: parse error before 'vector'
	/*/NightingaleDABVer_6p0SEARCH/src/Precomps/CarbonTemplates.h:88: error: parse error before '<' token
	...
	Build failed (32 errors, 562 warnings)

We still have two functions with the same name distinguished by calling sequence (Issue
#158)... fixed; we now get "Build failed (28 errors, 562 warnings)". The remaining errors
are all the "using C++ features in code claiming to be straight C" ones; if I change their
extensions, it should definitely compile and the non-search features should run, but does
it? And what about the search commands? Oops; I forgot the other errors! It's now 22 errors,
521 warnings. Most errors are in SearchScore.cp, just because it doesn't know about the TYPE_*
things #defined in SearchScore.h. #include that => 4 errors, 510 warnings. The remaining errors
are in ResultList.cp:

	/*/NightingaleDABVer_6p0SEARCH/src/FilesSearch/ResultList.cp:9:21: error: Dialogs.h: No such file or directory
	/*/NightingaleDABVer_6p0SEARCH/src/FilesSearch/ResultList.cp:10:19: error: Lists.h: No such file or directory
	/*/NightingaleDABVer_6p0SEARCH/src/FilesSearch/ResultList.cp:11:19: error: Sound.h: No such file or directory
	/*/NightingaleDABVer_6p0SEARCH/src/FilesSearch/ResultList.cp: In function 'Boolean SelectMatch(Document*, LINK*, LINK*, short int, Boolean)':
	/*/NightingaleDABVer_6p0SEARCH/src/FilesSearch/ResultList.cp:230: error: 'InDataStruct' was not declared in this scope

From the call

	if (!InDataStruct(doc, matchedObjA[n], MAIN_DSTR))

..we know it's

	Boolean InDataStruct(Document *doc, LINK objL, whichObjList)

and it should be trivial to write, but what happened to the implementation? Ah, in current
(2022, as opposed to 2007!) Ngale code, we have InObjectList() with the same calling
sequence, defined in DSUtils.cp. CHange the call in ResultList.cp => down to 3 errors. But
why do I need Dialogs.h, Lists.h, and Sound.h? Comment them out => no compilation errors!,
and the only link error is DoOpenResultListDocument() is undefined! And that's because all
of ResultListDocument.cp is commented out. Change that & remove the same offending #includes
in it => it links and runs!! ...but the enable/disable status of search-related menu commands
is a mess (easy to fix), and adding notes to the Search Pattern score crashes (may not be
at all easy). Now what??

---------------------------------------------------------------------------------------

22 - 29 June

Well, I'm not sure what I did, but now NgaleSearch doesn't link because ShowSearchDocument()
isn't defined! It and a couple of other search-related functions were in Documents.cp in
2008; copy from there and paste into the current Documents.cp => it links and runs. Copy &
paste a few notes into the Search Pattern => it works!!

The Search for Notes/Rests and Search Again commands currently have keyboard shortcuts of
command-J and command-K, but those don't work because they're already in use for other
commands. Let's change them to option-command-J and -K:

	With Resorcerer, change MDEF for MENU 3 (Edit) from 19999 to 0.
	With Rezilla, change shortcuts for Search for Notes/Rests and Search Again from command-J
		& -K to option-command-J & -K.
	With Resorcerer, change MDEF for MENU 3 back to 19999. NB: Must type 19999, not Copy and
		Paste!

...Done.

---------------------------------------------------------------------------------------

4 - 14 July

NightingaleDABVer_6p0SEARCH changes from regular Ngale 6:
	Documents.cp: ca. 150 lines added in one place
	FilesSearch, containing 5 .cp's and 3 .h's
	Info.plist: 2 lines changed in 2 places ("19" => "19-S")
	Menu.cp: ca. 50 lines added in two places
	Nightingale_Prefix.pch: 1 line changed ("NoSEARCH_CONTENT" => "SEARCH_CONTENT")

Test the Search for Notes/Rests and Search Again commands a bit more => the pitch &
duration matching options I tried all seem to work! But "Find All" crashes at the
beginning of PrepareResultList(), on this line:

	INT16 delta = count - l->nCells;

... because l is NULL. For the moment, just add some error checking and calls to
AlwaysErrMsg() => done. Maybe also disable Find All unless a secret key combo is down
or some such? Then I'd feel okay integrating this into standard Ngale 6!! Well, it'd
be nice to leave out the psuedo-database code; that feature never worked very well
anyway. Look for # lines involving SEARCH_DBFORMAT_MEF...

Search for Notes/Rests "Find All" calls DoIRSearchScore(doc, {11 parameters});
else it calls							DoSearchScore(doc, False, {11 parameters}).
Search Again calls 						DoSearchScore(doc, True, {11 parameters}).
The 11 parameters are identical in all three cases.

And what's the relationship between SearchScore.cp and SearchScoreNative.cp? I think
the former is higher-level; its routines call routines in the latter for searching
regular Ngale scores, as opposed to the psuedo-database.

Where are all the public and semi-public functions for searching?

PUBLIC FUNCTIONS
	SearchScoreDlog:
		SearchDialog(Boolean findInFiles, Boolean *findAll, Boolean *pUsePitch...
	
	SearchScoreNative:
		DoSearchScore(Document *doc, Boolean again, Boolean usePitch, Boolean useDuration...
		DoIRSearchScore(Document *doc, Boolean usePitch, Boolean useDuration...
		DoIRSearchFiles(FSSpec *pTheFile, Boolean usePitch, Boolean useDuration...
	
	??WHERE?: 	(but only #ifdef SEARCH_DBFORMAT_MEF!)
		DoIRSearchFiles(Str255 filename, short vRefNum, Boolean usePitch... (UNUSED)
	
	Documents:
		void ShowSearchDocument(void);
	
	ResultList:
	void DoDialogEvent(EventRecord *theEvent); (UNUSED)

SEMI-PUBLIC FUNCTIONS
	SearchScore:
		N_SearchPatternLen(Boolean *pHaveRest);
		N_SearchScore2Pattern(Boolean includeRests, SEARCHPAT *pSearchPat...
		WarnHaveChord(void)
		CalcRelEstimate(ERRINFO errInfo, INT16 pitchTolerance, FASTFLOAT pitchWeight...
		SearchGetHitSet(...
		SearchIsLegal(Boolean usePitch, Boolean useDuration)
		FormatReportString(SEARCHPARAMS sParm, SEARCHPAT searchPat, char *findLabel, char *str)
		ListMatches(MATCHINFO matchInfoA[],

If SEARCH_DBFORMAT_MEF is #defined, we assume we're searching an MEF database (something
that never worked well); if not, we assume we're searching regular Ngale files. Search
Again and Search for Notes/Rests search the score in the front window, even via the Find
All button. But Find All still crashes; let's not worry about that for the near future.

Where's the code for searching all Ngale files in a folder? Looks like SearchScoreNative.

Now to integrate the search functions into "regular" Ngale 6. Plan: add everything in the
FilesSearch folder except ResultList.cp and ResultListDocument.cp to the project; disable
Find All, and remove calls to functions it uses => done. Test => it works! -- except in
the "Save changes to XXX" message, the filename XXX is garbled, with both the NgaleSearch
and the regular Ngale project. Weird. This message is from DocumentSaved(). Test again =>
no problem with either project. So I dunno, but probably not worth worrying about.

Oops. If the search pattern contains chords, Ngale calls WarnHaveChord to ask the user what
to do; it tries to put up DLOG 816 -- but it doesn't exist, and I can't find it in any
version of NgaleSearch! Should probably fix this one way or another.

---------------------------------------------------------------------------------------

15 - 20 July

I added DLOG 816, giving the warning "The search pattern contains one or more chords.
Nightingale will match only one note in each chord." But is that really accurate? It
looks like it.

Problem 1: When Search Again (and maybe Search for Notes/Rests) find a match, it tends to
scroll in a very unhelpful way! But it may need to scroll to get the new match in view.
What should it do?

Problem 2: It's very hard to see the notes of a match, partly because of Ngale's subtle
hilighting, partly because of the unhelpful scrolling. How about calling attention to
the new selection by flashing it? SearchGetHitSet() tries to find a match and returns its
starting LINK if it succeeds. Looks like it's called for Find All by IRSearchScore() and
for the one-at-a-time searches by SearchScore(); the latter is what we want. It calls
SelectSubobjA(), which... just does an InvalWindow, as it should. That's nowhere near where
we need the info that we want to flash the new selection #&$@#*&&^(!* . Maybe flash the new
sel's bounding box before the InvalWindow? Use the logic of the call to HiliteSyncRect()
in PlaySequence()?

Looks like selection hiliting of notes/rests is done in CheckSYNC(): case SMSelect for
the Select All command, otherwise case SMHilite ?? No, SMStaffDrag is used for selecting
via dragging the arrow cursor, and possibly others!

How about this:
	- rename aNote's <rspIgnore> field to e.g., <selectAlt>
	- in CheckSYNC(), if <selectAlt>, enlarge hiliting (and unhiliting) in _all_ cases.
		(All cases might be wrong, but it should be close, anyway.)
	- SelectSubobjA() sets the note/rest <selectAlt> flags
	- any subsequent action that affects the selection clears all <selectAlt> flags
		immediately, i.e., before the screen is updated

---------------------------------------------------------------------------------------

22 July - 10 August

Try just making hiliting of selected notes larger than normal for selection via
SelectSubobjA. ??

SWITCH TO: Issue #74: Inadequate redrawing. New; create a piece of text anywhere (as long
as it's attached to a system rather than the page); double-click it and make it longer or
change to a larger font; OK => only the portion of the new string that fits in the old
string's bounding box is drawn.

CheckGRAPHIC() contains two attempts to fix this:

//LogPrintf(LOG_DEBUG, "CheckGRAPHIC: <InvalObject 2/EraseAndInval pL=%u strlen=%d\n", pL, Pstrlen(string));
#if 0
	DrawGRAPHIC(doc, pL, contextA, False);
	r = LinkOBJRECT(pL);
	EraseAndInval(&r);
#elif 0
	InvalObject(doc, pL, True); /* In case it's gotten larger */
#endif

...but both are commented out, presumably because they didn't work or caused some problem;
but what!? Ngale 5.7 didn't have any of that code; 5.8 of 25 Apr. 2018 has all of it. Ah,
see discussion above on 25 - 26 Nov. 2017. Sigh. But that says the InvalObject() produced
no change; in a quick test just now, it worked!

Test more with HeadShapeDemo.ngl: Increase font size => it redraws enough; but keep font
size but lengthen string => nope. Why? Increase font size _and_ lengthen string => it
redraws enough to show the enlarged original string but not the additional chars.!

A related problem: Double-clicking a piece of text erases it before bringing the dialog up
(Issue #200). This is generally less than helpful, especially since if you cancel, the text
is never redrawn! But what's erasing it? CheckGRAPHIC() case SMDblClick does "while (Button())"
before calling TextDialog(); the text isn't erased till I release the mouse button, so it's
TextDialog.

In TextDialog, the call to

	ShowWindow(GetDialogWindow(dlog));
	
draws an empty dialog window and doesn't erase the text.

		ShowWindow(GetDialogWindow(dlog));
	SleepTicks(120);
							------------ see empty dialog window frame; text unchanged
		while (keepGoing) {
			ModalDialog(filterUPP, &itemHit);
	SysBeep(1);
	SleepTicks(120);
							------------ the 1st time, dialog window partly filled in;
											text is already gone

So the first call to ModalDialog() is the culprit! Presumably it's the filter callback,
TextDFilter(). The event is an activateEvt; in that case, TextDFilter does literally
nothing but call GetDialogWindow(). In most of our filter procs, an activate does

			if (w==GetDialogWindow(dlog)) SetPort(GetDialogWindowPort(dlog));

In some, it does nothing at all. I have no idea what it _should_ do for text editing,
but try changing it to the above line => no effect. Removing the call to GetDialogWindow
also does nothing. Sigh.

---------------------------------------------------------------------------------------

12 - 18 August

Another related problem (Issue #199): Respace several systems at once => only the first
is redrawn. This situation is handled by InvalRespBars(), which consists of two statements:

	InvalRange(startInvalL, endSysL);
	InvalMeasures(startInvalL, endSysL, ANYONE);					/* Force redrawing */

Well, a comment on InvalRange() says "This should be used with care: for example, if
InvalRange is followed by InvalSystems of systems in the range, the InvalSystems won't do
much! In such cases, use InvalContent." That makes sense, since InvalRange empties the
objRects of all objects in the specified range, and it seems it'd apply to InvalMeasures
too. Replace the InvalRange with InvalContent() => it works!!

One reason for this and, surely, other redrawing issues is the InvalXXX routines are poorly
named and poorly organized. As a small step in that direction, rename InvalContent to
InvalRangeContent... done.

---------------------------------------------------------------------------------------

21 - 28 August

BACK TO: "It's very hard to see the notes of a match, partly because of Ngale's subtle
hilighting, partly because of the unhelpful scrolling." See 15-20 July. Calling attention
to the new selection by flashing it (as proposed there) doesn't work, and I have no idea
why. Would the "enlarge hiliting" method suggested there be acceptable?

Modes of calls to CheckSYNC when selection is changed:
* By clicking:
	if nothing currently selected & click was in a note/rest, 0=SMClick.
	if note/rest currently selected, 4=SMDeselect; then, if click was in a note/rest, 0=SMClick.
* By dragging: if note/rest currently selected, 4=SMDeselect; then 2=SMStaffDrag.
* By SelectSubobjA(): if note/rest currently selected, 4=SMDeselect; then 10=SMHilite.
	Is CheckSYNC called with mode SMHilite in any other situation?
	
CheckSYNC is called with mode SMHilite only in DrawHighLevel.cp/HiliteScoreRange(). (There's a
call in DrawNRGR.cp/DrawSYNC, but only #ifdef USE_HILITESCORERANGE, and that's not #define'd.)
HiliteScoreRange is called by DrawRange(), which is called whenever (part of) the score is
drawn. So having it flash the selection could be distracting, but the "enlarged hiliting"
should be OK.

	- rename aNote's <rspIgnore> field to e.g., <selectEmph>
	- in CheckSYNC(), if <selectEmph>, enlarge hiliting (and unhiliting) in _all_ cases.
		(All cases might be wrong, but it should be close, anyway.)
	- SelectSubobjA() sets the note/rest <selectEmph> flags
	- any subsequent action that affects the selection clears all <selectEmph> flags
		immediately, i.e., before the screen is updated. Where is the selection changed?
		Clicking in the score content area (if not showing Master Page or Work on Format,
		etc.) calls DoSelect, which calls DeselAll, which calls DeselRange. That calls
		CheckObject with mode SMDeselect, so that's where <selectEmph> should be cleared.

Sigh. I'm not sure it's worth doing this after all! It's not usually very hard to see the
newly-selected notes after searching -- and you can Play Selection to have them emphasized.

---------------------------------------------------------------------------------------

29 August - 2 Sept.

SWITCH TO: Compiling each of four files causes a warning "'OMSAPI' redefined". We don't care
about the OMS API anyway, but I think we need to keep the definition for CarbonStubs.cp.

	In file included from ~~/src/CFilesCarbon/CarbonStubs.h:1,
					 from ~~/src/CFilesBoth/InstrDialog.cp:52:
	~~/src/Precomps/MIDI/OMSCompat.h:27:1: warning: "OMSAPI" redefined
	In file included from ~~/Nightingale_Prefix.pch:29,
					 from ~~/src/CFilesBoth/InstrDialog.cp:49:
	~~/src/Precomps/MIDI/OMSCompat.h:27:1: warning: this is the location of the previous definition

Solution: add #ifndef OMSAPI to the declaration of OMSAPI in OMSCompat.h => all those
warnings are gone.

We have an odd() macro, used in one file, and an ODD() macro, used in many, that are
identical; change all to ODD => done.

Now, how about implementing notehead graphs? The _pianoroll_ mode is related, as is the
Color Voices feature; clean them up first.

---------------------------------------------------------------------------------------

3 - 9 Sept.

Replace magic numbers for <colorVoices> values with symbolic names:

enum {
	COLORVOICES_NONE=0,
	COLORVOICES_NONDEFLT,
	COLORVOICES_ALL
};

Change code to use the names => #$*)(#@#! No matter what I do, Ngale draws the screen as if
doc->colorVoices is 1; _but_ here's what debug prints show:

	Notice. Opened file 'Bach_StAnne_69.ngl'.  (DoFileMenu)
	debug. FVM: doc->colorVoices=0 COLORVOICES_NONE=0 doc->colorVoices!=COLORVOICES_NONE=0
	--- last message repeated 10 times ---
	debug. VMColorVoices: doc->colorVoices=0 COLORVOICES_NONE=0
	debug. FVM: doc->colorVoices=2 COLORVOICES_NONE=0 doc->colorVoices!=COLORVOICES_NONE=1
	debug. FVM: doc->colorVoices=0 COLORVOICES_NONE=0 doc->colorVoices!=COLORVOICES_NONE=0

What about this makes any sense?? Oops. The Voice2Color() utility now begins

	if (doc->colorVoices=COLORVOICES_NONE || iVoice<0) return blackColor;

Note the single "=" after doc->colorVoices! Oh well... Fixed.

Back to pianoroll notation. It isn't very useful; one reason is the bars tend to overlap.
The default for config.pianorollLenFact, 75, is too high. 55 seems about right, though
some bars are still long enough to produce overlap, while others are too short! But it's
not worth spending any more time on it. Where in the CNFG resource is pianorollLenFact?
Looks like it's ca. 52 bytes from the end. Ah, don't have to know: Resorcerer has its
template :-) . Change it in Nightingale.rsrc... done.

Now, how about implementing notehead graphs? For UI, a simple way is to overload the
"Pianoroll" menu command the way "Color Voices" is: ugly, but acceptable because pianoroll
has rarely been used, and it's likely to stay that way! So add symbolic values:

enum {								/* Options for graph modes vs. pure CWMN */
	GRAPHMODE_NORMAL=0,
	GRAPHMODE_PIANOROLL,
	GRAPHMODE_NHGRAPHS
};

...and:

+ change the Document <pianoroll> field from Boolean to Byte, and rename <graphMode>;
+ add #defines for <graphMode> values similar to those for Color Voices;
+ rewrite VM_PianoRoll() ala VMColorVoices(), and rename VMGraphMode;
+ rename the Document <pianoroll> field <graphMode>;
+ change the menu command and the name in NResource.h;
+ remove mentions of <doNoteheadGraphs>.

---------------------------------------------------------------------------------------

10 - 16 Sept.

Rewrite DrawNoteheadGraph() to draw "stripes" in correct width for all note segments...
done.

Stripe color 0 is never used because 0 marks the end of the "list" of stripe colors.
Fix that... done.

---------------------------------------------------------------------------------------

17 - 28 Sept.

"Find All" _doesn't_ always crash; in fact, it seems never to crash, it just doesn't do
anything! Why?

It eventually calls ListMatches(). With a bit of work, that does indeed list them in the
log. But it doesn't display the nonmodal dialog where you can click on a match and jump
to it in the score! Why?

It never even tries! In fact, where is the code for the nonmodal dialog?? Ah, two files
from the old NgaleSearch, ResultList.c & ResultListDocument.c. Add 'em, compile & test
=> "ERROR. BUG IN PROGRAM: DoResultListDoc: there's no gResUserList.". Yep, gResUserList
is null. It's set in only one place, BuildDocList(), which is never called. BuildDocList
is called only from the trivial BuildResListDocument() which is called only from
DoOpenResultListDocument(), which is never called. DoOpenResultListDocument is called only
from DoResultListDoc -- which checks for gResUserList & gives the fatal error before
it does anything! #$(*#$=! Call DoOpenResultListDocument before checking gResUserList =>
much better; it actually seems to mostly work!

Now I get a window titled "Result List" that indeed lists matches, apparently
correctly except for part names; Ngale says "Possible bug in program: DrawMessageBox:
Int2UserVoice(0) failed." The name displayed for at least part 1 is "SEARCH", etc. Clicking
on a match does nothing. Find All a 2nd time usually crashes. The message box says smthg
like "page 0 m.0  VOICE 7984 OF [blank]".
For 5NoteScaleN6.ngl, Find All w/ pattern of two of its 1st 4 notes shows

	1: 5NoteScaleN6.ngl: m.1, voice 1 of SEARCH (L10 V1)
	2: 5NoteScaleN6.ngl: m.1, voice 1 of SEARCH (L11 V1)
	3: 5NoteScaleN6.ngl: m.1, voice 1 of SEARCH (L12 V1)

W/ BachStAnne, the name displayed for part 1 is usually "SEARCH", but sometimes correct!?;
for part 2, it's "Pedal" (correct). Ngale often crashes; if not, clicking on a match does
nothing, and Find All a 2nd time might list 1 match and usually crashes.

How does Ngale end up giving "SEARCH" as the name for part 1? It's displayed correctly on
the score! When ListMatches() is called, matchInfoA[n].vInfoStr is bad. It's set in
IRSearchScore(). The _only_ place that string appears in Ngale code is in InitSearchDoc(),
and it's not in any of the resources.

	Sep 27 19:13:12 unknown00112431479a Ngale[25856]:
	Notice. Opened file '5NoteScaleN6.ngl'.  (DoFileMenu)
	Notice. Music font is 'Briard' (font no. 1980).  (InitDocMusicFont)
	info. Respacing from L10 to L2...  (RespaceBars)
	info. FIND ALL: Pitch(R,maxTr=127,tol=0/contour,W75), Dur(R), Rests-Ties-outerN. 2 notes/rests:
	debug. IRSearchScore: doc=14f3246c searchPatDoc=14f338d8
	debug. IRSearchScore: v=1 nFound=0 matchInfoA[].docNum=1 doc=14f3246c scoreName='5NoteScaleN6.ngl'
	debug. GetScoreLocIDString: doc=14f3246c doc->name='^P5NoteScaleN6.ngl'
	debug. IRSearchScore: v=1 userVoice=1 pPart->shortName='SEARCH', ->name='SEARCH', vInfoStr='voice 1 of SEARCH'
	debug. IRSearchScore: doc=14f3246c searchPatDoc=14f338d8
	debug. IRSearchScore: v=1 nFound=1 matchInfoA[].docNum=1 doc=14f3246c scoreName='5NoteScaleN6.ngl'
	debug. GetScoreLocIDString: doc=14f3246c doc->name='^P5NoteScaleN6.ngl'
	debug. IRSearchScore: v=1 userVoice=1 pPart->shortName='SEARCH', ->name='SEARCH', vInfoStr='voice 1 of SEARCH'
	debug. IRSearchScore: doc=14f3246c searchPatDoc=14f338d8
	debug. IRSearchScore: v=1 nFound=2 matchInfoA[].docNum=1 doc=14f3246c scoreName='5NoteScaleN6.ngl'
	debug. GetScoreLocIDString: doc=14f3246c doc->name='^P5NoteScaleN6.ngl'
	debug. IRSearchScore: v=1 userVoice=1 pPart->shortName='SEARCH', ->name='SEARCH', vInfoStr='voice 1 of SEARCH'

Improve error checking in DrawMessageBox => it now precedes the "Int2UserVoice(0) failed"
with "Possible bug in program: DrawMessageBox: can't get measure & page from selection." ??

---------------------------------------------------------------------------------------

18 Oct. - 7 Nov.

SWITCH TO: Compiling NewSlur.cp gives 34 warnings, most about a "shadowed global declaration";
it may be easy to fix those... !! Two of them are for <subcount> and <mustBeTie>; but I
don't see a global declaration for either! ...Ah-hah! Sure, they're global _in that file_,
not in a header. Can I just remove the global declarations? Nope; they're all needed. Oh
well; ignore for now.

The options for the Color Voices and Graph Mode commands are really undiscoverable. They
need dialogs with radio buttons and a "Don't show this again" check box, like:

* when you insert a double bar, Ngale asks "Should this double bar or repeat bar be a barline?".
(DLOG 808, handled in SymbolIsBarline())

* when you insert a slur/tie, Ngale asks which one you want. (DLOG 804, handled in WantTies())

For now, just do the Graph Mode command. SymbolIsBarline and WantTies are almost identical and
just what I need. Start with the code for one... done.

---------------------------------------------------------------------------------------

8 - 16 Nov.

SWITCH TO: David A. reports Robert Osborne has problems in other apps opening some but not
all Ngale MIDI files. E.g., Scat 3.mid opens; Anciently in Cities mid doesn't.

	Nov 16 08:23:59 unknown00112431479a Ngale[29221]:
	Notice. Importing MIDI file 'Scat 3.mid'...  (DoFileMenu)
	Notice. MThd len=6 format=1 nTracks=4 timeBase=480 (qtrNTicks=480)  (ReadMFHeader)
	Notice. Last event time=100657  (CheckAndConsult)
	
	Nov 16 08:24:23 unknown00112431479a Ngale[29221]:
	Notice. Importing MIDI file 'Anciently in Cities mid'...  (DoFileMenu)
	Notice. MThd len=6 format=1 nTracks=4 timeBase=480 (qtrNTicks=480)  (ReadMFHeader)
	Notice. Last event time=97969  (CheckAndConsult)

Ngale opens both with no trouble, & the "MThd" (headers) are identical. ??

Ah-hah! "Anciently in Cities mid", not ".mid": no extension! Is that the problem?

---------------------------------------------------------------------------------------

19 - 24 Nov.

Yep, that's it; he can now open the file! But now he finds the voice part plays back very
softly even though it's marked fff. Open Anciently in Cities.mid in Ngale => sure enough,
1st note on staff 1 (marked fff in original score) has velocity 36; notes in 1st chord
on staff 2 (no dynamic) have velocity 76 -- and notes in 1st chord on staff 3 (no
dynamic) have velocity 26!! Huh? The default dynamic is mf, w/ velocity 75, not 76, so
all three staves are wrong :-( . This is all with Ngale 6.0 B30; how about 5.8.10? Same
thing. How about the 1st notes in the original Ngale file, "Anciently in Cities false dyn#0"?

Staff	Marking	Orig. vel.	Imported MIDI file vel.
-----	-------	----------	-----------------------
1		fff		120			36
2		(none)	75			76
3		pp		25			26

Bizarre! Ah, in WriteMFNotes():

	useVelo = doc->velocity+NoteONVELOCITY(aNoteL);

...and doc->velocity = 1; that probably explains staves 2 & 3! But what about staff 1?

Uh oh. Ngale 6 is exporting MIDI files it can't import, e.g., Anciently in Cities_P1_BadTrack.mid
$%^*@#@I!)*&(# . Can Ngale 5.8 import it? No, but it doesn't say why; it just doesn't open.
Improve error reporting in Ngale 6; it now says:

	Nov 22 14:57:57 unknown00112431479a Ngale[47644]:
	Notice. Importing MIDI file 'Anciently in Cities_P1_BadTrack.mid'...  (DoFileMenu)
	Notice. MThd len=6 format=1 nTracks=4 timeBase=480 (qtrNTicks=480)  (ReadMFHeader)
	ERROR. Can't read MIDI file track: problem with length. errCode=0 len=0 actualLen=0  (ReadTrack)

Reduce it to just the 1st system, Export MIDI File => now it hangs! The last thing in the log
is "WriteTiming: trkLastEndTime=5754".

Add more diagnostic info => now Exporting the 1st system works consistently! Also Exporting the
full page 1! Also Exporting all of "Anciently in Cities false dyn#0"!! I don't understand -- but
I have no idea why it was hanging, so nothing I can do as long as it finishes writing the MIDI
file. How about the mysterious velocity 36 for fff on staff 1? That doesn't happen anymore either!
Notes on that staff in these new MIDI files always have the correct velocity (>120). Delete the
fff from the score, Export again => Notes on that staff in the MIDI files have the correct
velocity for the default dynamic, mf!! So how is Ngale 5.8 different? 5.8.10 isn't; it also
writes a MIDI file with the correct velocity; so does 5.8.9!!! Looks like I've been chasing a
ghost, sigh.

SWITCH TO: Let's do a 5.8.11! Add similar diagnostic info to Ngale 5.8.x, just in case. Retrieve
the codebase from the GitHub "develop5p8 branch" (last commit 28 Oct. 2019) =>
Nightingale-develop5p8_24Nov2022; but ugh! The .rsrc is empty (since I hadn't yet realized that
git doesn't know about resource forks), and FileSave.cp simply isn't there!! Ugh.

---------------------------------------------------------------------------------------

25 Nov. - 15 Dec.

The last commit to the GitHub repository 5.8 branch was 28 Oct. 2019: well after 5.8.9
(executable dated 9 Jan. 2019) but before 5.8.10 (executable dated Nov. 14 2020). But the
info.plist says 5.8.10. So it's a "transitional" codebase, not quite 5.8.10! Oh well.
Added .rsrc and FileSave.cp to Ngale 5.8.x, though they may not be quite the Ngale 5.8.10
versions; what about 5.8.10 changes from the files that are in the repository?

SWITCH TO: Enhance the diagnostic info for Export MIDI File in Ngale 6... Ugh! It's hanging again
when exporting Anciently in Cities_1system.ngl -- most of the time, but rarely if ever if I invoke
DETAIL_SHOW! ^&#(%#%#%!)*$#  To be continued.

BACK TO: Ngale 5.8. DetailedVersionHistory_2012ToPresent.txt says, for 2019:

	18 August - 27 Oct.	 *IN 5.8 & 5.9
	
	Fixed bug (issue #169): courtesy accidentals are too obtrusive. Affects .rsrc: reduce
	courtesyAccLXD & courtesyAccPSize slightly; DrawNRGR.

However, issue #169 is still open, and the courtesyAccLXD & courtesyAccPSize & related fields in
the .rsrc are unchanged from the Nov. 2018 .rsrc to now! Huh? Ah, but they changed slightly in
between, then changed back! CNFG fields fr accs in parens:
																Nov. 2018	Jul. 2020	now	
																---------	---------	---
	courtesyAccLXD:		left paren. H offset (8th-spaces)			6			6		6
	courtesyAccRXD:		right paren. H offset (8th-spaces)			8			7		8
	courtesyAccYD:		paren. V offset (8th-spaces)				8			8		8
	courtesyAccPSize:	PostScript paren. size (% of normal)		100			90		100

In DrawNRGR.cp, DrawAcc() from the version of 29 May 2018 (pre-fix) to 12 Sep. 2019 (post-fix)
replaces variable <delta> with deltaXR, deltaXL, deltaY, but the old version uses <delta> three
times, so the new one does exactly the same thing. (From 12 Sep. to 28 Oct., no changes except 
comments, so the fix was complete by 12 Sep.)

Pre-fix:
		xdRParen = xdAcc + ((DDIST)(((long)scalePercent*xoffset)/100L));
		xdAcc = xdRParen-delta*d8thSp;
		xdAcc += SizePercentSCALE(MusCharXOffset(doc->musFontInfoIndex, accGlyph, lnSpace));

Post-fix adds one line:

		xdRParen = xdAcc + ((DDIST)(((long)scalePercent*xoffset)/100L));
**		xdRParen += dAccWidth-(COURTESYACC_PARENWID(dAccWidth));
		xdAcc = xdRParen-deltaXR*d8thSp;
		xdAcc += SizePercentSCALE(MusCharXOffset(doc->musFontInfoIndex, accGlyph, lnSpace));

So the fix not only uses a smaller right paren. H offset; it also moves the right paren to
the right! Does that make sense? Ah. See extensive comments on issue #169 above (for 18 Aug.
- 8 Sept. 2019)! Extensive, but not extensive enough. What did I really decide? Why is issue
#169 still open?

As before, test w/ score of my violin concerto, 2nd movement, page 9 => w/ Ngale 5.8.9, the
parens/courtesy acc. for flute is OK; for trumpet, too far to left. W/ 5.8.10 and 6.0 b30,
the one for flute is a bit too far to right; for trumpet, OK. So it's not completely clear,
but the 5.8.10/6.0 spacing is probably better overall, and less obtrusive! This just isn't
worth spending any more time on.

BACK TO: Ngale 5.8 (in general). Declare the NIGHTSCOREHEADER comment[] field, which we
always use as a C string, as a C string (instead of Pascal) :-) . Instead of unsigned char[],
make it:

	char		comment[MAX_COMMENT_LEN+1]; /* User comment on score (C string) */

Instances of "doc->comment" in 5.8 with casts to remove:

		MIDIFOCmd.cp: 		strcpy((char *)doc->comment, COMMENT_MIDIFILE);
		NotelistOpen.cp: 	strcpy((char *)doc->comment, COMMENT_NOTELIST);
		ScoreInfo.cp: 		strcpy(commentOrig, (char *)doc->comment);
		ScoreInfo.cp: 				strcpy((char *)doc->comment, (char *)commentNew);

Done. Any other changes from 5.8.9 to 5.8.10 I might have missed are probably just to comments;
anyway, not worth spending time on.

At last, add Ngale 6 enhancements to diagnostic info for Export MIDI File to 5.8... done.
Open AllObjTypes.ngl; Export MIDI File => hangs 3 out of 4 times, with this log:

	Dec  3 16:14:55 unknown00112431479a Ngale[16198]:
	info. Opened file 'AllObjTypes.ngl'.
	debug. DrawToolPalette: MemBitCount(palPortBits, 1000)=924 portRect tlbr=0,0,399,271
	Notice. trkLastEndTime=6624  (WriteTimingTrack)
	debug.   WriteTimingTrack: pL=1 
	debug.   WriteTimingTrack: pL=2 
	debug.   WriteTimingTrack: pL=3 
	debug.   WriteTimingTrack: pL=4 
	debug.   WriteTimingTrack: pL=5 
	debug.   WriteTimingTrack: pL=6 
	debug.   WriteTimingTrack: pL=7 
	debug.   WriteTimingTrack: pL=8 
	debug.   WriteTimingTrack: TEMPO pL=8 
	info.   WriteTimingTrack: TEMPO pL=8 tempoTime=0 timeScale=60480
	debug.   WriteTimingTrack: pL=9 
	debug.   WriteTimingTrack: TIMESIG pL=9 aTSL=1 measureTime=0  
	Dec  3 16:15:36 unknown00112431479a /usr/sbin/spindump[16206]: process 16198 is being monitored
	Dec  3 16:15:37 unknown00112431479a /usr/sbin/spindump[16206]: process 16198 is being force quit

Looks like it's hanging in WriteTSig. Add LogPrintf's to WriteTimingTrack and WriteTSig =>

	Dec  3 16:45:17 unknown00112431479a Ngale[16419]:
	debug.   WriteTimingTrack 1: TIMESIG pL=9 aTSL=L1 measureTime=0 -
	debug.   WriteTSig 1: aTSL=L1 numer=5 denom=4
	debug.   WriteTSig 2: aTSL=L1 numer=5 denom=4

Yes. But why? Ugh: an incredibly dumb mistake in WriteTSEvent():

	while (!odd(tempDenom))
		clocksPerBeat /= 2; tempDenom /= 2;

NB the missing {} ! I seem to have introduced this bug in 5.8.x in the last week or so :-( .
Fixed in 5.8.11, and it now finishes writing the MIDI file for AllObjTypes.ngl with no apparent
problems; but it still can't open the file it writes :-( . How about 6.0.x? WriteTSEvent() in
6.0 doesn't have the bug, _and_ the MIDI file it writes opens & looks fine.

Oops, it was on 3 Dec. that 5.8.11 couldn't open a MIDI file it wrote of AllObjTypes.ngl;  but,
on 6 Dec. ff, after minor changes, it writes files it _can_ open! Test w/ a few more smallish
files => all OK. (Except playing back Clarke-PurcellTrumpetTune.mid, staff 2 is inaudible, and
I have no idea why: every note on both staves has the expected velocity (76), and staff 2 doesn't
seem to be muted!? Launch 6.0 & Import Clarke-PurcellTrumpetTune.mid => all OK; re-launch 5.8.11
& Import it => all OK. Not worth bothering with this.)

Anyway, for me, 5.8.11 seems to have no serious problems -- note velocity or other -- with MIDI
files, either Exporting or Importing. Send it off to David & see what happens for him!

15 Dec.: It works fine; no problems with note velocity. I'm not surprised to find we've been
chasing a ghost :-( . Well, his computer has a bunch of old versions of Ngale on it; who knows
what version he might have been running when he made those MIDI files?

---------------------------------------------------------------------------------------

17 - 25 Dec.

David reports Importing a MIDI file (with Ngale 5.8.11) said:

"The operation failed, perhaps because Nightingale has run out of memory (RAM).
You can increase Nightingale’s memory allocation with the Finder’s Get Info command."

That's STR# 228, no. 12. Ngale also told him "PROGRAM ERROR: Heap Alloc: object size is 0. Heap=20".

Of course the Finder's Get Info command hasn't allowed setting memory for decades, since
OS 10.0! STR# 228, no. 13 in 5.8.11 has the same nonsensical statement about the Finder.
STR# 228, no. 12 in Ngale 6.x is:

"The operation failed, perhaps because Nightingale has run out of memory (RAM). This is
probably due to a bug in Nightingale; contact AMNF for help."

...and #13 has the same change. Make the same changes in 5.8.x => done.

Arrrgh! Lots of problems now with MIDI files for David's Psalm 128-1, 2, 5, 6;
Psalm 24- 1-6, 9,10; Psalm 117; and Hashkivenu 4 (now in folder MIDIFileWoes_Set2). From
email to him of 19 Dec.:

	...The only one of the imported MIDI files I looked at closely is Psalm 128-1, 2, 5, 6.
	For it:

	(1) Ngale thinks there are notes in the T and B parts that don't fit an 8th-note grid.
	(2) Ngale gives the "HeapAlloc" error message repeatedly for track 5 (the B part).

	Nonetheless, it opens the file and displays a score. It’s OK in most ways. However:

	(3) Score Info says the original Ngale file contains 366 note attacks, but the Import
		MIDI options window (for quantization, etc.) says it contains 364, and Score Info
		after import agrees. So 2 disappeared in 1st stage of import.
	(4) the tempo slows to qtr = 58 in m. 15; in the MIDI file, the change is on the last
		beat of m. 10!
	(5) The Tenor and Bass lines parts a measure late, and they're a measure behind
		throughout.

	I looked at the other three briefly, and I think Ngale had some parts starting a
	measure or three late in all.

I overlooked (1b) "Warning. rawSyncTab size 90 disagrees with docSyncTab size of 138".

All of this done via Ngale 5.8.10 or .11. This is bizarre. MIDI files exported by Ngale
haven't been used much, but Version History for Ngale 5.5 says "Fix bug (Issue #24) in
MIDI file export where tempo changes after the first few are often ignored." That was with
my violin concerto; I'm sure I would have noticed if any of the tempo changes were nowhere
near where they were supposed to be! So was that bug introduced after 5.5? And could I have
not noticed parts being a measure behind for the entire score? I doubt it!

Does Ngale 6.0 behave the same way as 5.8 with these MIDI files? Yes. Weird.

Does a much more complex MIDI file that used to be OK have these problems? Try
1stMovement_Part3.mid of July 1 Aug.(?) 2017 w/ Ngale 6.0 =>

	(3) for the original score, Ngale says 2648 note attacks, and Import MIDI options
		window agrees, but Score Info after import says 2598 note attacks. So 50
		disappeared, but in the _2nd_ stage of import!
	(4) has six tempo marks in first two measures! Should be one in m. 1; the next in m. 5.
	(1, 2, 5): no problem.

That would have been created w/ Ngale 5.8b2 or thereabouts. How about David's MIDI files w/
such an Ngale? I don't have 5.8b2, but open Psalm 128-1, 2, 5, 6.mid w/ 5.7 => issues #1,
1b, 2, 3, 4, 5. -- also "rawSyncTab size 90 disagrees with docSyncTab size of 138" ?!
Looks like Export MIDI File in Ngale 5.8 & 6.0 is the problem!

With Ngale 6.0 B31+, (1) open Psalm 24- 1-6, 9,10; export MIDI file as
Psalm 24- 1-6, 9,10N6p0.mid; import that => no problems! (2) open Psalm 128-1, 2, 5, 6;
export MF as Psalm 128-1, 2, 5, 6_N6p0.mid; import that => no problems!!

With Ngale 5.7, 1stMovement_Part3.mid of July 1 Aug.(?) 2017 => again multiple tempo marks
in first two measures. This makes no sense. I can't even tell if the problem is in exporting
or importing the MIDI file!

---------------------------------------------------------------------------------------

27 - 29 Dec.

With Ngale 5.8.11, open open Psalm 128-1, 2, 5, 6; export MF as Psalm 128-1, 2, 5,
6DAB5p8.mod; import that => no problems!! Am I chasing a ghost again? Maybe, but
apparently the problems happen to David consistently, even w/ 5.8.11, so need to set him
up to give me as much information as possible.

SWITCH TO: But the 5.8 branch in GitHub is WAY behind -- not good. After the disastrous
result of my attempt to update it in summer 2019, which Patrick Etienne bailed me out of,
how can I update it without screwing up the develop branch? Strategy A (with thanks to
Will Cowan): On MacBook, create a new local repository from GitHub -- call it
"Nightingale5p8GitRepo" -- and set it (i.e., its HEAD?) to the develop5p8 branch. Then
copy the 5.8 codebase from the G5 to that repository, commit from it, and push to the
develop5p8 branch. That _should_ have no effect on the existing local repository
(NightingaleGitRepo). But if it does, revert at least the develop branch in GitHub, and go
to Plan B: create a new repository in GitHub, preferably (Plan B1) from the code in the
existing develop5p8 branch; then update it and commit and push to it. If that's still
somehow a problem, just create a new local repository with the current 5.8 code and create
a new GitHub repository from that.

---------------------------------------------------------------------------------------

2 - 8 Jan. *** 2023 ***

BACK TO: David A.'s MIDI file problems. With Ngale 6.0 B32 as with B31, running on my G5,
open Psalm 128-1, 2, 5, 6; export MF as Psalm 128-1, 2, 5, 6_N6p0.mid; import that => no
problems at all. Do the same things with Ngale 5.8.10 on my G5 => no problems at all. This
really makes clear his problems are that Export MIDI File with 5.8.10 running on his MacBook
writes badly screwed-up MIDI files -- while the same Ngale running on my G5 exporting (what
he says are) the same Ngale files works fine! Why does it behave so differently?? My only
guess is uninitialized variables. But I can't afford the time to follow that up. Given that,
all I can do is give him a 5.8.11 that can record better diagnostic info in case it happens
again... done.

